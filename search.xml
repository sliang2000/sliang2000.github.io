<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>javascript 笔记</title>
      <link href="/2022/09/01/%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/09/01/%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h5 id="1-计算机语言"><a href="#1-计算机语言" class="headerlink" title="1.计算机语言"></a>1.计算机语言</h5><p>计算机语言（Computer Language）指用于人与计算机之间通讯的语言。计算机语言是人与计算机之间传递信息的媒介。计算机系统最大特征是指令通过一种语言传达给机器。为了使电子计算机进行各种工作，就需要有一套用以编写计算机程序的数字、字符和语法规划，由这些<a href="https://baike.baidu.com/item/字符/4768913">字符</a>和<a href="https://baike.baidu.com/item/语法规则/1095093">语法规则</a>组成计算机各种指令（或各种语句）。这些就是计算机能接受的语言。</p><h5 id="2-分类"><a href="#2-分类" class="headerlink" title="2.分类"></a>2.分类</h5><p><img src="../imgs/bj.assets/image-20220510141309000.png" alt="image-20220510141309000" style="zoom:50%;float:left;" /></p><p><img src="../imgs/bj.assets/image-20220510141952652.png" alt="image-20220510141952652"></p><h4 id="一-JavaScript-基础"><a href="#一-JavaScript-基础" class="headerlink" title="一. JavaScript 基础"></a>一. JavaScript 基础</h4><h5 id="1-JavaScript-发展历史（JS）"><a href="#1-JavaScript-发展历史（JS）" class="headerlink" title="1. JavaScript 发展历史（JS）"></a>1. JavaScript 发展历史（JS）</h5><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">1. 1994年，网景公司(Netscape)发布了Navigator浏览器0.9版，这是世界上第一款比较成熟的网络浏览器，轰动一时。但是这是一款名副其实的浏览器--只能浏览页面，浏览器无法与用户互动,当时解决这个问题有两个办法，一个是采用现有的语言,许它们直接嵌入网页。另一个是发明一种全新的语言。</span><br><span class="line">liveScript ==&gt; javaScript ==&gt; ECMAscript</span><br><span class="line"></span><br><span class="line">2. 1995年Sun公司将Oak语言改名为Java，正式向市场推出。Sun公司大肆宣传，许诺这种语言可以&quot;一次编写，到处运 行&quot;(Write Once, Run Anywhere)，它看上去很可能成为未来的主宰。</span><br><span class="line"></span><br><span class="line">3. 网景公司动了心，决定与Sun公司结成联盟</span><br><span class="line"></span><br><span class="line">4. 34岁的系统程序员Brendan Eich登场了。1995年4月，网景公司录用了他,他只用10天时间就把Javascript设计出来了。</span><br><span class="line"></span><br><span class="line">5.</span><br><span class="line">(1)借鉴C语言的基本语法</span><br><span class="line">(2)借鉴Java语言的数据类型和内存管理</span><br><span class="line">(3)借鉴Scheme语言，将函数提升到&quot;第一等公民&quot;(first class)的地位</span><br><span class="line">(4)借鉴Self语言，使用基于原型(prototype)的继承机制</span><br></pre></td></tr></table></figure><h5 id="2-JavaScript-的组成"><a href="#2-JavaScript-的组成" class="headerlink" title="2. JavaScript 的组成"></a>2. JavaScript 的组成</h5><p><img src="../imgs/bj.assets/image-20220510145615748.png" alt="image-20220510145615748" style="zoom:50%;" /></p><p><img src="../imgs/bj.assets/image-20220510144904468.png" alt="image-20220510144904468"></p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">1. ECMASCRIPT: 定义了javascript的语法规范,描述了语言的基本语法和数据类型</span><br><span class="line">2. BOM (Browser Object Model): 浏览器对象模型</span><br><span class="line">  - 有一套成熟的可以操作浏览器的 API，通过 BOM 可以操作浏览器。比如： 弹出框、浏览器跳转、获取分辨率等</span><br><span class="line">3. DOM (Document Object Model): 文档对象模型</span><br><span class="line">  - 有一套成熟的可以操作页面元素的 API，通过 DOM 可以操作页面中的元素。比如： 增加个 div，减少个 div，给 div 换个位置等</span><br></pre></td></tr></table></figure><p>总结： <strong>JS 就是通过固定的语法去操作 浏览器 和 标签结构 来实现网页上的各种效果</strong></p><h5 id="3-JavaScript-能干什么"><a href="#3-JavaScript-能干什么" class="headerlink" title="3 . JavaScript 能干什么"></a>3 . JavaScript 能干什么</h5><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">1. 常见的网页效果【表单验证，轮播图。。。】</span><br><span class="line">2. 与H5配合实现游戏【水果忍者： http://www.jq22.com/demo/html5-fruit-ninja/】</span><br><span class="line">3. 实现应用级别的程序【http://naotu.baidu.com】</span><br><span class="line">4. 实现图表统计效果【https://echarts.apache.org/examples/zh/】</span><br><span class="line">5. js可以实现人工智能【面部识别】</span><br><span class="line">6. 后端开发，app开发，桌面端开发......</span><br></pre></td></tr></table></figure><h5 id="4-JavaScript-代码的书写位置"><a href="#4-JavaScript-代码的书写位置" class="headerlink" title="4. JavaScript 代码的书写位置"></a>4. JavaScript 代码的书写位置</h5><ul><li>和 <code>css</code> 一样，我们的 <code>js</code> 也可以有多种方式书写在页面上让其生效</li><li><code>js</code> 也有多种方式书写，分为 <strong>行内式</strong>， <strong>内嵌式</strong>，<strong>外链式</strong></li></ul><h6 id="4-1-行内式-JS-代码（不推荐）"><a href="#4-1-行内式-JS-代码（不推荐）" class="headerlink" title="4-1 行内式 JS 代码（不推荐）"></a>4-1 行内式 JS 代码（不推荐）</h6><ul><li>写在标签上的 js 代码需要依靠事件（行为）来触发</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 写在 a 标签的 href 属性上 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(&#x27;我是一个弹出层&#x27;);&quot;</span>&gt;</span>点击一下试试<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 写在其他元素上 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;我是一个弹出层&#x27;)&quot;</span>&gt;</span>点一下试试看<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">注：onclick 是一个事件（点击事件），当点击元素的时候执行后面的 js 代码</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h6 id="4-2-内嵌式-JS-代码"><a href="#4-2-内嵌式-JS-代码" class="headerlink" title="4-2 内嵌式 JS 代码"></a>4-2 内嵌式 JS 代码</h6><ul><li>内嵌式的 js 代码会在页面打开的时候直接触发</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在 html 页面书写一个 script 标签，标签内部书写 js 代码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">alert</span>(<span class="string">&#x27;我是一个弹出层&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">注：script 标签可以放在 head 里面也可以放在 body 里面</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h6 id="4-3-外链式-JS-代码（推荐）"><a href="#4-3-外链式-JS-代码（推荐）" class="headerlink" title="4-3 外链式 JS 代码（推荐）"></a>4-3 外链式 JS 代码（推荐）</h6><ul><li>外链式 js 代码只要引入了 html 页面，就会在页面打开的时候直接触发</li><li>新建一个 <code>.js</code> 后缀的文件，在文件内书写 <code>js</code> 代码，把写好的 <code>js</code> 文件引入 <code>html</code> 页面</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 我是 index.js 文件</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;我是一个弹出层&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 我是一个 html 文件 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 通过 script 标签的 src 属性，把写好的 js 文件引入页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 一个页面可以引入多个 js 文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;index1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;index2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;index3.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="5-JS-中的注释"><a href="#5-JS-中的注释" class="headerlink" title="5. JS 中的注释"></a>5. JS 中的注释</h5><ul><li>学习一个语言，先学习一个语言的注释，因为注释是给我们自己看的，也是给开发人员看的</li><li>写好一个注释，有利于我们以后阅读代码</li></ul><h6 id="5-1-单行注释"><a href="#5-1-单行注释" class="headerlink" title="5-1 单行注释"></a>5-1 单行注释</h6><ul><li>一般就是用来描述下面一行代码的作用</li><li>可以直接写两个 <code>/</code> ，也可以按 <code>ctrl + /</code></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 我是一个单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面代码表示在浏览器里面出现一个弹出层</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;我是一个弹出层&#x27;</span>)</span><br></pre></td></tr></table></figure><h6 id="5-2-多行注释"><a href="#5-2-多行注释" class="headerlink" title="5-2 多行注释"></a>5-2 多行注释</h6><ul><li>一般用来写一大段话，或者注释一段代码</li><li>可以直接写 <code>/**/</code> 然后在两个星号中间写注释<ul><li>各个编辑器的快捷键不一样，<code>vscode</code> 是 <code>alt + shift + a</code></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">我是一个多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">注释的代码不会执行</span></span><br><span class="line"><span class="comment">alert(&#x27;我是一个弹出层&#x27;)</span></span><br><span class="line"><span class="comment">alert(&#x27;我是一个弹出层&#x27;)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;我是一个弹出层&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="6-变量（重点）"><a href="#6-变量（重点）" class="headerlink" title="6. 变量（重点）"></a>6. 变量（重点）</h5><ul><li>变量指的是在程序中保存数据的一个容器</li><li>变量是计算机内存中存储数据的标识符，根据变量名称可以获取到内存中存储的数据</li><li>也就是说，我们向内存中存储了一个数据，然后要给这个数据起一个名字，为了是我们以后再次找到他</li><li>语法： <code>var 变量名 = 值</code></li></ul><h6 id="6-1-定义变量及赋值"><a href="#6-1-定义变量及赋值" class="headerlink" title="6-1 定义变量及赋值"></a>6-1 定义变量及赋值</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个变量</span></span><br><span class="line"><span class="keyword">var</span> num</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给一个变量赋值</span></span><br><span class="line">num = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个变量的同时给其赋值</span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">200</span></span><br></pre></td></tr></table></figure><ul><li>注意：<ol><li>一个变量名只能存储一个值</li><li>当再次给一个变量赋值的时候，前面一次的值就没有了</li><li>变量名称区分大小写（<code>JS</code> 严格区分大小写）</li></ol></li></ul><h6 id="6-2-变量的命名规则和命名规范"><a href="#6-2-变量的命名规则和命名规范" class="headerlink" title="6-2 变量的命名规则和命名规范"></a>6-2 变量的命名规则和命名规范</h6><ul><li><p>规则： 必须遵守的，不遵守就是错</p><blockquote><ol><li>一个变量名称可以由 <strong>数字</strong>、<strong>字母</strong>、<strong>英文下划线（_）</strong>、<strong>美元符号（$）</strong> 组成</li><li>严格区分大小写</li><li>不能由数字开头</li><li>不能是 <strong>保留字</strong> 或者 <strong>关键字</strong></li><li>不要出现空格</li></ol></blockquote></li><li><p>规范： 建议遵守的（开发者默认），不遵守不会报错</p><blockquote><ol><li>变量名尽量有意义（语义化）</li><li>遵循驼峰命名规则，由多个单词组成的时候，从第二个单词开始首字母大写</li><li>不要使用中文</li></ol></blockquote></li></ul><h6 id="6-3-数据类型（重点）"><a href="#6-3-数据类型（重点）" class="headerlink" title="6-3 数据类型（重点）"></a>6-3 数据类型（重点）</h6><ul><li>是指我们存储在内存中的数据的类型</li><li>我们通常分为两大类 <strong>基本数据类型</strong> 和 <strong>复杂数据类型</strong></li></ul><p><strong>基本数据类型</strong></p><ol><li>数值类型（number）<ul><li>一切数字都是数值类型（包括二进制，十进制，十六进制等）</li><li><code>NaN</code>（not a number），一个非数字</li></ul></li><li>字符串类型（string）<ul><li>被引号包裹的所有内容（可以是单引号也可以是双引号）</li></ul></li><li>布尔类型（boolean）<ul><li>只有两个（<code>true</code> 或者 <code>false</code>）</li></ul></li><li>null 类型（null）<ul><li>只有一个，就是 <code>null</code>，表示空的意思</li></ul></li><li>undefined 类型（undefined）<ul><li>只有一个，就是 <code>undefined</code>，表示没有值的意思</li></ul></li></ol><p><strong>判断数据类型</strong></p><ul><li>既然已经把数据分开了类型，那么我们就要知道我们存储的数据是一个什么类型的数据</li><li>使用 <code>typeof</code> 关键字来进行判断</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一种使用方式</span></span><br><span class="line"><span class="keyword">var</span> n1 = <span class="number">100</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> n1)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种使用方式</span></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="string">&#x27;abcdefg&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> s1)</span><br></pre></td></tr></table></figure><h5 id="7-数据类型转换"><a href="#7-数据类型转换" class="headerlink" title="7. 数据类型转换"></a>7. 数据类型转换</h5><ul><li>数据类型之间的转换，比如数字转成字符串，字符串转成布尔，布尔转成数字等</li></ul><h6 id="7-1-其他数据类型转成数值"><a href="#7-1-其他数据类型转成数值" class="headerlink" title="7.1 其他数据类型转成数值"></a>7.1 其他数据类型转成数值</h6><ol><li><p><code>Number(变量)</code></p><blockquote><p>可以把一个变量强制转换成数值类型</p><p>可以转换小数，会保留小数</p><p>可以转换布尔值</p><p>遇到不可转换的都会返回 <code>NaN</code></p></blockquote></li><li><p><code>parseInt(变量)</code></p><blockquote><p>从第一位开始检查，是数字就转换，知道一个不是数字的内容</p><p>开头就不是数字，那么直接返回 <code>NaN</code></p><p>不认识小数点，只能保留整数</p></blockquote></li><li><p><code>parseFloat(变量)</code></p><blockquote><p>从第一位开始检查，是数字就转换，知道一个不是数字的内容</p><p>开头就不是数字，那么直接返回 <code>NaN</code></p><p>认识一次小数点</p></blockquote></li><li><p>除了加法以外的数学运算</p><blockquote><p>运算符两边都是可运算数字才行</p><p>如果运算符任何一遍不是一个可运算数字，那么就会返回 <code>NaN</code></p><p>加法不可以用</p></blockquote></li></ol><h6 id="7-2-其他数据类型转成字符串"><a href="#7-2-其他数据类型转成字符串" class="headerlink" title="7.2 其他数据类型转成字符串"></a>7.2 其他数据类型转成字符串</h6><ol><li><p><code>变量.toString()</code></p><blockquote><p>有一些数据类型不能使用 <code>toString()</code> 方法，比如 <code>undefined</code> 和 <code>null</code></p></blockquote></li><li><p><code>String(变量)</code></p><blockquote><p>所有数据类型都可以</p></blockquote></li><li><p>使用加法运算</p><blockquote><p>在 JS 里面，<code>+</code> 由两个含义</p><p>字符串拼接： 只要 <code>+</code> 任意一边是字符串，就会进行字符串拼接</p><p>加法运算：只有 <code>+</code> 两边都是数字的时候，才会进行数学运算</p></blockquote></li></ol><h6 id="7-3-其他数据类型转成布尔"><a href="#7-3-其他数据类型转成布尔" class="headerlink" title="7.3 其他数据类型转成布尔"></a>7.3 其他数据类型转成布尔</h6><ol><li><p><code>Boolean(变量)</code></p><blockquote><p>在 js 中，只有 <code>&#39;&#39;</code>、<code>0</code>、<code>null</code>、<code>undefined</code>、<code>NaN</code>，这些是 <code>false</code></p><p>其余都是 <code>true</code></p></blockquote></li></ol><h5 id="8-运算符"><a href="#8-运算符" class="headerlink" title="8. 运算符"></a>8. 运算符</h5><ul><li>就是在代码里面进行运算的时候使用的符号，不光只是数学运算，我们在 <code>js</code> 里面还有很多的运算方式</li></ul><h6 id="8-1-数学运算符"><a href="#8-1-数学运算符" class="headerlink" title="8-1 数学运算符"></a>8-1 数学运算符</h6><ol><li><p><code>+</code></p><blockquote><p>只有符号两边都是数字的时候才会进行加法运算</p><p>只要符号任意一边是字符串类型，就会进行字符串拼接</p></blockquote></li><li><p><code>-</code></p><blockquote><p>会执行减法运算</p><p>会自动把两边都转换成数字进行运算</p></blockquote></li><li><p><code>*</code></p><blockquote><p>会执行乘法运算</p><p>会自动把两边都转换成数字进行运算</p></blockquote></li><li><p><code>/</code></p><blockquote><p>会执行除法运算</p><p>会自动把两边都转换成数字进行运算</p></blockquote></li><li><p><code>%</code></p><blockquote><p>会执行取余运算</p><p>会自动把两边都转换成数字进行运算</p></blockquote></li></ol><h6 id="8-2-赋值运算符"><a href="#8-2-赋值运算符" class="headerlink" title="8-2 赋值运算符"></a>8-2 赋值运算符</h6><ol><li><p><code>=</code></p><blockquote><p>就是把 <code>=</code> 右边的赋值给等号左边的变量名</p><p><code>var num = 100</code></p><p>就是把 100 赋值给 num 变量</p><p>那么 num 变量的值就是 100</p></blockquote></li><li><p><code>+=</code></p><blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line">a += <span class="number">10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">//=&gt; 20</span></span><br></pre></td></tr></table></figure><p><code>a += 10</code> 等价于 <code>a = a + 10</code></p></blockquote></li><li><p><code>-=</code></p><blockquote><p>var a = 10;</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">a -= <span class="number">10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">//=&gt; 0</span></span><br></pre></td></tr></table></figure><p><code>a -= 10</code> 等价于 <code>a = a - 10</code></p></blockquote></li><li><p><code>*=</code></p><blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line">a *= <span class="number">10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">//=&gt; 100</span></span><br></pre></td></tr></table></figure><p><code>a *= 10</code> 等价于 <code>a = a * 10</code></p></blockquote></li><li><p><code>/+</code></p><blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line">a /= <span class="number">10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">//=&gt; 1</span></span><br></pre></td></tr></table></figure><p><code>a /= 10</code> 等价于 <code>a = a / 10</code></p></blockquote></li><li><p><code>%=</code></p><blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line">a %= <span class="number">10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">//=&gt; 0</span></span><br></pre></td></tr></table></figure><p><code>a %= 10</code> 等价于 <code>a = a % 10</code></p></blockquote></li></ol><h6 id="8-3-比较运算符"><a href="#8-3-比较运算符" class="headerlink" title="8-3 比较运算符"></a>8-3 比较运算符</h6><ol><li><p><code>==</code></p><ul><li>比较符号两边的值是否相等，不管数据类型<blockquote><p><code>1 == &#39;1&#39;</code></p><p>两个的值是一样的，所以得到 <code>true</code></p></blockquote></li></ul></li><li><p><code>===</code></p><ul><li>比较符号两边的值和数据类型是否都相等<blockquote><p><code>1 === &#39;1&#39;</code></p><p>两个值虽然一样，但是因为数据类型不一样，所以得到 <code>false</code></p></blockquote></li></ul></li><li><p><code>!=</code></p><ul><li>比较符号两边的值是否不等<blockquote><p><code>1 != &#39;1&#39;</code></p><p>因为两边的值是相等的，所以比较他们不等的时候得到 <code>false</code></p></blockquote></li></ul></li><li><p><code>!==</code></p><ul><li>比较符号两边的数据类型和值是否不等<blockquote><p><code>1 !== &#39;1&#39;</code></p><p>因为两边的数据类型确实不一样，所以得到 <code>true</code></p></blockquote></li></ul></li><li><p><code>&gt;=</code></p><ul><li>比较左边的值是否 <strong>大于或等于</strong> 右边的值<blockquote><p><code>1 &gt;= 1</code> 结果是 <code>true</code></p><p><code>1 &gt;= 0</code> 结果是 <code>true</code></p><p><code>1 &gt;= 2</code> 结果是 <code>false</code></p></blockquote></li></ul></li><li><p><code>&lt;=</code></p><ul><li>比较左边的值是否 <strong>小于或等于</strong> 右边的值<blockquote><p><code>1 &lt;= 2</code> 结果是 <code>true</code></p><p><code>1 &lt;= 1</code> 结果是 <code>true</code></p><p><code>1 &lt;= 0</code> 结果是 <code>false</code></p></blockquote></li></ul></li><li><p><code>&gt;</code></p><ul><li>比较左边的值是否 <strong>大于</strong> 右边的值<blockquote><p><code>1 &gt; 0</code> 结果是 <code>true</code></p><p><code>1 &gt; 1</code> 结果是 <code>false</code></p><p><code>1 &gt; 2</code> 结果是 <code>false</code></p></blockquote></li></ul></li><li><p><code>&lt;</code></p><ul><li>比较左边的值是否 <strong>小于</strong> 右边的值<blockquote><p><code>1 &lt; 2</code> 结果是 <code>true</code></p><p><code>1 &lt; 1</code> 结果是 <code>false</code></p><p><code>1 &lt; 0</code> 结果是 <code>false</code></p></blockquote></li></ul></li></ol><h6 id="8-4-逻辑运算符"><a href="#8-4-逻辑运算符" class="headerlink" title="8-4 逻辑运算符"></a>8-4 逻辑运算符</h6><ol><li><p><code>&amp;&amp;</code> (优先级高于||)</p><ul><li>进行 且 的运算<blockquote><p>符号左边必须为 <code>true</code> 并且右边也是 <code>true</code>，才会返回 <code>true</code></p><p>只要有一边不是 <code>true</code>，那么就会返回 <code>false</code></p><p><code>true &amp;&amp; true</code> 结果是 <code>true</code></p><p><code>true &amp;&amp; false</code> 结果是 <code>false</code></p><p><code>false &amp;&amp; true</code> 结果是 <code>false</code></p><p><code>false &amp;&amp; false</code> 结果是 <code>false</code></p></blockquote></li></ul></li><li><p><code>||</code></p><ul><li>进行 或 的运算<blockquote><p>符号的左边为 <code>true</code> 或者右边为 <code>true</code>，都会返回 <code>true</code></p><p>只有两边都是 <code>false</code> 的时候才会返回 <code>false</code></p><p><code>true || true</code> 结果是 <code>true</code></p><p><code>true || false</code> 结果是 <code>true</code></p><p><code>false || true</code> 结果是 <code>true</code></p><p><code>false || false</code> 结果是 <code>false</code></p></blockquote></li></ul></li><li><p><code>!</code></p><ul><li>进行 取反 运算<blockquote><p>本身是 <code>true</code> 的，会变成 <code>false</code></p><p>本身是 <code>false</code> 的，会变成 <code>true</code></p><p><code>!true</code> 结果是 <code>false</code></p><p><code>!false</code> 结果是 <code>true</code></p></blockquote></li></ul></li></ol><h6 id="8-5-自增自减运算符"><a href="#8-5-自增自减运算符" class="headerlink" title="8-5 自增自减运算符"></a>8-5 自增自减运算符</h6><ol><li><p><code>++</code></p><ul><li><p>进行自增运算</p></li><li><p>分成两种，<strong>前置++</strong> 和 <strong>后置++</strong></p></li><li><p>前置++，会先把值自动 +1，在返回</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(++a)</span><br><span class="line"><span class="comment">// 会返回 11，并且把 a 的值变成 11</span></span><br></pre></td></tr></table></figure></li><li><p>后置++，会先把值返回，在自动+1</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a++)</span><br><span class="line"><span class="comment">// 会返回 10，然后把 a 的值变成 11</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>--</code></p><ul><li>进行自减运算</li><li>分成两种，<strong>前置—</strong> 和 <strong>后置—</strong></li><li>和 <code>++</code> 运算符道理一样</li></ul></li></ol><h5 id="9-三元运算符"><a href="#9-三元运算符" class="headerlink" title="9. 三元运算符"></a>9. 三元运算符</h5><ul><li><p>三元运算，就是用 <strong>两个符号</strong> 组成一个语句</p></li><li><p>语法： <code>条件 ? 条件为 true 的时候执行 : 条件为 false 的时候执行</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">18</span></span><br><span class="line">age &gt;= <span class="number">18</span> ? <span class="title function_">alert</span>(<span class="string">&#x27;已经成年&#x27;</span>) : <span class="title function_">alert</span>(<span class="string">&#x27;没有成年&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><h5 id="10-分支结构"><a href="#10-分支结构" class="headerlink" title="10. 分支结构"></a>10. 分支结构</h5><ul><li>我们的 <code>js</code> 代码都是顺序执行的（从上到下）</li><li>逻辑分支就是根据我们设定好的条件来决定要不要执行某些代码</li></ul><h6 id="10-1-IF-条件分支结构（重点）"><a href="#10-1-IF-条件分支结构（重点）" class="headerlink" title="10-1 IF 条件分支结构（重点）"></a>10-1 IF 条件分支结构（重点）</h6><p><strong>if 语句</strong></p><ul><li><p>通过一个 <code>if</code> 语句来决定代码是否执行</p></li><li><p>语法： <code>if (条件) &#123; 要执行的代码 &#125;</code></p></li><li><p>通过 <code>()</code> 里面的条件是否成立来决定 <code>&#123;&#125;</code> 里面的代码是否执行</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 条件为 true 的时候执行 &#123;&#125; 里面的代码</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;因为条件是 true，我会执行&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 条件为 false 的时候不执行 &#123;&#125; 里面的代码</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;因为条件是 false，我不会执行&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>if else 语句</strong></p><ul><li><p>通过 <code>if</code> 条件来决定，执行哪一个 <code>&#123;&#125;</code> 里面的代码</p></li><li><p>语法： <code>if (条件) &#123; 条件为 true 的时候执行 &#125; else &#123; 条件为 false 的时候执行 &#125;</code></p></li><li><p>两个 <code>&#123;&#125;</code> 内的代码一定有一个会执行</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 条件为 true 的时候，会执行 if 后面的 &#123;&#125;</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;因为条件是 true，我会执行&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;因为条件是 true，我不会执行&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 条件为 false 的时候，会执行 else 后面的 &#123;&#125;</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;因为条件为 false，我不会执行&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;因为条件为 false，我会执行&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>if else if … 语句</strong></p><ul><li><p>可以通过 <code>if</code> 和 <code>else if</code> 来设置多个条件进行判断</p></li><li><p>语法：<code>if (条件1) &#123; 条件1为 true 的时候执行 &#125; else if (条件2) &#123; 条件2为 true 的时候执行 &#125;</code></p></li><li><p>会从头开始依次判断条件</p><ul><li>如果第一个条件为 <code>true</code> 了，那么就会执行后面的 <code>&#123;&#125;</code> 里面的内容</li><li>如果第一个条件为 <code>false</code>，那么就会判断第二个条件，依次类推</li></ul></li><li><p>多个 <code>&#123;&#125;</code> ，只会有一个被执行，一旦有一个条件为 <code>true</code> 了，后面的就不在判断了</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一个条件为 true，第二个条件为 false，最终会打印 “我是代码段1”</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;我是代码段1&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;我是代码段2&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个条件为 true，第二个条件为 true，最终会打印 “我是代码段1”</span></span><br><span class="line"><span class="comment">// 因为只要前面有一个条件满足了，就不会继续判断了</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;我是代码段1&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;我是代码段2&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个条件为 false，第二个条件为 true，最终会打印 “我是代码段2”</span></span><br><span class="line"><span class="comment">// 只有前一个条件为 false 的时候才会继续向后判断</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;我是代码段1&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;我是代码段2&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个条件为 false，第二个条件为 false，最终什么也不会发生</span></span><br><span class="line"><span class="comment">// 因为当所有条件都为 false 的时候，两个 &#123;&#125; 里面的代码都不会执行</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;我是代码段1&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;我是代码段2&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>if else if … else 语句</strong></p><ul><li><p>和之前的 <code>if else if ...</code> 基本一致，只不过是在所有条件都不满足的时候，执行最后 <code>else</code> 后面的 <code>&#123;&#125;</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一个条件为 false，第二个条件为 false，最终会打印 “我是代码段3”</span></span><br><span class="line"><span class="comment">// 只有前面所有的条件都不满足的时候会执行 else 后面的 &#123;&#125; 里面的代码</span></span><br><span class="line"><span class="comment">// 只要前面有一个条件满足了，那么后面的就都不会执行了</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;我是代码段1&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;我是代码段2&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;我是代码段3&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h6 id="10-2-SWITCH-条件分支结构（重点）"><a href="#10-2-SWITCH-条件分支结构（重点）" class="headerlink" title="10-2 SWITCH 条件分支结构（重点）"></a>10-2 SWITCH 条件分支结构（重点）</h6><ul><li><p>也是条件判断语句的一种</p></li><li><p>是对于某一个变量的判断</p></li><li><p>语法：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (要判断的变量) &#123;</span><br><span class="line">  <span class="keyword">case</span> 情况<span class="number">1</span>:</span><br><span class="line">    情况<span class="number">1</span>要执行的代码</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> 情况<span class="number">2</span>:</span><br><span class="line">    情况<span class="number">2</span>要执行的代码</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> 情况<span class="number">3</span>:</span><br><span class="line">    情况<span class="number">3</span>要执行的代码</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="attr">default</span>:</span><br><span class="line">    上述情况都不满足的时候执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>要判断某一个变量 <strong>等于</strong> 某一个值得时候使用</li></ul></li><li><p>例子 🌰： 根据变量给出的数字显示是星期几</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> week = <span class="number">1</span></span><br><span class="line"><span class="keyword">switch</span> (week) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;星期一&#x27;</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;星期二&#x27;</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;星期三&#x27;</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;星期四&#x27;</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;星期五&#x27;</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;星期六&#x27;</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;星期日&#x27;</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="attr">default</span>:</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;请输入一个 1 ～ 7 之间的数字&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="11-循环结构（重点）"><a href="#11-循环结构（重点）" class="headerlink" title="11. 循环结构（重点）"></a>11. 循环结构（重点）</h5><ul><li>循环结构，就是根据某些给出的条件，重复的执行同一段代码</li><li>循环必须要有某些固定的内容组成<ol><li>初始化</li><li>条件判断</li><li>要执行的代码</li><li>自身改变</li></ol></li></ul><h6 id="11-1-WHILE-循环"><a href="#11-1-WHILE-循环" class="headerlink" title="11-1 WHILE 循环"></a>11-1 WHILE 循环</h6><ul><li><p><code>while</code>，中文叫 当…时，其实就是当条件满足时就执行代码，一旦不满足了就不执行了</p></li><li><p>语法 <code>while (条件) &#123; 满足条件就执行 &#125;</code></p></li><li><p>因为满足条件就执行，所以我们写的时候一定要注意，就是设定一个边界值，不然就一直循环下去了</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 初始化条件</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0</span></span><br><span class="line"><span class="comment">// 2. 条件判断</span></span><br><span class="line"><span class="keyword">while</span> (num &lt; <span class="number">10</span>) &#123;</span><br><span class="line">  <span class="comment">// 3. 要执行的代码</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前的 num 的值是 &#x27;</span> + num)</span><br><span class="line">  <span class="comment">// 4. 自身改变</span></span><br><span class="line">  num = num + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果没有自身改变，那么就会一直循环不停了</li></ul></li></ul><h6 id="11-2-DO-WHILE-循环"><a href="#11-2-DO-WHILE-循环" class="headerlink" title="11-2 DO WHILE 循环"></a>11-2 DO WHILE 循环</h6><ul><li><p>是一个和 <code>while</code> 循环类似的循环</p></li><li><p><code>while</code> 会先进行条件判断，满足就执行，不满足直接就不执行了</p></li><li><p>但是 <code>do while</code> 循环是，先不管条件，先执行一回，然后在开始进行条件判断</p></li><li><p>语法： <code>do &#123; 要执行的代码 &#125; while (条件)</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 下面这个代码，条件一开始就不满足，但是依旧会执行一次 do 后面 &#123;&#125; 内部的代码</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我执行了一次&#x27;</span>)</span><br><span class="line">  num = num + <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">while</span> (num &lt; <span class="number">10</span>)</span><br></pre></td></tr></table></figure></li></ul><h6 id="11-3-FOR-循环"><a href="#11-3-FOR-循环" class="headerlink" title="11-3 FOR 循环"></a>11-3 FOR 循环</h6><ul><li><p>和 <code>while</code> 和 <code>do while</code> 循环都不太一样的一种循环结构</p></li><li><p>道理是和其他两种一样的，都是循环执行代码的</p></li><li><p>语法： <code>for (var i = 0; i &lt; 10; i++) &#123; 要执行的代码 &#125;</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 把初始化，条件判断，自身改变，写在了一起</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="comment">// 这里写的是要执行的代码</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制台会依次输出 1 ~ 10</span></span><br></pre></td></tr></table></figure></li><li><p>这个只是看起来不太舒服，但是用起来比较好用</p></li></ul><h6 id="11-4-BREAK-终止循环"><a href="#11-4-BREAK-终止循环" class="headerlink" title="11-4 BREAK 终止循环"></a>11-4 BREAK 终止循环</h6><ul><li><p>在循环没有进行完毕的时候，因为我设置的条件满足，提前终止循环</p></li><li><p>比如：我要吃五个包子，吃到三个的时候，不能在吃了，我就停止吃包子这个事情</p></li><li><p>要终止循环，就可以直接使用 <code>break</code> 关键字</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="comment">// 没循环一次，吃一个包子</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我吃了一个包子&#x27;</span>)</span><br><span class="line">  <span class="comment">// 当 i 的值为 3 的时候，条件为 true，执行 &#123;&#125; 里面的代码终止循环</span></span><br><span class="line">  <span class="comment">// 循环就不会继续向下执行了，也就没有 4 和 5 了</span></span><br><span class="line">  <span class="keyword">if</span> (i === <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h6 id="11-5-CONTINUE-结束本次循环"><a href="#11-5-CONTINUE-结束本次循环" class="headerlink" title="11-5 CONTINUE 结束本次循环"></a>11-5 CONTINUE 结束本次循环</h6><ul><li><p>在循环中，把循环的本次跳过去，继续执行后续的循环</p></li><li><p>比如：吃五个包子，到第三个的时候，第三个掉地下了，不吃了，跳过第三个，继续吃第四个和第五个</p></li><li><p>跳过本次循环，就可以使用 <code>continue</code> 关键字</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="comment">// 当 i 的值为 3 的时候，执行 &#123;&#125; 里面的代码</span></span><br><span class="line">  <span class="comment">// &#123;&#125; 里面有 continue，那么本次循环后面的代码就都不执行了</span></span><br><span class="line">  <span class="comment">// 自动算作 i 为 3 的这一次结束了，去继续执行 i = 4 的那次循环了</span></span><br><span class="line">  <span class="keyword">if</span> (i === <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这个是第三个包子，掉地下了，我不吃了&#x27;</span>)</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我吃了一个包子&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="../imgs/bj.assets/image-20220516112555912.png" alt="image-20220516112555912" style="zoom:67%;" /></p><h5 id="12-函数的概念"><a href="#12-函数的概念" class="headerlink" title="12 函数的概念"></a>12 函数的概念</h5><ul><li><p>对于 <code>js</code> 来说，函数就是把任意一段代码放在一个 <strong>盒子</strong> 里面</p></li><li><p>在我想要让这段代码执行的时候，直接执行这个 <strong>盒子</strong> 里面的代码就行</p></li><li><p>先看一段代码</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这个是我们以前写的一段代码</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数，这个 &#123;&#125; 就是那个 “盒子”</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 这个函数我们以前写的代码</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h6 id="12-1-函数定义阶段"><a href="#12-1-函数定义阶段" class="headerlink" title="12-1 函数定义阶段"></a>12-1 函数定义阶段</h6><ul><li><p>定义阶段就是我们把代码 <strong>放在盒子里面</strong></p></li><li><p>我们就要学习怎么 <strong>放进去</strong>，也就是书写一个函数</p></li><li>我们有两种定义方式 <strong>声明式</strong> 和 <strong>赋值式</strong></li></ul><p><strong>声明式</strong></p><ul><li><p>使用 <code>function</code> 这个关键字来声明一个函数</p></li><li><p>语法：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 一段代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// function: 声明函数的关键字，表示接下来是一个函数了</span></span><br><span class="line"><span class="comment">// fn: 函数的名字，我们自己定义的（遵循变量名的命名规则和命名规范）</span></span><br><span class="line"><span class="comment">// (): 必须写，是用来放参数的位置（一会我们再聊）</span></span><br><span class="line"><span class="comment">// &#123;&#125;: 就是我们用来放一段代码的位置（也就是我们刚才说的 “盒子”）</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>赋值式</strong></p><ul><li><p>其实就是和我们使用 <code>var</code> 关键字是一个道理了</p></li><li><p>首先使用 <code>var</code> 定义一个变量，把一个函数当作值直接赋值给这个变量就可以了</p></li><li><p>语法：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 一段代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不需要在 function 后面书写函数的名字了，因为在前面已经有了</span></span><br></pre></td></tr></table></figure></li></ul><h6 id="12-2-函数调用阶段"><a href="#12-2-函数调用阶段" class="headerlink" title="12-2 函数调用阶段"></a>12-2 函数调用阶段</h6><ul><li>就是让 <strong>盒子里面</strong> 的代码执行一下</li><li>让函数执行</li><li>两种定义函数的方式不同，但是调用函数的方式都以一样的</li></ul><p><strong>调用一个函数</strong></p><ul><li><p>函数调用就是直接写 <code>函数名()</code> 就可以了</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明式函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是 fn 函数&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值式函数</span></span><br><span class="line"><span class="keyword">var</span> fn2 = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是 fn2 函数&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><ul><li>注意： <strong>定义完一个函数以后，如果没有函数调用，那么写在 {} 里面的代码没有意义，只有调用以后才会执行</strong></li></ul></li></ul><h6 id="12-3-调用上的区别"><a href="#12-3-调用上的区别" class="headerlink" title="12-3 调用上的区别"></a>12-3 调用上的区别</h6><ul><li><p>虽然两种定义方式的调用都是一样的，但是还是有一些区别的</p></li><li><p>声明式函数： 调用可以在 <strong>定义之前或者定义之后</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可以调用</span></span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明式函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是 fn 函数&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以调用</span></span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure></li><li><p>赋值式函数： 调用只能在 <strong>定义之后</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 会报错</span></span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值式函数</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是 fn 函数&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以调用</span></span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure></li></ul><h6 id="12-4-函数的参数"><a href="#12-4-函数的参数" class="headerlink" title="12-4 函数的参数"></a>12-4 函数的参数</h6><ul><li><p>我们在定义函数和调用函数的时候都出现过 <code>()</code></p></li><li><p>现在我们就来说一下这个 <code>()</code> 的作用</p></li><li><p>就是用来放参数的位置</p></li><li><p>参数分为两种 <strong>形参</strong> 和 <strong>实参</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">形参写在这里</span>) &#123;</span><br><span class="line">  <span class="comment">// 一段代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>(实参写在这里)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值式函数</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">function</span> (<span class="params">形参写在这里</span>) &#123;</span><br><span class="line">  <span class="comment">// 一段代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(实参写在这里)</span><br></pre></td></tr></table></figure></li></ul><p><strong>形参和实参的作用</strong></p><ol><li><p>形参</p><ul><li><p>就是在函数内部可以使用的变量，在函数外部不能使用</p></li><li><p>每写一个单词，就相当于在函数内部定义了一个可以使用的变量（遵循变量名的命名规则和命名规范）</p></li><li><p>多个单词之间以 <code>,</code> 分隔</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 书写一个参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="comment">// 在函数内部就可以使用 num 这个变量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn1 = <span class="keyword">function</span> (<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="comment">// 在函数内部就可以使用 num 这个变量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 书写两个参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="comment">// 在函数内部就可以使用 num1 和 num2 这两个变量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fun1 = <span class="keyword">function</span> (<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="comment">// 在函数内部就可以使用 num1 和 num2 这两个变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果只有形参的话，那么在函数内部使用的值个变量是没有值的，也就是 <code>undefined</code></p></li><li><p><strong>形参的值是在函数调用的时候由实参决定的</strong></p></li></ul></li><li><p>实参</p><ul><li><p>在函数调用的时候给行参赋值的</p></li><li><p>也就是说，在调用的时候是给一个实际的内容的</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="comment">// 函数内部可以使用 num</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个函数的本次调用，书写的实参是 100</span></span><br><span class="line"><span class="comment">// 那么本次调用的时候函数内部的 num 就是 100</span></span><br><span class="line"><span class="title function_">fn</span>(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个函数的本次调用，书写的实参是 200</span></span><br><span class="line"><span class="comment">// 那么本次调用的时候函数内部的 num 就是 200</span></span><br><span class="line"><span class="title function_">fn</span>(<span class="number">200</span>)</span><br></pre></td></tr></table></figure></li><li><p><strong>函数内部的形参的值，由函数调用的时候传递的实参决定</strong></p></li><li><p><strong>多个参数的时候，是按照顺序一一对应的</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="comment">// 函数内部可以使用 num1 和 num2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数本次调用的时候，书写的参数是 100 和 200</span></span><br><span class="line"><span class="comment">// 那么本次调用的时候，函数内部的 num1 就是 100，num2 就是 200</span></span><br><span class="line"><span class="title function_">fn</span>(<span class="number">100</span>, <span class="number">200</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ol><p><strong>参数个数的关系</strong></p><ol><li><p>形参比实参少</p><ul><li><p>因为是按照顺序一一对应的</p></li><li><p>形参少就会拿不到实参给的值，所以在函数内部就没有办法用到这个值</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="comment">// 函数内部可以使用 num1 和 num2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 本次调用的时候，传递了两个实参，100 200 和 300</span></span><br><span class="line"><span class="comment">// 100 对应了 num1，200 对应了 num2，300 没有对应的变量</span></span><br><span class="line"><span class="comment">// 所以在函数内部就没有办法依靠变量来使用 300 这个值</span></span><br><span class="line"><span class="title function_">fn</span>(<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>形参比实参多</p><ul><li><p>因为是按照顺序一一对应的</p></li><li><p>所以多出来的行参就是没有值的，就是 <code>undefined</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">num1, num2, num3</span>) &#123;</span><br><span class="line">  <span class="comment">// 函数内部可以使用 num1 num2 和 num3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 本次调用的时候，传递了两个实参，100 和 200</span></span><br><span class="line"><span class="comment">// 就分别对应了 num1 和 num2</span></span><br><span class="line"><span class="comment">// 而 num3 没有实参和其对应，那么 num3 的值就是 undefined</span></span><br><span class="line"><span class="title function_">fn</span>(<span class="number">100</span>, <span class="number">200</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ol><h6 id="12-5-函数的-return"><a href="#12-5-函数的-return" class="headerlink" title="12-5 函数的 return"></a>12-5 函数的 return</h6><ul><li><code>return</code> 返回的意思，其实就是给函数一个 <strong>返回值</strong> 和 <strong>终断函数</strong></li></ul><p><strong>返回值</strong></p><ul><li><p>函数调用本身也是一个表达式，表达式就应该有一个值出现</p></li><li><p>现在的函数执行完毕之后，是不会有结果出现的</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 比如 1 + 2 是一个表达式，那么 这个表达式的结果就是 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> + <span class="number">2</span>) <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 执行代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fn() 也是一个表达式，这个表达式就没有结果出现</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>()) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></li><li><p><code>return</code> 关键字就是可以给函数执行完毕一个结果</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 执行代码</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时，fn() 这个表达式执行完毕之后就有结果出现了</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>()) <span class="comment">// 100</span></span><br></pre></td></tr></table></figure><ul><li>我们可以在函数内部使用 <code>return</code> 关键把任何内容当作这个函数运行后的结果</li></ul></li></ul><p><strong>终断函数</strong></p><ul><li><p>当我开始执行函数以后，函数内部的代码就会从上到下的依次执行</p></li><li><p>必须要等到函数内的代码执行完毕</p></li><li><p>而 <code>return</code> 关键字就是可以在函数中间的位置停掉，让后面的代码不在继续执行</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 写了 return 以后，后面的 4 和 5 就不会继续执行了</span></span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数调用</span></span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure></li></ul><h6 id="12-6-预解析（重点）"><a href="#12-6-预解析（重点）" class="headerlink" title="12-6 预解析（重点）"></a>12-6 预解析（重点）</h6><ul><li><strong>预解析</strong> 其实就是聊聊 <code>js</code> 代码的编译和执行</li><li><code>js</code> 是一个解释型语言，就是在代码执行之前，先对代码进行通读和解释，然后在执行代码</li><li>也就是说，我们的 <code>js</code> 代码在运行的时候，会经历两个环节 <strong>解释代码</strong> 和 <strong>执行代码</strong></li></ul><p><strong>解释代码</strong></p><ul><li><p>因为是在所有代码执行之前进行解释，所以叫做 <strong>预解析（预解释）</strong></p></li><li><p>需要解释的内容有两个</p><ul><li>声明式函数<ul><li>在内存中先声明有一个变量名是函数名，并且这个名字代表的内容是一个函数</li></ul></li><li><code>var</code> 关键字<ul><li>在内存中先声明有一个变量名</li></ul></li></ul></li><li><p>看下面一段代码</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fn</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是 fn 函数&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">100</span></span><br></pre></td></tr></table></figure></li><li><p>经过预解析之后可以变形为</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是 fn 函数&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> num</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line">num = <span class="number">100</span></span><br></pre></td></tr></table></figure></li><li><p>赋值式函数会按照 <code>var</code> 关键字的规则进行预解析</p></li></ul><h6 id="12-7-作用域"><a href="#12-7-作用域" class="headerlink" title="12-7 作用域"></a>12-7 作用域</h6><ul><li>什么是作用域，就是一个变量可以生效的范围</li><li>变量不是在所有地方都可以使用的，而这个变量的使用范围就是作用域</li></ul><p><strong>全局作用域</strong></p><ul><li><p>全局作用域是最大的作用域</p></li><li><p>在全局作用域中定义的变量可以在任何地方使用</p></li><li><p>页面打开的时候，浏览器会自动给我们生成一个全局作用域 <code>window</code></p></li><li><p>这个作用域会一直存在，直到页面关闭就销毁了</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 下面两个变量都是存在在全局作用域下面的，都是可以在任意地方使用的</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">100</span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">200</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>局部作用域</strong></p><ul><li><p>局部作用域就是在全局作用域下面有开辟出来的一个相对小一些的作用域</p></li><li><p>在局部作用域中定义的变量只能在这个局部作用域内部使用</p></li><li><p><strong>在 <code>JS</code> 中只有函数能生成一个局部作用域，别的都不行</strong></p></li><li><p>每一个函数，都是一个局部作用域</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这个 num 是一个全局作用域下的变量 在任何地方都可以使用</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 下面这个变量就是一个 fn 局部作用域内部的变量</span></span><br><span class="line">  <span class="comment">// 只能在 fn 函数内部使用</span></span><br><span class="line">  <span class="keyword">var</span> num2 = <span class="number">200</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure></li></ul><h6 id="12-8-变量使用规则"><a href="#12-8-变量使用规则" class="headerlink" title="12-8 变量使用规则"></a>12-8 变量使用规则</h6><ul><li>有了作用域以后，变量就有了使用范围，也就有了使用规则</li><li>变量使用规则分为两种，<strong>访问规则</strong> 和 <strong>赋值规则</strong></li></ul><p><strong>访问规则</strong></p><ul><li><p>当我想获取一个变量的值的时候，我们管这个行为叫做 <strong>访问</strong></p></li><li><p>获取变量的规则：</p><ul><li>首先，在自己的作用域内部查找，如果有，就直接拿来使用</li><li>如果没有，就去上一级作用域查找，如果有，就拿来使用</li><li>如果没有，就继续去上一级作用域查找，依次类推</li><li>如果一直到全局作用域都没有这个变量，那么就会直接报错（该变量 is not defined）</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> num2 = <span class="number">200</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> num3 = <span class="number">300</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num3) <span class="comment">// 自己作用域内有，拿过来用</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num2) <span class="comment">// 自己作用域内没有，就去上一级，就是 fn 的作用域里面找，发现有，拿过来用</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">// 自己这没有，去上一级 fn 那里也没有，再上一级到全局作用域，发现有，直接用</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// 自己没有，一级一级找上去到全局都没有，就会报错</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">fun</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure></li><li><p>变量的访问规则 也叫做 作用域的查找机制</p></li><li><p>作用域的查找机制只能是向上找，不能向下找</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">// 发现自己作用域没有，自己就是全局作用域，没有再上一级了，直接报错</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>赋值规则</strong></p><ul><li><p>当你想给一个变量赋值的时候，那么就先要找到这个变量，在给他赋值</p></li><li><p>变量赋值规则：</p><ul><li>先在自己作用域内部查找，有就直接赋值</li><li>没有就去上一级作用域内部查找，有就直接赋值</li><li>还没有再去上一级作用域查找，有就直接赋值</li><li>如果一直找到全局作用域都没有，那么就把这个变量定义为全局变量，再给他赋值</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  num = <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// fn 调用以后，要给 num 赋值</span></span><br><span class="line"><span class="comment">// 查看自己的作用域内部没有 num 变量</span></span><br><span class="line"><span class="comment">// 就会向上一级查找</span></span><br><span class="line"><span class="comment">// 上一级就是全局作用域，发现依旧没有</span></span><br><span class="line"><span class="comment">// 那么就会把 num 定义为全局的变量，并为其赋值</span></span><br><span class="line"><span class="comment">// 所以 fn() 以后，全局就有了一个变量叫做 num 并且值是 100</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">// 100</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="13-对象"><a href="#13-对象" class="headerlink" title="13. 对象"></a>13. 对象</h5><ul><li><p>对象是一个复杂数据类型</p></li><li><p>其实说是复杂，但是没有很复杂，只不过是存储了一些基本数据类型的一个集合</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">num</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="attr">str</span>: <span class="string">&#x27;hello world&#x27;</span>,</span><br><span class="line">  <span class="attr">boo</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这里的 <code>&#123;&#125;</code> 和函数中的 <code>&#123;&#125;</code> 不一样</p></li><li><p>函数里面的是写代码的，而对象里面是写一些数据的</p></li><li><p><strong>对象就是一个键值对的集合</strong></p></li><li><p><code>&#123;&#125;</code> 里面的每一个键都是一个成员</p></li><li><p>也就是说，我们可以把一些数据放在一个对象里面，那么他们就互不干扰了</p></li><li><p>其实就是我们准备一个房子，把我们想要的数据放进去，然后把房子的地址给到变量名，当我们需要某一个数据的时候，就可以根据变量名里面存储的地址找到对应的房子，然后去房子里面找到对应的数据</p></li></ul><h6 id="13-1-创建对象"><a href="#13-1-创建对象" class="headerlink" title="13-1 创建对象"></a>13-1 创建对象</h6><ul><li><p>字面量的方式创建一个对象</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个空对象</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 像对象中添加成员</span></span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&#x27;Jack&#x27;</span></span><br><span class="line">obj.<span class="property">age</span> = <span class="number">18</span></span><br></pre></td></tr></table></figure></li><li><p>内置构造函数的方式创建对象</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个空对象</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向对象中添加成员</span></span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&#x27;Rose&#x27;</span></span><br><span class="line">obj.<span class="property">age</span> = <span class="number">20</span></span><br></pre></td></tr></table></figure><ul><li><code>Object</code> 是 <code>js</code> 内置给我们的构造函数，用于创建一个对象使用的</li></ul></li></ul><h6 id="13-2-数据类型之间存储的区别"><a href="#13-2-数据类型之间存储的区别" class="headerlink" title="13-2 数据类型之间存储的区别"></a>13-2 数据类型之间存储的区别</h6><ul><li>既然我们区分了基本数据类型和复杂数据类型</li><li>那么他们之间就一定会存在一些区别</li><li>他们最大的区别就是在存储上的区别</li><li>我们的存储空间分成两种 <strong>栈</strong> 和 <strong>堆</strong></li><li>栈： 主要存储基本数据类型的内容</li><li>堆： 主要存储复杂数据类型的内容</li></ul><p><strong>基本数据类型在内存中的存储情况</strong></p><ul><li><code>var num = 100</code>，在内存中的存储情况</li><li>直接在 <strong>栈空间</strong> 内有存储一个数据</li></ul><p><strong>复杂数据类型在内存中的存储情况</strong></p><ul><li><p>下面这个 对象 的存储</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>复杂数据类型的存储</p><ol><li>在堆里面开辟一个存储空间</li><li>把数据存储到存储空间内</li><li>把存储空间的地址赋值给栈里面的变量</li></ol></li><li><p>这就是数据类型之间存储的区别</p></li></ul><p><strong>数据类型之间的比较</strong></p><ul><li><p>基本数据类型是 <strong>值</strong> 之间的比较</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num == str) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p>复杂数据类型是 <strong>地址</strong> 之间的比较</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123; <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj == obj2) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ul><li>因为我们创建了两个对象，那么就会在 堆空间 里面开辟两个存储空间存储数据（两个地址）</li><li>虽然存储的内容是一样的，那么也是两个存储空间，两个地址</li><li>复杂数据类型之间就是地址的比较，所以 <code>obj</code> 和 <code>obj2</code> 两个变量的地址不一样</li><li>所以我们得到的就是 <code>false</code></li></ul></li></ul><h5 id="14-数组"><a href="#14-数组" class="headerlink" title="14. 数组"></a>14. 数组</h5><ul><li><p>什么是数组？</p></li><li><p>字面理解就是 <strong>数字的组合</strong></p></li><li><p>其实不太准确，准确的来说数组是一个 <strong>数据的集合</strong></p></li><li><p>也就是我们把一些数据放在一个盒子里面，按照顺序排好</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;hello&#x27;</span>, <span class="literal">true</span>, <span class="literal">false</span>]</span><br></pre></td></tr></table></figure></li><li><p>这个东西就是一个数组，存储着一些数据的集合</p></li></ul><p><strong>数据类型分类</strong></p><ul><li><code>number</code> / <code>string</code> / <code>boolean</code> / <code>undefined</code> / <code>null</code> / <code>object</code> / <code>function</code> / <code>array</code> / …</li><li>数组也是数据类型中的一种</li><li><p>我们简单的把所有数据类型分为两个大类 <strong>基本数据类型</strong> 和 <strong>复杂数据类型</strong></p></li><li><p>基本数据类型： <code>number</code> / <code>string</code> / <code>boolean</code> / <code>undefined</code> / <code>null</code></p></li><li>复杂数据类型： <code>object</code> / <code>function</code> / <code>array</code> / …</li></ul><h6 id="14-1-创建一个数组"><a href="#14-1-创建一个数组" class="headerlink" title="14-1 创建一个数组"></a>14-1 创建一个数组</h6><ul><li>数组就是一个 <code>[]</code></li><li>在 <code>[]</code> 里面存储着各种各样的数据，按照顺序依次排好</li></ul><p><strong>字面量创建一个数组</strong></p><ul><li><p>直接使用 <code>[]</code> 的方式创建一个数组</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个空数组</span></span><br><span class="line"><span class="keyword">var</span> arr1 = []</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个有内容的数组</span></span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure></li></ul><p><strong>内置构造函数创建数组</strong></p><ul><li><p>使用 <code>js</code> 的内置构造函数 <code>Array</code> 创建一个数组</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个空数组</span></span><br><span class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="title class_">Array</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个长度为 10 的数组</span></span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个有内容的数组</span></span><br><span class="line"><span class="keyword">var</span> arr3 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure></li></ul><h6 id="14-2-数组的-length"><a href="#14-2-数组的-length" class="headerlink" title="14-2 数组的 length"></a>14-2 数组的 length</h6><ul><li><p><code>length</code>: 长度的意思</p></li><li><p><code>length</code> 就是表示数组的长度，数组里面有多少个成员，<code>length</code> 就是多少</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">length</span>) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></li></ul><h6 id="14-3-数组的索引"><a href="#14-3-数组的索引" class="headerlink" title="14-3 数组的索引"></a>14-3 数组的索引</h6><ul><li><p>索引，也叫做下标，是指一个数据在数组里面排在第几个的位置</p></li><li><p>注意： <strong>在所有的语言里面，索引都是从 0 开始的</strong></p></li><li><p>在 <code>js</code> 里面也一样，数组的索引从 0 开始</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>]</span><br></pre></td></tr></table></figure></li><li><p>上面这个数组中，<strong>第 0 个</strong> 数据就是字符串 <code>hello</code>，<strong>第 1 个</strong> 数据就是字符串 <code>world</code></p></li><li><p>想获取数组中的第几个就使用 <code>数组[索引]</code> 来获取</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">0</span>]) <span class="comment">// hello</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">1</span>]) <span class="comment">// world</span></span><br></pre></td></tr></table></figure></li></ul><h6 id="14-4-数组的排序"><a href="#14-4-数组的排序" class="headerlink" title="14-4 数组的排序"></a>14-4 数组的排序</h6><ul><li>排序，就是把一个乱序的数组，通过我们的处理，让他变成一个有序的数组</li></ul><p><strong>冒泡排序</strong></p><p><img src="%E7%AC%94%E8%AE%B0.assets/%E5%86%92%E6%B3%A1.gif" alt=""></p><ul><li><p>先遍历数组，让挨着的两个进行比较，如果前一个比后一个大，那么就把两个换个位置</p></li><li><p>数组遍历一遍以后，那么最后一个数字就是最大的那个了</p></li><li><p>然后进行第二遍的遍历，还是按照之前的规则，第二大的数字就会跑到倒数第二的位置</p></li><li><p>以此类推，最后就会按照顺序把数组排好了</p><ol><li><p>我们先来准备一个乱序的数组</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">8</span>]</span><br></pre></td></tr></table></figure><ul><li>接下来我们就会用代码让数组排序</li></ul></li><li><p>先不着急循环，先来看数组里面内容换个位置</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 假定我现在要让数组中的第 0 项和第 1 项换个位置</span></span><br><span class="line"><span class="comment">// 需要借助第三个变量</span></span><br><span class="line"><span class="keyword">var</span> tmp = arr[<span class="number">0</span>]</span><br><span class="line">arr[<span class="number">0</span>] = arr[<span class="number">1</span>]</span><br><span class="line">arr[<span class="number">1</span>] = tmp</span><br></pre></td></tr></table></figure></li><li><p>第一次遍历数组，把最大的放到最后面去</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="comment">// 判断，如果数组中的当前一个比后一个大，那么两个交换一下位置</span></span><br><span class="line">  <span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">    <span class="keyword">var</span> tmp = arr[i]</span><br><span class="line">    arr[i] = arr[i + <span class="number">1</span>]</span><br><span class="line">    arr[i + <span class="number">1</span>] = tmp</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历完毕以后，数组就会变成 [3, 1, 5, 6, 4, 7, 2, 8, 9]</span></span><br></pre></td></tr></table></figure><ul><li>第一次结束以后，数组中的最后一个，就会是最大的那个数字</li><li>然后我们把上面的这段代码执行多次。数组有多少项就执行多少次</li></ul></li><li><p>按照数组的长度来遍历多少次</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.<span class="property">length</span>; j++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 判断，如果数组中的当前一个比后一个大，那么两个交换一下位置</span></span><br><span class="line">    <span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">      <span class="keyword">var</span> tmp = arr[i]</span><br><span class="line">      arr[i] = arr[i + <span class="number">1</span>]</span><br><span class="line">      arr[i + <span class="number">1</span>] = tmp</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结束以后，数组就排序好了</span></span><br></pre></td></tr></table></figure></li><li><p>给一些优化</p><ul><li><p>想象一个问题，假设数组长度是 9，第八次排完以后</p></li><li><p>后面八个数字已经按照顺序排列好了，剩下的那个最小的一定是在最前面</p></li><li><p>那么第九次就已经没有意义了，因为最小的已经在最前面了，不会再有任何换位置出现了</p></li><li><p>那么我们第九次遍历就不需要了，所以我们可以减少一次</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.<span class="property">length</span> - <span class="number">1</span>; j++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 判断，如果数组中的当前一个比后一个大，那么两个交换一下位置</span></span><br><span class="line">    <span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">      <span class="keyword">var</span> tmp = arr[i]</span><br><span class="line">      arr[i] = arr[i + <span class="number">1</span>]</span><br><span class="line">      arr[i + <span class="number">1</span>] = tmp</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>第二个问题，第一次的时候，已经把最大的数字放在最后面了</p></li><li><p>那么第二次的时候，其实倒数第二个和最后一个就不用比了</p></li><li><p>因为我们就是要把倒数第二大的放在倒数第二的位置，即使比较了，也不会换位置</p></li><li><p>第三次就要倒数第三个数字就不用再和后两个比较了</p></li><li><p>以此类推，那么其实每次遍历的时候，就遍历 <code>当前次数 - 1</code> 次</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.<span class="property">length</span> - <span class="number">1</span>; j++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span> - <span class="number">1</span> - j; i++) &#123;</span><br><span class="line">    <span class="comment">// 判断，如果数组中的当前一个比后一个大，那么两个交换一下位置</span></span><br><span class="line">    <span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">      <span class="keyword">var</span> tmp = arr[i]</span><br><span class="line">      arr[i] = arr[i + <span class="number">1</span>]</span><br><span class="line">      arr[i + <span class="number">1</span>] = tmp</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>至此，一个冒泡排序就完成了</p></li></ol></li></ul><p><strong>选择排序</strong></p><p><img src="%E7%AC%94%E8%AE%B0.assets/%E9%80%89%E6%8B%A9.gif" alt=""></p><ul><li><p>先假定数组中的第 0 个就是最小的数字的索引</p></li><li><p>然后遍历数组，只要有一个数字比我小，那么就替换之前记录的索引</p></li><li><p>知道数组遍历结束后，就能找到最小的那个索引，然后让最小的索引换到第 0 个的位置</p></li><li><p>再来第二趟遍历，假定第 1 个是最小的数字的索引</p></li><li><p>在遍历一次数组，找到比我小的那个数字的索引</p></li><li><p>遍历结束后换个位置</p></li><li><p>依次类推，也可以把数组排序好</p><ol><li><p>准备一个数组</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">8</span>]</span><br></pre></td></tr></table></figure></li><li><p>假定数组中的第 0 个是最小数字的索引</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> minIndex = <span class="number">0</span></span><br></pre></td></tr></table></figure></li><li><p>遍历数组，判断，只要数字比我小，那么就替换掉原先记录的索引</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> minIndex = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr[i] &lt; arr[minIndex]) &#123;</span><br><span class="line">    minIndex = i</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历结束后找到最小的索引</span></span><br><span class="line"><span class="comment">// 让第 minIndex 个和第 0 个交换</span></span><br><span class="line"><span class="keyword">var</span> tmp = arr[minIndex]</span><br><span class="line">arr[minIndex] = arr[<span class="number">0</span>]</span><br><span class="line">arr[<span class="number">0</span>] = tmp</span><br></pre></td></tr></table></figure></li><li><p>按照数组的长度重复执行上面的代码</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.<span class="property">length</span>; j++) &#123;</span><br><span class="line">  <span class="comment">// 因为第一遍的时候假定第 0 个，第二遍的时候假定第 1 个</span></span><br><span class="line">  <span class="comment">// 所以我们要假定第 j 个就行</span></span><br><span class="line">  <span class="keyword">var</span> minIndex = j</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 因为之前已经把最小的放在最前面了，后面的循环就不需要判断前面的了</span></span><br><span class="line">  <span class="comment">// 直接从 j + 1 开始</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = j + <span class="number">1</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &lt; arr[minIndex]) &#123;</span><br><span class="line">      minIndex = i</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 遍历结束后找到最小的索引</span></span><br><span class="line">  <span class="comment">// 第一堂的时候是和第 0 个交换，第二趟的时候是和第 1 个交换</span></span><br><span class="line">  <span class="comment">// 我们直接和第 j 个交换就行</span></span><br><span class="line">  <span class="keyword">var</span> tmp = arr[minIndex]</span><br><span class="line">  arr[minIndex] = arr[j]</span><br><span class="line">  arr[j] = tmp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>一些优化</p><ul><li><p>和之前一样，倒数第二次排序完毕以后，就已经排好了，最后一次没有必要了</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.<span class="property">length</span> - <span class="number">1</span>; j++) &#123;</span><br><span class="line">  <span class="keyword">var</span> minIndex = j</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = j + <span class="number">1</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &lt; arr[minIndex]) &#123;</span><br><span class="line">      minIndex = i</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> tmp = arr[minIndex]</span><br><span class="line">  arr[minIndex] = arr[j]</span><br><span class="line">  arr[j] = tmp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在交换变量之前，可以判断一下，如果我们遍历后得到的索引和当前的索引一直</p></li><li><p>那么就证明当前这个就是目前最小的，那么就没有必要交换</p></li><li><p>做一我们要判断，最小作引和当前作引不一样的时候，才交换</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.<span class="property">length</span> - <span class="number">1</span>; j++) &#123;</span><br><span class="line">  <span class="keyword">var</span> minIndex = j</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = j + <span class="number">1</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &lt; arr[minIndex]) &#123;</span><br><span class="line">      minIndex = i</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (minIndex !== j) &#123;</span><br><span class="line">    <span class="keyword">var</span> tmp = arr[minIndex]</span><br><span class="line">    arr[minIndex] = arr[j]</span><br><span class="line">    arr[j] = tmp</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>至此，选择排序完成</p></li></ol></li></ul><h6 id="14-5-数组的常用方法"><a href="#14-5-数组的常用方法" class="headerlink" title="14-5 数组的常用方法"></a>14-5 数组的常用方法</h6><ul><li><p>数组是一个复杂数据类型，我们在操作它的时候就不能再想基本数据类型一样操作了</p></li><li><p>比如我们想改变一个数组</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们想把数组变成只有 1 和 2</span></span><br><span class="line">arr = [<span class="number">1</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure><ul><li>这样肯定是不合理，因为这样不是在改变之前的数组</li><li>相当于心弄了一个数组给到 <code>arr</code> 这个变量了</li><li>相当于把 <code>arr</code> 里面存储的地址给换了，也就是把存储空间换掉了，而不是在之前的空间里面修改</li><li>所以我们就需要借助一些方法，在不改变存储空间的情况下，把存储空间里面的数据改变了</li></ul></li></ul><p><strong>数组常用方法之 push</strong></p><ul><li><p><code>push</code> 是用来在数组的末尾追加一个元素</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 push 方法追加一个元素在末尾</span></span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>数组常用方法之 pop</strong></p><ul><li><p><code>pop</code> 是用来删除数组末尾的一个元素</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 pop 方法删除末尾的一个元素</span></span><br><span class="line">arr.<span class="title function_">pop</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">// [1, 2]</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>数组常用方法之 unshift</strong></p><ul><li><p><code>unshift</code> 是在数组的最前面添加一个元素</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 unshift 方法想数组的最前面添加一个元素</span></span><br><span class="line">arr.<span class="title function_">unshift</span>(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">// [4, 1, 2, 3]</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>数组常用方法之 shift</strong></p><ul><li><p><code>shift</code> 是删除数组最前面的一个元素</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 shift 方法删除数组最前面的一个元素</span></span><br><span class="line">arr.<span class="title function_">shift</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">// [2, 3]</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>数组常用方法之 splice</strong></p><ul><li><p><code>splice</code> 是截取数组中的某些内容，按照数组的索引来截取</p></li><li><p>语法： <code>splice(从哪一个索引位置开始，截取多少个，替换的新元素)</code> （第三个参数可以不写）</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 splice 方法截取数组</span></span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">// [1, 4, 5]</span></span><br></pre></td></tr></table></figure><ul><li><code>arr.splice(1, 2)</code> 表示从索引 1 开始截取 2 个内容</li><li>第三个参数没有写，就是没有新内容替换掉截取位置</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 splice 方法截取数组</span></span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;我是新内容&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">// [1, &#x27;我是新内容&#x27;, 4, 5]</span></span><br></pre></td></tr></table></figure><ul><li><code>arr.splice(1, 2, &#39;我是新内容&#39;)</code> 表示从索引 1 开始截取 2 个内容</li><li>然后用第三个参数把截取完空出来的位置填充</li></ul></li></ul><p><strong>数组常用方法之 reverse</strong></p><ul><li><p><code>reverse</code> 是用来反转数组使用的</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 reverse 方法来反转数组</span></span><br><span class="line">arr.<span class="title function_">reverse</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">// [3, 2, 1]</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>数组常用方法之 sort</strong></p><ul><li><p><code>sort</code> 是用来给数组排序的</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 sort 方法给数组排序</span></span><br><span class="line">arr.<span class="title function_">sort</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><ul><li>这个只是一个基本的简单用法</li></ul></li></ul><p><strong>数组常用方法之 concat</strong></p><ul><li><p><code>concat</code> 是把多个数组进行拼接</p></li><li><p>和之前的方法有一些不一样的地方，就是 <code>concat</code> 不会改变原始数组，而是返回一个新的数组</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 concat 方法拼接数组</span></span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">concat</span>([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr) <span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><ul><li>注意： <strong><code>concat</code> 方法不会改变原始数组</strong></li></ul></li></ul><p><strong>数组常用方法之 join</strong></p><ul><li><p><code>join</code> 是把数组里面的每一项内容链接起来，变成一个字符串</p></li><li><p>可以自己定义每一项之间链接的内容 <code>join(要以什么内容链接)</code></p></li><li><p>不会改变原始数组，而是把链接好的字符串返回</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 join 链接数组</span></span><br><span class="line"><span class="keyword">var</span> str = arr.<span class="title function_">join</span>(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str) <span class="comment">// 1-2-3</span></span><br></pre></td></tr></table></figure><ul><li>注意： <strong>join 方法不会改变原始数组，而是返回链接好的字符串</strong></li></ul></li></ul><p><strong>数组常用方法之 indexOf</strong></p><ul><li><p><code>indexOf</code> 用来找到数组中某一项的索引</p></li><li><p>语法： <code>indexOf(你要找的数组中的项)</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 indexOf 超找数组中的某一项</span></span><br><span class="line"><span class="keyword">var</span> index = arr.<span class="title function_">indexOf</span>(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><ul><li>我们要找的是数组中值为 3 的那一项</li><li>返回的就是值为 3 的那一项在该数组中的索引</li></ul></li><li><p>如果你要找的内容在数组中没有，那么就会返回 -1</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 indexOf 超找数组中的某一项</span></span><br><span class="line"><span class="keyword">var</span> index = arr.<span class="title function_">indexOf</span>(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index) <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><ul><li>你要找的值在数组中不存在，那么就会返回 -1</li></ul></li></ul><p><strong>数组常用方法之 forEach</strong></p><ul><li><p>和 <code>for</code> 循环一个作用，就是用来遍历数组的</p></li><li><p>语法：<code>arr.forEach(function (item, index, arr) &#123;&#125;)</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 forEach 遍历数组</span></span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">item, index, arr</span>) &#123;</span><br><span class="line">  <span class="comment">// item 就是数组中的每一项</span></span><br><span class="line">  <span class="comment">// index 就是数组的索引</span></span><br><span class="line">  <span class="comment">// arr 就是原始数组</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数组的第 &#x27;</span> + index + <span class="string">&#x27; 项的值是 &#x27;</span> + item + <span class="string">&#x27;，原始数组是&#x27;</span>, arr)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><code>forEach()</code> 的时候传递的那个函数，会根据数组的长度执行</li><li>数组的长度是多少，这个函数就会执行多少回</li></ul></li></ul><p><strong>数组常用方法之 map</strong></p><ul><li><p>和 <code>forEach</code> 类似，只不过可以对数组中的每一项进行操作，返回一个新的数组</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 map 遍历数组</span></span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">item, index, arr</span>) &#123;</span><br><span class="line">  <span class="comment">// item 就是数组中的每一项</span></span><br><span class="line">  <span class="comment">// index 就是数组的索引</span></span><br><span class="line">  <span class="comment">// arr 就是原始数组</span></span><br><span class="line">  <span class="keyword">return</span> item + <span class="number">10</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr) <span class="comment">// [11, 12, 13]</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>数组常用方法之 filter</strong></p><ul><li><p>和 <code>map</code> 的使用方式类似，按照我们的条件来筛选数组</p></li><li><p>把原始数组中满足条件的筛选出来，组成一个新的数组返回</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 filter 过滤数组</span></span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">item, index, arr</span>) &#123;</span><br><span class="line">  <span class="comment">// item 就是数组中的每一项</span></span><br><span class="line">  <span class="comment">// index 就是数组的索引</span></span><br><span class="line">  <span class="comment">// arr 就是原始数组</span></span><br><span class="line">  <span class="keyword">return</span> item &gt; <span class="number">1</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr) <span class="comment">// [2, 3]</span></span><br></pre></td></tr></table></figure><ul><li>我们设置的条件就是 <code>&gt; 1</code></li><li>返回的新数组就会是原始数组中所有 <code>&gt; 1</code> 的项</li></ul></li></ul><h5 id="15-字符串"><a href="#15-字符串" class="headerlink" title="15 字符串"></a>15 字符串</h5><h6 id="15-1-创建字符串"><a href="#15-1-创建字符串" class="headerlink" title="15-1 创建字符串"></a>15-1 创建字符串</h6><ul><li><p>我们创建字符串也分为两种方法 <strong>字面量</strong> 和 <strong>构造函数</strong></p></li><li><p>字面量：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;hello&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>构造函数创建</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><h6 id="15-2-字符集"><a href="#15-2-字符集" class="headerlink" title="15-2 字符集"></a>15-2 字符集</h6><p><strong>ASCII 字符集</strong></p><ul><li>我们都知道，计算机只能存储 <code>0101010</code> 这样的二进制数字</li><li>那么我们的 <code>a ~ z</code> / <code>A ~ Z</code> / <code>$</code> / <code>@</code> /… 之类的内容也有由二进制数字组成的</li><li>我们可以简单的理解为， <code>a ~ z</code> / <code>A ~ Z</code> / <code>$</code> / <code>@</code> /… 之类的内容都有一个自己的编号，然后在计算机存储的时候，是存储的这些编号，我们看的时候，也是通过这些编号在解析成我们要看到的内容给我们看到</li><li><img src="../imgs/bj.assets/ASCII%E6%8E%A7%E5%88%B6%E5%AD%97%E7%AC%A6.png" alt=""></li><li><img src="../imgs/bj.assets/ASCII%E6%98%BE%E7%A4%BA%E5%AD%97%E7%AC%A6.png" alt=""></li><li>上面的就是 ASCII 对照表，我们只需要知道他是这么存储的就好</li></ul><p><strong>unicode 编码</strong></p><ul><li>我们看到了，<code>ASCII</code> 只有这 <code>128</code> 个字符的编码结构</li><li>但是因为 <code>ASCII</code> 出现的比较早，而且是美国发明的，早先时候这些内容就够用了</li><li>因为存储一些英文的内容，传递一些英文的文章什么的都够用了</li><li>那么对于这个世界来说肯定是不够用的</li><li>因为我们的汉字没有办法存储，包括一些其他国家的语言也没有办法存储</li><li>所以就出现了 <code>unicode</code> 编码，也叫（万国码，统一码）</li><li><code>unicode</code> 对照表就是一个和 <code>ASCII</code> 一样的对照表，只不过变得很大很大，因为存储的内容特别的多</li><li>而且包含了世界上大部分国家的文字，所以我们的文字和字符现在在存储的时候，都是按照 <code>unicode</code> 编码转换成数字进行存储</li><li>我们的 <code>UTF-8</code> 就是一种 <code>8 位的 unicode</code> 字符集</li></ul><h6 id="15-3-字符串的常用方法"><a href="#15-3-字符串的常用方法" class="headerlink" title="15-3 字符串的常用方法"></a>15-3 字符串的常用方法</h6><ul><li>我们操作字符串，也有一堆的方法来帮助我们操作</li><li>字符串和数组有一个一样的地方，也是按照索引来排列的</li></ul><p><strong>charAt</strong></p><ul><li><p><code>charAt(索引)</code> 是找到字符串中指定索引位置的内容返回</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;Jack&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 charAt 找到字符串中的某一个内容</span></span><br><span class="line"><span class="keyword">var</span> index = str.<span class="title function_">charAt</span>(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index) <span class="comment">// c</span></span><br></pre></td></tr></table></figure><ul><li>因为字符串也是按照索引进行排列的，也是同样从 0 开始</li><li>所以索引 2 的位置就是 <code>c</code></li></ul></li><li><p>如果没有对应的索引，那么就会返回 空字符串</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;Jack&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 charAt 找到字符串中的某一个内容</span></span><br><span class="line"><span class="keyword">var</span> index = str.<span class="title function_">charAt</span>(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index) <span class="comment">// &#x27;&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>这个字符串根本没有索引 10 的位置</li><li>所以就会返回一个空字符串 <code>&#39;&#39;</code></li></ul></li></ul><p><strong>charCodeAt</strong></p><ul><li><p><code>charCodeAt(索引)</code> 就是返回对应索引位置的 <code>unicode</code> 编码</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;Jack&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 charAt 找到字符串中的某一个内容</span></span><br><span class="line"><span class="keyword">var</span> index = str.<span class="title function_">charCodeAt</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index) <span class="comment">// 74</span></span><br></pre></td></tr></table></figure><ul><li>因为 <code>J</code> 在 <code>unicode</code> 对照表里面存储的是 74，所以就会返回 74</li></ul></li></ul><p><strong>indexOf</strong></p><ul><li><p><code>indexOf</code> 就是按照字符找到对应的索引</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;Jack&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 indexOf 找到对应的索引</span></span><br><span class="line"><span class="keyword">var</span> index = str.<span class="title function_">indexOf</span>(<span class="string">&#x27;J&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><ul><li>因为字符 <code>J</code> 在字符串 <code>Jack</code> 中的索引位置是 0</li><li>所以会返回 0</li></ul></li></ul><p><strong>substring</strong></p><ul><li><p><code>substring</code> 是用来截取字符串使用的</p></li><li><p>语法： <code>substring(从哪个索引开始，到哪个索引截止)</code>，包含开始索引，不包含结束索引</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="comment">//         01234</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 substring 截取字符串</span></span><br><span class="line"><span class="keyword">var</span> newStr = str.<span class="title function_">substring</span>(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newStr) <span class="comment">// el</span></span><br></pre></td></tr></table></figure><ul><li>从索引 1 开始，到索引 3 截止，包含前面的索引不包含后面的索引</li><li>所以返回的是 el</li></ul></li></ul><p><strong>substr</strong></p><ul><li><p><code>substr</code> 也是用来截取字符串的</p></li><li><p>语法：<code>substr(从哪个索引开始，截取多少个)</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="comment">//         01234</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 substr 截取字符串</span></span><br><span class="line"><span class="keyword">var</span> newStr = str.<span class="title function_">substr</span>(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newStr) <span class="comment">// ell</span></span><br></pre></td></tr></table></figure><ul><li>这个方法和 <code>substring</code> 不一样的是，第二个参数是截取多少个</li><li>从索引 1 开始，截取 3 个，所以得到的是 <code>ell</code></li></ul></li></ul><p><strong>toLowerCase 和 toUpperCase</strong></p><ul><li><p>这两个方法分别使用用来给字符串转成 <strong>小写字母</strong> 和 <strong>大写字母</strong> 的</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = hello</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 toUpperCase 转换成大写</span></span><br><span class="line"><span class="keyword">var</span> upper = str.<span class="title function_">toUpperCase</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(upper) <span class="comment">// HELLO</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 toLowerCase 转换成小写</span></span><br><span class="line"><span class="keyword">var</span> lower = upper.<span class="title function_">toLowerCase</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lower) <span class="comment">// hello</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="16-Math"><a href="#16-Math" class="headerlink" title="16 Math"></a>16 Math</h5><ul><li>Math 是 js 的一个内置对象，提供了一堆的方法帮助我们操作 <strong>数字</strong></li></ul><h6 id="16-1-random"><a href="#16-1-random" class="headerlink" title="16-1 random"></a>16-1 random</h6><ul><li><p><code>Math.random()</code> 这个方法是用来生成一个 <code>0 ~ 1</code> 之间的随机数</p></li><li><p>每次执行生成的数字都不一样，但是一定是 <code>0 ~ 1</code> 之间的</p></li><li><p><strong>生成的数字包含 0 ，但是不包含 1</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="title class_">Math</span>.<span class="title function_">random</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">// 得到一个随机数</span></span><br></pre></td></tr></table></figure></li></ul><h6 id="16-2-round"><a href="#16-2-round" class="headerlink" title="16-2 round"></a>16-2 round</h6><ul><li><p><code>Math.round()</code> 是将一个小数 <strong>四舍五入</strong> 变成一个整数</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10.1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(num)) <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">10.6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(num2)) <span class="comment">// 11</span></span><br></pre></td></tr></table></figure></li></ul><h6 id="16-3-abs"><a href="#16-3-abs" class="headerlink" title="16-3 abs"></a>16-3 abs</h6><ul><li><p><code>Math.abs()</code> 是返回一个数字的 <strong>绝对值</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = -<span class="number">10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(math.<span class="title function_">abs</span>(num)) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure></li></ul><h6 id="16-4-ceil"><a href="#16-4-ceil" class="headerlink" title="16-4 ceil"></a>16-4 ceil</h6><ul><li><p><code>Math.ceil()</code> 是将一个小数 <strong>向上取整</strong> 得到的整数</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10.1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">ceil</span>(num)) <span class="comment">// 11</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">10.9</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">ceil</span>(num2)) <span class="comment">// 11</span></span><br></pre></td></tr></table></figure></li></ul><h6 id="16-5-floor"><a href="#16-5-floor" class="headerlink" title="16-5 floor"></a>16-5 floor</h6><ul><li><p><code>Math.floor()</code> 是将一个小数 <strong>向下取整</strong> 的到的整数</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10.1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(num)) <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">10.9</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(num2)) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure></li></ul><h6 id="16-6-max"><a href="#16-6-max" class="headerlink" title="16-6 max"></a>16-6 max</h6><ul><li><p><code>Math.max()</code> 得到的是你传入的几个数字之中 <strong>最大</strong> 的那个数字</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)) <span class="comment">// 5</span></span><br></pre></td></tr></table></figure></li></ul><h6 id="16-7-min"><a href="#16-7-min" class="headerlink" title="16-7 min"></a>16-7 min</h6><ul><li><p><code>Math.min()</code> 得到的是你传入的几个数字之中 <strong>最小</strong> 的那个数字</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li></ul><h6 id="16-8-PI"><a href="#16-8-PI" class="headerlink" title="16-8 PI"></a>16-8 PI</h6><ul><li><p><code>Math.PI</code> 得到的是 <code>π</code> 的值，也就是 <code>3.1415936...</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">PI</span>) <span class="comment">// 3.141592653589793</span></span><br></pre></td></tr></table></figure><ul><li>因为计算机的计算精度问题，只能得到小数点后 15 位</li><li><strong>使用 Math.PI 的时候，是不需要加 () 的</strong></li></ul></li></ul><h5 id="17-Date"><a href="#17-Date" class="headerlink" title="17 Date"></a>17 Date</h5><ul><li><code>js</code> 提供的内置构造函数，专门用来获取时间的</li></ul><h6 id="17-1-new-Date"><a href="#17-1-new-Date" class="headerlink" title="17-1 new Date()"></a>17-1 new Date()</h6><ul><li><p><code>new Date()</code> 在不传递参数的情况下是默认返回当前时间</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(time) <span class="comment">// 当前时间 Fri Mar 01 2019 13:11:23 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure></li><li><p><code>new Date()</code> 在传入参数的时候，可以获取到一个你传递进去的时间</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2019-03-03 13:11:11&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(time) <span class="comment">// Sun Mar 03 2019 13:11:11 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure></li><li><p><code>new Date()</code> 传递的参数有多种情况</p><ol><li><p>传递两个数字，第一个表示年，第二个表示月份</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2019</span>, <span class="number">00</span>) <span class="comment">// 月份从 0 开始计数，0 表示 1月，11 表示 12月</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(time) <span class="comment">// Tue Jan 01 2019 00:00:00 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure></li><li><p>传递三个数字，前两个不变，第三个表示该月份的第几天，从 1 到 31</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2019</span>, <span class="number">00</span>, <span class="number">05</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(time) <span class="comment">// Sat Jan 05 2019 00:00:00 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure></li><li><p>传递四个数字，前三个不变，第四个表示当天的几点，从 0 到 23</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2019</span>, <span class="number">00</span>, <span class="number">05</span>, <span class="number">22</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(time) <span class="comment">// Sat Jan 05 2019 22:00:00 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure></li><li><p>传递五个数字，前四个不变，第五个表示的是该小时的多少分钟，从 0 到 59</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2019</span>, <span class="number">00</span>, <span class="number">05</span>, <span class="number">22</span>, <span class="number">33</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(time) <span class="comment">// Sat Jan 05 2019 22:33:00 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure></li><li><p>传递六个数字，前五个不变，第六个表示该分钟的多少秒，从 0 到 59</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2019</span>, <span class="number">00</span>, <span class="number">05</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">55</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(time) <span class="comment">// Sat Jan 05 2019 22:33:55 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure></li><li><p>传入字符串的形式</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2019&#x27;</span>))</span><br><span class="line"><span class="comment">// Tue Jan 01 2019 08:00:00 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2019-02&#x27;</span>))</span><br><span class="line"><span class="comment">// Fri Feb 01 2019 08:00:00 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2019-02-03&#x27;</span>))</span><br><span class="line"><span class="comment">// Sun Feb 03 2019 08:00:00 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2019-02-03 13:&#x27;</span>))</span><br><span class="line"><span class="comment">// Sun Feb 03 2019 13:00:00 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2019-02-03 13:13:&#x27;</span>))</span><br><span class="line"><span class="comment">// Sun Feb 03 2019 13:13:00 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2019-02-03 13:13:13&#x27;</span>))</span><br><span class="line"><span class="comment">// Sun Feb 03 2019 13:13:13 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><h6 id="17-2-将日期字符串格式化成指定内容"><a href="#17-2-将日期字符串格式化成指定内容" class="headerlink" title="17-2 将日期字符串格式化成指定内容"></a>17-2 将日期字符串格式化成指定内容</h6><ul><li>比如我们得到的时间字符串是 <code>Sun Feb 03 2019 13:13:13 GMT+0800 (中国标准时间)</code></li><li>我指向得到这个日期中是那一年，我们就要靠截取字符串的形式得到</li><li>但是现在 <code>js</code> 为我们提供了一系列的方法来得到里面的指定内容</li></ul><p><strong>getFullYear</strong></p><ul><li><p><code>getFullYear()</code> 方式是得到指定字符串中的哪一年</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2019</span>, <span class="number">03</span>, <span class="number">03</span>, <span class="number">08</span>, <span class="number">00</span>, <span class="number">22</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(time.<span class="title function_">getFullYear</span>()) <span class="comment">// 2019</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>getMonth</strong></p><ul><li><p><code>getMonth()</code> 方法是得到指定字符串中的哪一个月份</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2019</span>, <span class="number">03</span>, <span class="number">03</span>, <span class="number">08</span>, <span class="number">00</span>, <span class="number">22</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(time.<span class="title function_">getMonth</span>()) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><ul><li>这里要有一个注意的地方</li><li>月份是从 0 开始数的</li><li>0 表示 1 月，1 表示 2 月，依此类推</li></ul></li></ul><p><strong>getDate</strong></p><ul><li><p><code>getDate()</code> 方法是得到指定字符串中的哪一天</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2019</span>, <span class="number">03</span>, <span class="number">03</span>, <span class="number">08</span>, <span class="number">00</span>, <span class="number">22</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(time.<span class="title function_">getDate</span>()) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>getHours</strong></p><ul><li><p><code>getHours()</code> 方法是得到指定字符串中的哪小时</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2019</span>, <span class="number">03</span>, <span class="number">03</span>, <span class="number">08</span>, <span class="number">00</span>, <span class="number">22</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(time.<span class="title function_">getHours</span>()) <span class="comment">// 8</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>getMinutes</strong></p><ul><li><p><code>getMinutes()</code> 方法是得到指定字符串中的哪分钟</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2019</span>, <span class="number">03</span>, <span class="number">03</span>, <span class="number">08</span>, <span class="number">00</span>, <span class="number">22</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(time.<span class="title function_">getMinutes</span>()) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>getSeconds</strong></p><ul><li><p><code>getSeconds()</code> 方法是得到指定字符串中的哪秒钟</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2019</span>, <span class="number">03</span>, <span class="number">03</span>, <span class="number">08</span>, <span class="number">00</span>, <span class="number">22</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(time.<span class="title function_">getSeconds</span>()) <span class="comment">// 22</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>getDay</strong></p><ul><li><p><code>getDay()</code> 方法是得到指定字符串当前日期是一周中的第几天（周日是 0，周六是 6）</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2019</span>, <span class="number">03</span>, <span class="number">08</span>, <span class="number">08</span>, <span class="number">00</span>, <span class="number">22</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(time.<span class="title function_">getDay</span>()) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>getTime</strong></p><ul><li><p><code>getTime()</code> 方法是得到执行时间到 <code>格林威治时间</code> 的毫秒数</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2019</span>, <span class="number">03</span>, <span class="number">08</span>, <span class="number">08</span>, <span class="number">00</span>, <span class="number">22</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(time.<span class="title function_">getTime</span>()) <span class="comment">// 1554681622000</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>获取时间差</strong></p><ul><li>是指获取两个时间点之间相差的时间</li><li>在 js 中是不能用时间直接做 减法 的</li><li>我们需要一些特殊的操作</li><li>在编程的世界里面，有一个特殊的时间，是 <code>1970年01月01日00时00分00秒</code></li><li>这个时间我们叫做 <code>格林威治时间</code></li><li>所有的编程世界里面，这个时间都是一样的，而且 <code>格林威治时间</code> 的数字是 0</li><li>从 <code>格林威治时间</code> 开始，每经过 1 毫秒，数字就会 + 1</li><li>所以我们可以获取到任意一个时间节点到 <code>格林威治时间</code> 的毫秒数</li><li>然后在用两个毫秒数相减，就能得到两个时间点之间相差的毫秒数</li><li>我们在通过这个毫秒数得到准确的时间</li></ul><h5 id="18-定时器"><a href="#18-定时器" class="headerlink" title="18 定时器"></a>18 定时器</h5><ul><li>在 <code>js</code> 里面，有两种定时器，<strong>倒计时定时器</strong> 和 <strong>间隔定时器</strong></li></ul><h6 id="18-1-倒计时定时器"><a href="#18-1-倒计时定时器" class="headerlink" title="18-1 倒计时定时器"></a>18-1 倒计时定时器</h6><ul><li><p>倒计时多少时间以后执行函数</p></li><li><p>语法： <code>setTimeout(要执行的函数，多长时间以后执行)</code></p></li><li><p>会在你设定的时间以后，执行函数</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> timerId = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我执行了&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(timerId) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><ul><li>时间是按照毫秒进行计算的，1000 毫秒就是 1 秒钟</li><li>所以会在页面打开 1 秒钟以后执行函数</li><li>只执行一次，就不在执行了</li><li>返回值是，当前这个定时器是页面中的第几个定时器</li></ul></li></ul><h6 id="18-2-间隔定时器"><a href="#18-2-间隔定时器" class="headerlink" title="18-2 间隔定时器"></a>18-2 间隔定时器</h6><ul><li><p>每间隔多少时间就执行一次函数</p></li><li><p>语法： <code>setInterval(要执行的函数，间隔多少时间)</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> timerId = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我执行了&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><ul><li>时间和刚才一样，是按照毫秒进行计算的</li><li>每间隔 1 秒钟执行一次函数</li><li>只要不关闭，会一直执行</li><li>返回值是，当前这个定时器是页面中的第几个定时器</li></ul></li></ul><h6 id="18-3-定时器的返回值"><a href="#18-3-定时器的返回值" class="headerlink" title="18-3 定时器的返回值"></a>18-3 定时器的返回值</h6><ul><li><p>设置定时器的时候，他的返回值是部分 <code>setTimeout</code> 和 <code>setInterval</code> 的</p></li><li><p>只要有一个定时器，那么就是一个数字</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> timerId = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;倒计时定时器&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> timerId2 = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;间隔定时器&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(timerId) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(timerId2) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></li></ul><h6 id="18-4-关闭定时器"><a href="#18-4-关闭定时器" class="headerlink" title="18-4 关闭定时器"></a>18-4 关闭定时器</h6><ul><li><p>我们刚才提到过一个 <code>timerId</code>，是表示这个定时器是页面上的第几个定时器</p></li><li><p>这个 <code>timerId</code> 就是用来关闭定时器的数字</p></li><li><p>我们有两个方法来关闭定时器 <code>clearTimeout</code> 和 <code>clearInterval</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> timerId = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;倒计时定时器&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line"><span class="built_in">clearTimeout</span>(timerId)</span><br></pre></td></tr></table></figure><ul><li>关闭以后，定时器就不会在执行了</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> timerId2 = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;间隔定时器&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line"><span class="title function_">coearInterval</span>(timerId2)</span><br></pre></td></tr></table></figure><ul><li>关闭以后定时器就不会在执行了</li></ul></li><li><p>原则上是</p><ul><li><code>clearTimeout</code> 关闭 <code>setTimeout</code></li><li><code>clearInterval</code> 关闭 <code>setInterval</code></li></ul></li><li><p>但是其实是可以通用的，他们可以混着使用</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> timerId = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;倒计时定时器&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line"><span class="comment">// 关闭倒计时定时器</span></span><br><span class="line"><span class="built_in">clearInterval</span>(timerId)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> timerId2 = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;间隔定时器&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line"><span class="comment">// 关闭间隔定时器</span></span><br><span class="line"><span class="built_in">clearTimeout</span>(timerId2)</span><br></pre></td></tr></table></figure></li></ul><h4 id="二-BOM"><a href="#二-BOM" class="headerlink" title="二 BOM"></a>二 BOM</h4><ul><li><code>BOM（Browser Object Model）</code>： 浏览器对象模型</li><li>其实就是操作浏览器的一些能力</li><li>我们可以操作哪些内容<ul><li>获取一些浏览器的相关信息（窗口的大小）</li><li>操作浏览器进行页面跳转</li><li>获取当前浏览器地址栏的信息</li><li>操作浏览器的滚动条</li><li>浏览器的信息（浏览器的版本）</li><li>让浏览器出现一个弹出框（<code>alert</code> / <code>confirm</code> / <code>prompt</code>）</li><li>…</li></ul></li><li><code>BOM</code> 的核心就是 <code>window</code> 对象</li><li><code>window</code> 是浏览器内置的一个对象，里面包含着操作浏览器的方法</li></ul><h5 id="1-获取浏览器窗口的尺寸"><a href="#1-获取浏览器窗口的尺寸" class="headerlink" title="1. 获取浏览器窗口的尺寸"></a>1. 获取浏览器窗口的尺寸</h5><ul><li><p><code>innerHeight</code> 和 <code>innerWidth</code></p></li><li><p>这两个方法分别是用来获取浏览器窗口的宽度和高度（包含滚动条的）</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> windowHeight = <span class="variable language_">window</span>.<span class="property">innerHeight</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(windowHeight)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> windowWidth = <span class="variable language_">window</span>.<span class="property">innerWidth</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(windowWidth)</span><br></pre></td></tr></table></figure></li></ul><h5 id="2-浏览器的弹出层"><a href="#2-浏览器的弹出层" class="headerlink" title="2. 浏览器的弹出层"></a>2. 浏览器的弹出层</h5><ul><li><p><code>alert</code> 是在浏览器弹出一个提示框</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">alert</span>(<span class="string">&#x27;我是一个提示框&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="%E7%AC%94%E8%AE%B0.assets/alert.png" alt=""></p><ul><li>这个弹出层知识一个提示内容，只有一个确定按钮</li><li>点击确定按钮以后，这个提示框就消失了</li></ul></li><li><p><code>confirm</code> 是在浏览器弹出一个询问框</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> boo = <span class="variable language_">window</span>.<span class="title function_">confirm</span>(<span class="string">&#x27;我是一个询问框&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(boo)</span><br></pre></td></tr></table></figure><p><img src="%E7%AC%94%E8%AE%B0.assets/confirm.png" alt=""></p><ul><li>这个弹出层有一个询问信息和两个按钮</li><li>当你点击确定的时候，就会得到 <code>true</code></li><li>当你点击取消的时候，就会得到 <code>false</code></li></ul></li><li><p><code>prompt</code> 是在浏览器弹出一个输入框</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="variable language_">window</span>.<span class="title function_">prompt</span>(<span class="string">&#x27;请输入内容&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span><br></pre></td></tr></table></figure><p><img src="../imgs/bj.assets/prompt.png" alt=""></p><ul><li>这个弹出层有一个输入框和两个按钮</li><li>当你点击取消的时候，得到的是 <code>null</code></li><li>当你点击确定的时候得到的就是你输入的内容</li></ul></li></ul><h5 id="3-浏览器的地址信息"><a href="#3-浏览器的地址信息" class="headerlink" title="3. 浏览器的地址信息"></a>3. 浏览器的地址信息</h5><ul><li>在 <code>window</code> 中有一个对象叫做 <code>location</code></li><li>就是专门用来存储浏览器的地址栏内的信息的</li></ul><h6 id="location-href"><a href="#location-href" class="headerlink" title="location.href"></a>location.href</h6><ul><li><p><code>location.href</code> 这个属性存储的是浏览器地址栏内 <code>url</code> 地址的信息</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>)</span><br></pre></td></tr></table></figure><ul><li>会把中文变成 <code>url</code> 编码的格式</li></ul></li><li><p><code>location.href</code> 这个属性也可以给他赋值</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&#x27;./index.html&#x27;</span></span><br><span class="line"><span class="comment">// 这个就会跳转页面到后面你给的那个地址</span></span><br></pre></td></tr></table></figure></li></ul><h6 id="location-reload"><a href="#location-reload" class="headerlink" title="location.reload"></a>location.reload</h6><ul><li><p><code>location.reload()</code> 这个方法会重新加载一遍页面，就相当于刷新是一个道理</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="title function_">reload</span>()</span><br></pre></td></tr></table></figure><ul><li>注意： <strong>不要写在全局，不然浏览器就会一直处在刷新状态</strong></li></ul></li></ul><h5 id="4-浏览器的历史记录"><a href="#4-浏览器的历史记录" class="headerlink" title="4. 浏览器的历史记录"></a>4. 浏览器的历史记录</h5><ul><li><code>window</code> 中有一个对象叫做 <code>history</code></li><li>是专门用来存储历史记录信息的</li></ul><h6 id="history-back"><a href="#history-back" class="headerlink" title="history.back"></a>history.back</h6><ul><li><p><code>history.back</code> 是用来会退历史记录的，就是回到前一个页面，就相当于浏览器上的 ⬅️ 按钮</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">history</span>.<span class="title function_">back</span>()</span><br></pre></td></tr></table></figure><ul><li>前提是你要有上一条记录，不然就是一直在这个页面，也不会回退</li></ul></li></ul><h6 id="history-forword"><a href="#history-forword" class="headerlink" title="history.forword"></a>history.forword</h6><ul><li><p><code>history.forword</code> 是去到下一个历史记录里面，也就是去到下一个页面，就相当于浏览器上的 ➡️ 按钮</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">history</span>.<span class="title function_">forward</span>()</span><br></pre></td></tr></table></figure><ul><li>前提是你要之前有过回退操作，不然的话你现在就是最后一个页面，没有下一个</li></ul></li></ul><h5 id="5-浏览器的-onload-事件"><a href="#5-浏览器的-onload-事件" class="headerlink" title="5. 浏览器的 onload 事件"></a>5. 浏览器的 onload 事件</h5><ul><li><p>这个不在是对象了，而是一个事件</p></li><li><p>是在页面所有资源加载完毕后执行的</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;页面已经加载完毕&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h6 id="5-1-在-html-页面中把-js-写在-head-里面"><a href="#5-1-在-html-页面中把-js-写在-head-里面" class="headerlink" title="5-1 在 html 页面中把 js 写在 head 里面"></a>5-1 在 html 页面中把 js 写在 head 里面</h6><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 这个代码执行的时候，body 还没有加载</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 这个时候我们就获取不到 body 中的那个 div</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 就需要使用 window.onload 事件</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 这个函数会在页面加载完毕以后在执行</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 那么这个时候页面的 DOM 元素都已经加载了，我们就可以获取 div 了</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="5-2-在-html-页面中把-js-写在-body-最后面"><a href="#5-2-在-html-页面中把-js-写在-body-最后面" class="headerlink" title="5-2 在 html 页面中把 js 写在 body 最后面"></a>5-2 在 html 页面中把 js 写在 body 最后面</h6><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 这个代码执行的时候，body 已经加载完毕了</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 在这里就可以获取到 div，写不写 window.onload 就无所谓了</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 这个函数会在页面加载完毕以后在执行</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 那么这个时候页面的 DOM 元素都已经加载了，我们就可以获取 div 了</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="6-浏览器的-onscroll-事件"><a href="#6-浏览器的-onscroll-事件" class="headerlink" title="6. 浏览器的 onscroll 事件"></a>6. 浏览器的 onscroll 事件</h5><ul><li><p>这个 <code>onscroll</code> 事件是当浏览器的滚动条滚动的时候触发</p></li><li><p>或者鼠标滚轮滚动的时候出发</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onscroll</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;浏览器滚动了&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注意：<strong>前提是页面的高度要超过浏览器的可是窗口才可以</strong></li></ul></li></ul><h5 id="7-浏览器滚动的距离"><a href="#7-浏览器滚动的距离" class="headerlink" title="7. 浏览器滚动的距离"></a>7. 浏览器滚动的距离</h5><ul><li>浏览器内的内容即然可以滚动，那么我们就可以获取到浏览器滚动的距离</li><li>思考一个问题？<ul><li>浏览器真的滚动了吗？</li><li>其实我们的浏览器是没有滚动的，是一直在那里</li><li>滚动的是什么？是我们的页面</li><li>所以说，<strong>其实浏览器没有动，只不过是页面向上走了</strong></li></ul></li><li>所以，这个已经不能单纯的算是浏览器的内容了，而是我们页面的内容</li><li>所以不是在用 <code>window</code> 对象了，而是使用 <code>document</code> 对象</li></ul><h6 id="scrollTop"><a href="#scrollTop" class="headerlink" title="scrollTop"></a>scrollTop</h6><ul><li><p>获取的是页面向上滚动的距离</p></li><li><p>一共有两个获取方式</p><ul><li><code>document.body.scrollTop</code></li><li><code>document.documentElement.scrollTop</code></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onscroll</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>两个都是获取页面向上滚动的距离</li><li>区别：<ul><li>IE 浏览器<ul><li>没有 <code>DOCTYPE</code> 声明的时候，用这两个都行</li><li>有 <code>DOCTYPE</code> 声明的时候，只能用 <code>document.documentElement.scrollTop</code></li></ul></li><li>Chrome 和 FireFox<ul><li>没有 <code>DOCTYPE</code> 声明的时候，用 <code>document.body.scrollTop</code></li><li>有 <code>DOCTYPE</code> 声明的时候，用 <code>document.documentElement.scrollTop</code></li></ul></li><li>Safari<ul><li>两个都不用，使用一个单独的方法 <code>window.pageYOffset</code></li></ul></li></ul></li></ul></li></ul><h6 id="scrollLeft"><a href="#scrollLeft" class="headerlink" title="scrollLeft"></a>scrollLeft</h6><ul><li><p>获取页面向左滚动的距离</p></li><li><p>也是两个方法</p><ul><li><p><code>document.body.scrollLeft</code></p></li><li><p><code>document.documentElementLeft</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onscroll</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollLeft</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollLeft</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>两个之间的区别和之前的 <code>scrollTop</code> 一样</p></li></ul></li></ul><h5 id="8-本地存储"><a href="#8-本地存储" class="headerlink" title="8. 本地存储"></a>8. 本地存储</h5><h6 id="8-1-localStorage"><a href="#8-1-localStorage" class="headerlink" title="8-1 localStorage"></a>8-1 localStorage</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//增</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;kerwin&#x27;</span>)</span><br><span class="line"><span class="comment">//取</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"><span class="comment">//删</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"><span class="comment">//清空</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">clear</span>()</span><br></pre></td></tr></table></figure><h6 id="8-2-sessionStorage"><a href="#8-2-sessionStorage" class="headerlink" title="8-2 sessionStorage"></a>8-2 sessionStorage</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//增</span></span><br><span class="line">sessionStorage.<span class="title function_">setItem</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;kerwin&#x27;</span>)</span><br><span class="line"><span class="comment">//取</span></span><br><span class="line">sessionStorage.<span class="title function_">getItem</span>(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"><span class="comment">//删</span></span><br><span class="line">sessionStorage.<span class="title function_">removeItem</span>(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"><span class="comment">//清空</span></span><br><span class="line">sessionStorage.<span class="title function_">clear</span>()</span><br></pre></td></tr></table></figure><h4 id="三-DOM"><a href="#三-DOM" class="headerlink" title="三. DOM"></a>三. DOM</h4><ul><li><code>DOM（Document Object Model）</code>： 文档对象模型</li><li>其实就是操作 <code>html</code> 中的标签的一些能力</li><li>我们可以操作哪些内容<ul><li>获取一个元素</li><li>移除一个元素</li><li>创建一个元素</li><li>向页面里面添加一个元素</li><li>给元素绑定一些事件</li><li>获取元素的属性</li><li>给元素添加一些 <code>css</code> 样式</li><li>…</li></ul></li><li><code>DOM</code> 的核心对象就是 <code>docuemnt</code> 对象</li><li><code>document</code> 对象是浏览器内置的一个对象，里面存储着专门用来操作元素的各种方法</li><li><code>DOM</code>： 页面中的标签，我们通过 <code>js</code> 获取到以后，就把这个对象叫做 <strong>DOM 对象</strong></li></ul><h5 id="1-获取一个元素"><a href="#1-获取一个元素" class="headerlink" title="1. 获取一个元素"></a>1. 获取一个元素</h5><ul><li>通过 <code>js</code> 代码来获取页面中的标签</li><li>获取到以后我们就可以操作这些标签了</li></ul><h6 id="1-1-getElementById"><a href="#1-1-getElementById" class="headerlink" title="1-1 getElementById"></a>1-1 getElementById</h6><ul><li><p><code>getElementById</code> 是通过标签的 <code>id</code> 名称来获取标签的</p></li><li><p>因为在一个页面中 <code>id</code> 是唯一的，所以获取到的就是一个元素</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;box&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(box) <span class="comment">// &lt;div&gt;&lt;/div&gt;</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>获取到的就是页面中的那个 <strong>id 为 box 的 div 标签</strong></li></ul></li></ul><h6 id="1-2-getElementsByClassName"><a href="#1-2-getElementsByClassName" class="headerlink" title="1-2 getElementsByClassName"></a>1-2 getElementsByClassName</h6><ul><li><p><code>getElementsByClassName</code> 是用过标签的 <code>class</code> 名称来获取标签的</p></li><li><p>因为页面中可能有多个元素的 <code>class</code> 名称一样，所以获取到的是一组元素</p></li><li><p>哪怕你获取的 <code>class</code> 只有一个，那也是获取一组元素，<strong>只不过这一组中只有一个 DOM 元素而已</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">calss</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;box&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(box) <span class="comment">// [&lt;div&gt;&lt;/div&gt;]</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(box[<span class="number">0</span>]) <span class="comment">// &lt;div&gt;&lt;/div&gt;</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>获取到的是一组元素，是一个长得和数组一样的数据结构，但是不是数组，是 <strong>伪数组</strong></li><li>这个一组数据也是按照索引排列的，所以我们想要准确的拿到这个 <code>div</code>，需要用索引来获取</li></ul></li></ul><h6 id="1-3-getElementsByTagName"><a href="#1-3-getElementsByTagName" class="headerlink" title="1-3 getElementsByTagName"></a>1-3 getElementsByTagName</h6><ul><li><p><code>getElementsByTagName</code> 是用过标签的 标签 名称来获取标签的</p></li><li><p>因为页面中可能有多个元素的 标签 名称一样，所以获取到的是一组元素</p></li><li><p>哪怕真的只有一个这个标签名，那么也是获取一组元素，只不过这一组中只有一个 DOM 元素而已</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(box) <span class="comment">// [&lt;div&gt;&lt;/div&gt;]</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(box[<span class="number">0</span>]) <span class="comment">// &lt;div&gt;&lt;/div&gt;</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>和 <code>getElementsByClassName</code> 一样，获取到的是一个长得很像数组的元素</li><li>必须要用索引才能得到准确的 <code>DOM</code> 元素</li></ul></li></ul><h6 id="1-4-querySelector"><a href="#1-4-querySelector" class="headerlink" title="1-4 querySelector"></a>1-4 querySelector</h6><ul><li><p><code>querySelector</code> 是按照选择器的方式来获取元素</p></li><li><p>也就是说，按照我们写 <code>css</code> 的时候的选择器来获取</p></li><li><p>这个方法只能获取到一个元素，并且是页面中第一个满足条件的元素</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)) <span class="comment">// 获取页面中的第一个 div 元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(docuemnt.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>)) <span class="comment">// 获取页面中第一个有 box 类名的元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#box&#x27;</span>)) <span class="comment">// 获取页面中第一个 id 名为 box 的元素</span></span><br></pre></td></tr></table></figure></li></ul><h6 id="1-5-querySelectorAll"><a href="#1-5-querySelectorAll" class="headerlink" title="1-5 querySelectorAll"></a>1-5 querySelectorAll</h6><ul><li><p><code>querySelectorAll</code> 是按照选择器的方式来获取元素</p></li><li><p>这个方法能获取到所有满足条件的元素，以一个伪数组的形式返回</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;div&#x27;</span>)) <span class="comment">// 获取页面中的所有的 div 元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(docuemnt.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.box&#x27;</span>)) <span class="comment">// 获取页面中所有有 box 类名的元素</span></span><br></pre></td></tr></table></figure><ul><li>获取到的是一组数据，也是需要用索引来获取到准确的每一个 <code>DOM</code> 元素</li></ul></li></ul><h5 id="2-操作属性"><a href="#2-操作属性" class="headerlink" title="2. 操作属性"></a>2. 操作属性</h5><ul><li>通过我们各种获取元素的方式获取到页面中的标签以后</li><li>我们可以直接操作 <code>DOM</code> 元素的属性，就能直接把效果展示在页面上</li></ul><h6 id="2-1-innerHTML"><a href="#2-1-innerHTML" class="headerlink" title="2-1 innerHTML"></a>2-1 innerHTML</h6><ul><li><p>获取元素内部的 <code>HTML</code> 结构</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">innerHTML</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">          &lt;p&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            &lt;span&gt;hello&lt;/span&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">          &lt;/p&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">  */</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>设置元素的内容</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    div.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;p&gt;hello&lt;/p&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>设置完以后，页面中的 <code>div</code> 元素里面就会嵌套一个 <code>p</code> 元素</li></ul></li></ul><h6 id="2-2-innerText"><a href="#2-2-innerText" class="headerlink" title="2-2 innerText"></a>2-2 innerText</h6><ul><li><p>获取元素内部的文本（只能获取到文本内容，获取不到 <code>html</code> 标签）</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">innerText</span>) <span class="comment">// hello</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>可以设置元素内部的文本</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    div.<span class="property">innerText</span> = <span class="string">&#x27;&lt;p&gt;hello&lt;/p&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>设置完毕以后，会把 <code>&lt;p&gt;hello&lt;/p&gt;</code> 当作一个文本出现在 <code>div</code> 元素里面，而不会把 <code>p</code> 解析成标签</li></ul></li></ul><h6 id="2-3-getAttribute"><a href="#2-3-getAttribute" class="headerlink" title="2-3 getAttribute"></a>2-3 getAttribute</h6><ul><li><p>获取元素的某个属性（包括自定义属性）</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">a</span>=<span class="string">&quot;100&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="title function_">getAttribute</span>(<span class="string">&#x27;a&#x27;</span>)) <span class="comment">// 100</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="title function_">getAttribute</span>(<span class="string">&#x27;class&#x27;</span>)) <span class="comment">// box</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h6 id="2-4-setAttribute"><a href="#2-4-setAttribute" class="headerlink" title="2-4 setAttribute"></a>2-4 setAttribute</h6><ul><li><p>给元素设置一个属性（包括自定义属性）</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    div.<span class="title function_">setAttribute</span>(<span class="string">&#x27;a&#x27;</span>, <span class="number">100</span>)</span></span><br><span class="line"><span class="language-javascript">    div.<span class="title function_">setAttribute</span>(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;box&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(div) <span class="comment">// &lt;div a=&quot;100&quot; class=&quot;box&quot;&gt;&lt;/div&gt;</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h6 id="2-5-removeAttribute"><a href="#2-5-removeAttribute" class="headerlink" title="2-5 removeAttribute"></a>2-5 removeAttribute</h6><ul><li><p>直接移除元素的某个属性</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">a</span>=<span class="string">&quot;100&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    div.<span class="title function_">removeAttribute</span>(<span class="string">&#x27;class&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(div) <span class="comment">// &lt;div a=&quot;100&quot;&gt;&lt;/div&gt;</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h6 id="2-6-style"><a href="#2-6-style" class="headerlink" title="2-6 style"></a>2-6 style</h6><ul><li><p>专门用来给元素添加 <code>css</code> 样式的</p></li><li><p>添加的都是行内样式</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    div.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&#x27;100px&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    div.<span class="property">style</span>.<span class="property">height</span> = <span class="string">&#x27;100px&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    div.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;pink&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(div)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &lt;div style=&quot;width: 100px; height: 100px; background-color: pink;&quot;&gt;&lt;/div&gt;</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>页面中的 <code>div</code> 就会变成一个宽高都是 <code>100</code>，背景颜色是粉色</li></ul></li></ul><h6 id="2-7-获取元素的非行间样式"><a href="#2-7-获取元素的非行间样式" class="headerlink" title="2-7 获取元素的非行间样式"></a>2-7 获取元素的非行间样式</h6><ul><li><p>我们在操作 <code>DOM</code> 的时候，很重要的一点就是要操作元素的 <code>css</code> 样式</p></li><li><p>那么在操作 <code>css</code> 样式的时候，我们避免不了就要获取元素的样式</p></li><li><p>之前我们说过可以用 <code>元素.style.xxx</code> 来获取</p></li><li><p>但是这个方法只能获取到元素 <strong>行间样式</strong>，也就是写在行内的样式</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;height: 100px;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个 p 标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> oDiv = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(oDiv.<span class="property">style</span>.<span class="property">height</span>) <span class="comment">// 100px</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(oDIv.<span class="property">style</span>.<span class="property">width</span>) <span class="comment">// &#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>不管是外链式还是内嵌式，我们都获取不到该元素的样式</p></li><li><p>这里我们就要使用方法来获取了 <strong><code>getComputedStyle</code></strong> 和 <strong><code>currentStyle</code></strong></p></li><li><p>这两个方法的作用是一样的，只不过一个在 <strong>非 IE</strong> 浏览器，一个在 <strong>IE</strong> 浏览器</p></li></ul><p><strong>getComputedStyle（非 IE 使用）</strong></p><ul><li><p>语法：<code>window.getComputedStyle(元素, null).要获取的属性</code></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;height: 100px;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个 p 标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> oDiv = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>(oDiv).<span class="property">width</span>) <span class="comment">// 100px</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>(oDiv).<span class="property">height</span>) <span class="comment">// 100px</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>这个方法获取行间样式和非行间样式都可以</li></ul></li></ul><p><strong>currentStyle（IE 使用）</strong></p><ul><li><p>语法： <code>元素.currentStyle.要获取的属性</code></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;height: 100px;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个 p 标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> oDiv = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(oDiv.<span class="property">currentStyle</span>.<span class="property">width</span>) <span class="comment">// 100px</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(oDiv.<span class="property">currentStyle</span>.<span class="property">height</span>) <span class="comment">// 100px</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h6 id="2-8-className"><a href="#2-8-className" class="headerlink" title="2-8 className"></a>2-8 className</h6><ul><li><p>专门用来操作元素的 <strong>类名的</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">className</span>) <span class="comment">// box</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>也可以设置元素的类名，不过是全覆盖式的操作</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    div.<span class="property">className</span> = <span class="string">&#x27;test&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(div) <span class="comment">// &lt;div class=&quot;test&quot;&gt;&lt;/div&gt;</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在设置的时候，不管之前有没有类名，都会全部被设置的值覆盖</li></ul></li></ul><h5 id="3-DOM-节点"><a href="#3-DOM-节点" class="headerlink" title="3. DOM 节点"></a>3. DOM 节点</h5><ul><li><code>DOM</code> 的节点我们一般分为常用的三大类 <strong>元素节点</strong> / <strong>文本节点</strong> / <strong>属性节点</strong></li><li>什么是分类，比如我们在获取元素的时候，通过各种方法获取到的我们叫做元素节点（标签节点）</li><li>比如我们标签里面写的文字，那么就是文本节点</li><li>写在每一个标签上的属性，就是属性节点</li></ul><h6 id="3-1-元素节点"><a href="#3-1-元素节点" class="headerlink" title="3-1 元素节点"></a>3-1 元素节点</h6><ul><li>我们通过 <code>getElementBy...</code> 获取到的都是元素节点</li></ul><h6 id="3-2-属性节点"><a href="#3-2-属性节点" class="headerlink" title="3-2 属性节点"></a>3-2 属性节点</h6><ul><li>我们通过 <code>getAttribute</code> 获取的就是元素的属性节点</li></ul><h6 id="3-3-文本节点"><a href="#3-3-文本节点" class="headerlink" title="3-3 文本节点"></a>3-3 文本节点</h6><ul><li>我们通过 <code>innerText</code> 获取到的就是元素的文本节点</li></ul><p><img src="../imgs/bj.assets/image-20220529093256532.png" alt="image-20220529093256532"></p><p><img src="../imgs/bj.assets/image-20220529093305827.png" alt="image-20220529093305827"></p><p><img src="../imgs/bj.assets/image-20220529093325381.png" alt="image-20220529093325381"></p><p><img src="../imgs/bj.assets/image-20220529093334602.png" alt="image-20220529093334602"></p><p><img src="../imgs/bj.assets/image-20220529093346903.png" alt="image-20220529093346903"></p><p><img src="../imgs/bj.assets/image-20220529093416413.png" alt="image-20220529093416413"></p><h6 id="3-4-获取节点"><a href="#3-4-获取节点" class="headerlink" title="3-4 获取节点"></a>3-4 获取节点</h6><ul><li><p><code>childNodes</code>：获取某一个节点下 <strong>所有的子一级节点</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这个 oDiv 获取的是页面中的 div 元素，就是一个元素节点</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> oDiv = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(oDiv.<span class="property">childNodes</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    NodeList(3) [text, p, text]</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      0: text</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      1: p</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      2: text</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      length: 3</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      __proto__: NodeList</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    */</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>我们会发现，拿到以后是一个伪数组，里面有三个节点</li><li>一个 <code>text</code>：从 <code>&lt;div&gt; 一直到 &lt;p&gt;</code> 中间有一个换行和一堆空格，这个是第一个节点，是一个文本节点</li><li>一个 <code>p</code>：这个 <code>p</code> 标签就是第二个节点，这个是一个元素节点</li><li>一个 <code>text</code>：从 <code>&lt;/p&gt; 一直到 &lt;/div&gt;</code> 中间有一个换行和一堆空格，这个是第三个节点，是一个文本节点</li><li>这个时候就能看到我们有不同的节点类型了</li></ul></li><li><p><code>children</code> ：获取某一节点下所有的子一级 <strong>元素节点</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这个 oDiv 获取的是页面中的 div 元素，就是一个元素节点</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> oDiv = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(oDiv.<span class="property">children</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    HTMLCollection [p]</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      0: p</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      length: 1</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      __proto__: HTMLCollection</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    */</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>我们发现只有一个节点了，因为 <code>children</code> 只要元素节点</li><li>div 下面又只有一个元素节点，就是 <code>p</code></li><li>所以就只有一个，虽然只有一个，但是也是一个 <strong>伪数组</strong></li></ul></li><li><p><code>firstChild</code>：获取某一节点下子一级的 <strong>第一个节点</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这个 oDiv 获取的是页面中的 div 元素，就是一个元素节点</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> oDiv = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(oDiv.<span class="property">firstChild</span>) <span class="comment">// #text</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>这个是只获取一个节点，不再是伪数组了</li><li>获取的是第一个</li><li>第一个就是 <code>&lt;div&gt; 一直到 &lt;p&gt;</code> 的那个换行和空格，是个文本节点</li></ul></li><li><p><code>lastChild</code>：获取某一节点下子一级的 <strong>最后一个节点</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这个 oDiv 获取的是页面中的 div 元素，就是一个元素节点</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> oDiv = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(oDiv.<span class="property">lastChild</span>) <span class="comment">// #text</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>只获取一个节点，不再是伪数组</li><li>获取的是最后一个</li><li>最后一个就是 <code>&lt;/p&gt; 一直到 &lt;/div&gt;</code> 之间的换行和空格，是个文本节点</li></ul></li><li><p><code>firstElementChild</code>：获取某一节点下子一级 <strong>第一个元素节点</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这个 oDiv 获取的是页面中的 div 元素，就是一个元素节点</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> oDiv = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(oDiv.<span class="property">firstElementChild</span>) <span class="comment">// &lt;p&gt;hello&lt;/p&gt;</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>只获取一个节点，不在是伪数组</li><li>获取的是第一个 <strong>元素节点</strong></li><li>第一个元素节点就是 <code>p</code> 标签，是一个元素节点</li></ul></li><li><p><code>lastElementChild</code>：获取某一节点下子一级 <strong>最后一个元素节点</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>world<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这个 oDiv 获取的是页面中的 div 元素，就是一个元素节点</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> oDiv = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(oDiv.<span class="property">lastElementChild</span>) <span class="comment">// &lt;p&gt;world&lt;/p&gt;</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>只获取一个节点，不在是伪数组</li><li>获取的是最后一个 <strong>元素节点</strong></li><li>最后一个元素节点是 <code>&lt;p&gt;world&lt;/p&gt;</code>，是一个元素节点</li></ul></li><li><p><code>nextSibling</code>：获取某一个节点的 <strong>下一个兄弟节点</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;a&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;b&quot;</span>&gt;</span>world<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;c&quot;</span>&gt;</span>!!!<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这个 oLi 获取的是页面中的 li 元素，就是一个元素节点</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> oLi = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#b&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(oLi.<span class="property">nextSibling</span>) <span class="comment">// #text</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>只获取一个节点，不在是伪数组</li><li>获取的是 <code>id=&quot;b&quot;</code> 这个 <code>li</code> 的下一个兄弟节点</li><li>因为 <code>id=&quot;b&quot;</code> 的下一个节点，是两个 <code>li</code> 标签之间的换行和空格，所以是一个文本节点</li></ul></li><li><p><code>previousSibling</code>：获取某一个节点的 <strong>上一个兄弟节点</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;a&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;b&quot;</span>&gt;</span>world<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;c&quot;</span>&gt;</span>!!!<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这个 oLi 获取的是页面中的 li 元素，就是一个元素节点</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> oLi = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#b&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(oLi.<span class="property">previousSibling</span>) <span class="comment">// #text</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>只获取一个节点，不在是伪数组</li><li>获取的是 <code>id=&quot;b&quot;</code> 这个 <code>li</code> 的上一个兄弟节点</li><li>因为 <code>id=&quot;b&quot;</code> 的上一个节点，是两个 <code>li</code> 标签之间的换行和空格，所以是一个文本节点</li></ul></li><li><p><code>nextElementSibling</code>：获取某一个节点的 <strong>下一个元素节点</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;a&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;b&quot;</span>&gt;</span>world<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;c&quot;</span>&gt;</span>!!!<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这个 oLi 获取的是页面中的 li 元素，就是一个元素节点</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> oLi = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#b&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(oLi.<span class="property">nextElementSibling</span>) <span class="comment">// &lt;li id=&quot;c&quot;&gt;!!!&lt;/li&gt;</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>只获取一个节点，不在是伪数组</li><li>获取的是 <code>id=&quot;b&quot;</code> 这个 <code>li</code> 的下一个兄弟元素节点</li><li>因为 <code>id=&quot;b&quot;</code> 的下一个兄弟元素节点就是 <code>id=&quot;c&quot;</code> 的 <code>li</code>，是一个元素节点</li></ul></li><li><p><code>previousElementSibling</code>：获取某一个节点的 <strong>上一个元素节点</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;a&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;b&quot;</span>&gt;</span>world<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;c&quot;</span>&gt;</span>!!!<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这个 oLi 获取的是页面中的 li 元素，就是一个元素节点</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> oLi = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#b&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(oLi.<span class="property">previousElementSibling</span>) <span class="comment">// &lt;li id=&quot;a&quot;&gt;hello&lt;/li&gt;</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>只获取一个节点，不在是伪数组</li><li>获取的是 <code>id=&quot;b&quot;</code> 这个 <code>li</code> 的上一个兄弟元素节点</li><li>因为 <code>id=&quot;b&quot;</code> 的上一个兄弟元素节点就是 <code>id=&quot;a&quot;</code> 的 <code>li</code>，是一个元素节点</li></ul></li><li><p><code>parentNode</code>：获取某一个节点的 <strong>父节点</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;a&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;b&quot;</span>&gt;</span>world<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;c&quot;</span>&gt;</span>!!!<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这个 oLi 获取的是页面中的 li 元素，就是一个元素节点</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> oLi = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#b&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(oLi.<span class="property">parentNode</span>) <span class="comment">// &lt;ul&gt;...&lt;/ul&gt;</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>只获取一个节点，不在是伪数组</li><li>获取的是当前这个 <code>li</code> 的父元素节点</li><li>因为这个 <code>li</code> 的父亲就是 <code>ul</code>，所以获取到的就是 <code>ul</code>，是一个元素节点</li></ul></li><li><p><code>attributes</code>：获取某一个 <strong>元素节点</strong> 的所有 <strong>属性节点</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;a&quot;</span> <span class="attr">a</span>=<span class="string">&quot;100&quot;</span> <span class="attr">test</span>=<span class="string">&quot;test&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这个 oLi 获取的是页面中的 li 元素，就是一个元素节点</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> oLi = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#a&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(oLi.<span class="property">attributes</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    NamedNodeMap &#123;0: id, 1: a, 2: test, id: id, a: a, test: test, length: 3&#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      0: id</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      1: a</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      2: test</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      length: 3</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      a: a</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      id: id</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      test: test</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      __proto__: NamedNodeMap</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    */</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>获取的是一组数据，是该元素的所有属性，也是一个伪数组</li><li>这个 <code>li</code> 有三个属性，<code>id</code> / <code>a</code> / <code>test</code> 三个，所以就获取到了这三个</li></ul></li></ul><h5 id="4-节点属性"><a href="#4-节点属性" class="headerlink" title="4. 节点属性"></a>4. 节点属性</h5><ul><li><p>我们已经知道节点会分成很多种，而且我们也能获取到各种不同的节点</p></li><li><p>接下来我们就来聊一些各种节点之间属性的区别</p></li><li><p>我们先准备一段代码</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">test</span>=<span class="string">&quot;我是 ul 的一个属性&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 先获取 ul</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> oUl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取到 ul 下的第一个子元素节点，是一个元素节点</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> eleNode = oUl.<span class="property">firstElementChild</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取到 ul 的属性节点组合，因为是个组合，我们要拿到节点的话要用索引</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> attrNode = oUl.<span class="property">attributes</span>[<span class="number">0</span>]</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取到 ul 下的第一个子节点，是一个文本节点</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> textNode = oUl.<span class="property">firstChild</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h6 id="nodeType"><a href="#nodeType" class="headerlink" title="nodeType"></a>nodeType</h6><ul><li><p><code>nodeType</code>：获取节点的节点类型，用数字表示</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(eleNode.<span class="property">nodeType</span>) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(attrNode.<span class="property">nodeType</span>) <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(textNode.<span class="property">nodeType</span>) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><ul><li><code>nodeType === 1</code> 就表示该节点是一个 <strong>元素节点</strong></li><li><code>nodeType === 2</code> 就表示该节点是一个 <strong>属性节点</strong></li><li><code>nodeType === 3</code> 就表示该节点是一个 <strong>注释节点</strong></li></ul></li></ul><h6 id="nodeName"><a href="#nodeName" class="headerlink" title="nodeName"></a>nodeName</h6><ul><li><p><code>nodeName</code>：获取节点的节点名称</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(eleNode.<span class="property">nodeName</span>) <span class="comment">// LI</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(attrNode.<span class="property">nodeName</span>) <span class="comment">// test</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(textNode.<span class="property">nodeName</span>) <span class="comment">// #text</span></span><br></pre></td></tr></table></figure><ul><li>元素节点的 <code>nodeName</code> 就是 <strong>大写标签名</strong></li><li>属性节点的 <code>nodeName</code> 就是 <strong>属性名</strong></li><li>文本节点的 <code>nodeName</code> 都是 <strong>#text</strong></li></ul></li></ul><h6 id="nodeValue"><a href="#nodeValue" class="headerlink" title="nodeValue"></a>nodeValue</h6><ul><li><p><code>nodeValue</code>： 获取节点的值</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(eleNode.<span class="property">nodeValue</span>) <span class="comment">// null</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(attrNode.<span class="property">nodeValue</span>) <span class="comment">// 我是 ul 的一个属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(textNode.<span class="property">nodeValue</span>) <span class="comment">// 换行 + 空格</span></span><br></pre></td></tr></table></figure><ul><li>元素节点没有 <code>nodeValue</code></li><li>属性节点的 <code>nodeValue</code> 就是 <strong>属性值</strong></li><li>文本节点的 <code>nodeValue</code> 就是 <strong>文本内容</strong></li></ul></li></ul><h6 id="汇总"><a href="#汇总" class="headerlink" title="汇总"></a>汇总</h6><div class="table-container"><table><thead><tr><th>-</th><th>nodeType</th><th>nodeName</th><th>nodeValue</th></tr></thead><tbody><tr><td>元素节点</td><td>1</td><td>大写标签名</td><td>null</td></tr><tr><td>属性节点</td><td>2</td><td>属性名</td><td>属性值</td></tr><tr><td>文本节点</td><td>3</td><td>#text</td><td>文本内容</td></tr></tbody></table></div><h5 id="5-操作-DOM-节点"><a href="#5-操作-DOM-节点" class="headerlink" title="5. 操作 DOM 节点"></a>5. 操作 DOM 节点</h5><ul><li>我们所说的操作无非就是 <strong>增删改查（CRUD）</strong></li><li>创建一个节点（因为向页面中增加之前，我们需要先创建一个节点出来）</li><li>向页面中增加一个节点</li><li>删除页面中的某一个节点</li><li>修改页面中的某一个节点</li><li>获取页面中的某一个节点</li></ul><h6 id="创建一个节点"><a href="#创建一个节点" class="headerlink" title="创建一个节点"></a>创建一个节点</h6><ul><li><p><code>createElement</code>：用于创建一个元素节点</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个 div 元素节点</span></span><br><span class="line"><span class="keyword">var</span> oDiv = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(oDiv) <span class="comment">// &lt;div&gt;&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><ul><li>创建出来的就是一个可以使用的 div 元素</li></ul></li><li><p><code>createTextNode</code>：用于创建一个文本节点</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个文本节点</span></span><br><span class="line"><span class="keyword">var</span> oText = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&#x27;我是一个文本&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(oText) <span class="comment">// &quot;我是一个文本&quot;</span></span><br></pre></td></tr></table></figure></li></ul><h6 id="向页面中加入一个节点"><a href="#向页面中加入一个节点" class="headerlink" title="向页面中加入一个节点"></a>向页面中加入一个节点</h6><ul><li><p><code>appendChild</code>：是向一个元素节点的末尾追加一个节点</p></li><li><p>语法： <code>父节点.appendChild(要插入的子节点)</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个 div 元素节点</span></span><br><span class="line"><span class="keyword">var</span> oDiv = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> oText = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&#x27;我是一个文本&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向 div 中追加一个文本节点</span></span><br><span class="line">oDiv.<span class="title function_">appendChild</span>(oText)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(oDiv) <span class="comment">// &lt;div&gt;我是一个文本&lt;/div&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>insertBefore</code>：向某一个节点前插入一个节点</p></li><li><p>语法： <code>父节点.insertBefore(要插入的节点，插入在哪一个节点的前面)</code></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个 p 标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> oDiv = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> oP = oDiv.<span class="title function_">querySelector</span>(<span class="string">&#x27;p&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 创建一个元素节点</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> oSpan = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;span&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 将这个元素节点添加到 div 下的 p 的前面</span></span></span><br><span class="line"><span class="language-javascript">    oDiv.<span class="title function_">insertBefore</span>(oSpan, oP)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(oDiv)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    &lt;div&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    &lt;span&gt;&lt;/span&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    &lt;p&gt;我是一个 p 标签&lt;/p&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    &lt;/div&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    */</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h6 id="删除页面中的某一个节点"><a href="#删除页面中的某一个节点" class="headerlink" title="删除页面中的某一个节点"></a>删除页面中的某一个节点</h6><ul><li><p><code>removeChild</code>：移除某一节点下的某一个节点</p></li><li><p>语法：<code>父节点.removeChild(要移除的字节点)</code></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个 p 标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> oDiv = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> oP = oDiv.<span class="title function_">querySelector</span>(<span class="string">&#x27;p&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 移除 div 下面的 p 标签</span></span></span><br><span class="line"><span class="language-javascript">    oDiv.<span class="title function_">removeChild</span>(oP)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(oDiv) <span class="comment">// &lt;div&gt;&lt;/div&gt;</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h6 id="修改页面中的某一个节点"><a href="#修改页面中的某一个节点" class="headerlink" title="修改页面中的某一个节点"></a>修改页面中的某一个节点</h6><ul><li><p><code>replaceChild</code>：将页面中的某一个节点替换掉</p></li><li><p>语法： <code>父节点.replaceChild(新节点，旧节点)</code></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个 p 标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> oDiv = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> oP = oDiv.<span class="title function_">querySelector</span>(<span class="string">&#x27;p&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 创建一个 span 节点</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> oSpan = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;span&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 向 span 元素中加点文字</span></span></span><br><span class="line"><span class="language-javascript">    oSpan.<span class="property">innerHTML</span> = <span class="string">&#x27;我是新创建的 span 标签&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 用创建的 span 标签替换原先 div 下的 p 标签</span></span></span><br><span class="line"><span class="language-javascript">    oDiv.<span class="title function_">replaceChild</span>(oSpan, oP)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(oDiv)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    &lt;div&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    &lt;span&gt;我是新创建的 span 标签&lt;/span&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    &lt;/div&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    */</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="6-获取元素的偏移量"><a href="#6-获取元素的偏移量" class="headerlink" title="6. 获取元素的偏移量"></a>6. 获取元素的偏移量</h5><ul><li>就是元素在页面上相对于参考父级的左边和上边的距离</li></ul><h6 id="offsetParent"><a href="#offsetParent" class="headerlink" title="offsetParent"></a>offsetParent</h6><ul><li>获取元素的偏移量参考父级</li><li>其实就是假设你要给一个元素 <strong>绝对定位</strong> 的时候</li><li>它是根据谁来进行定位的</li><li>那么这个元素的偏移量参考父级就是谁</li></ul><h6 id="offsetLeft-和-offsetTop"><a href="#offsetLeft-和-offsetTop" class="headerlink" title="offsetLeft 和 offsetTop"></a>offsetLeft 和 offsetTop</h6><ul><li>获取的是元左边的偏移量和上边的偏移量</li><li><code>offsetLeft</code> ： 该元素相对于参考父级的左侧偏移量</li><li><code>offsetTop</code> ： 该元素相对于参考父级的上侧偏移量</li></ul><h5 id="7-获取元素尺寸"><a href="#7-获取元素尺寸" class="headerlink" title="7. 获取元素尺寸"></a>7. 获取元素尺寸</h5><ul><li>就是获取元素的 “占地面积”</li></ul><h6 id="offsetWith-和-offsetHeight"><a href="#offsetWith-和-offsetHeight" class="headerlink" title="offsetWith 和 offsetHeight"></a>offsetWith 和 offsetHeight</h6><ul><li><code>offsetWidth</code> ： 获取的是元素 内容 + padding + border 的宽度</li><li><code>offsetHeight</code> ： 获取的是元素 内容 + padding + border 的高度</li></ul><h6 id="clientWidth-和-clientHeight"><a href="#clientWidth-和-clientHeight" class="headerlink" title="clientWidth 和 clientHeight"></a>clientWidth 和 clientHeight</h6><ul><li><p><code>clientWidth</code> ： 获取的是元素 内容 + padding 的宽度</p></li><li><p><code>clientHeight</code> ： 获取的是元素 内容 + padding 的高度</p></li></ul><p>注意:</p><ul><li>获取到的尺寸是没有单位的数字</li><li>当元素在页面中不占位置的时候， 获取到的是 0<ul><li><code>display: none;</code> 元素在页面不占位</li><li><code>visibility: hidden;</code> 元素在页面占位</li></ul></li></ul><h5 id="8-获取浏览器窗口尺寸"><a href="#8-获取浏览器窗口尺寸" class="headerlink" title="8. 获取浏览器窗口尺寸"></a>8. 获取浏览器窗口尺寸</h5><ul><li>我们之前学过一个 <code>innerWidth</code> 和 <code>innerHeight</code></li><li>他们获取到的是窗口包含滚动条的尺寸</li><li><p>下面我们学习两个不包含滚动条的尺寸获取方式</p></li><li><p><code>document.documentElement.clientWidth</code> ： 可视窗口的宽度</p></li><li><code>document.documentElement.clientHeight</code> ： 可视窗口的高度</li></ul><h5 id="9-事件"><a href="#9-事件" class="headerlink" title="9. 事件"></a>9. 事件</h5><ul><li><p>一个事件由什么东西组成</p><ul><li>触发谁的事件：事件源</li><li>触发什么事件：事件类型</li><li>触发以后做什么：事件处理函数</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oDiv = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"></span><br><span class="line">oDiv.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="comment">// 谁来触发事件 =&gt; oDiv =&gt; 这个事件的事件源就是 oDiv</span></span><br><span class="line"><span class="comment">// 触发什么事件 =&gt; onclick =&gt; 这个事件类型就是 click</span></span><br><span class="line"><span class="comment">// 触发之后做什么 =&gt; function () &#123;&#125; =&gt; 这个事件的处理函数</span></span><br></pre></td></tr></table></figure><ul><li>我们想要在点击 div 以后做什么事情，就把我们要做的事情写在事件处理函数里面</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oDiv = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"></span><br><span class="line">oDiv.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你点击了 div&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当我们点击 <code>div</code> 的时候，就会执行事件处理函数内部的代码</li><li>每点击一次，就会执行一次事件处理函数</li></ul></li></ul><h5 id="10-事件的绑定方式"><a href="#10-事件的绑定方式" class="headerlink" title="10 事件的绑定方式"></a>10 事件的绑定方式</h5><ul><li><p>我们现在给一个注册事件都是使用 <code>onxxx</code> 的方式</p></li><li><p>但是这个方式不是很好，只能给一个元素注册一个事件</p></li><li><p>一旦写了第二个事件，那么第一个就被覆盖了</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">oDiv.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是第一个事件&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">oDiv.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是第二个事件&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当你点击的时候，只会执行第二个，第一个就没有了</li></ul></li><li><p>我们还有一种事件监听的方式去给元素绑定事件</p></li><li><p>使用 <code>addEventListener</code> 的方式添加</p><ul><li>这个方法不兼容，在 IE 里面要使用 <code>attachEvent</code></li></ul></li><li><p><code>addEventListener</code> : 非 IE 7 8 下使用</p></li><li><p>语法： <code>元素.addEventListener(&#39;事件类型&#39;， 事件处理函数， 冒泡还是捕获)</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">oDiv.<span class="title function_">addEventListener</span>(</span><br><span class="line">  <span class="string">&#x27;click&#x27;</span>,</span><br><span class="line">  <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是第一个事件&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">oDiv.<span class="title function_">addEventListener</span>(</span><br><span class="line">  <span class="string">&#x27;click&#x27;</span>,</span><br><span class="line">  <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是第二个事件&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>当你点击 div 的时候，两个函数都会执行，并且会按照你注册的顺序执行</li><li>先打印 <code>我是第一个事件</code> 再打印 <code>我是第二个事件</code></li><li>注意： <strong>事件类型的时候不要写 on，点击事件就是 click，不是 onclick</strong></li></ul></li><li><p><code>attachEvent</code> ：IE 7 8 下使用</p></li><li><p>语法： <code>元素.attachEvent(&#39;事件类型&#39;， 事件处理函数)</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">oDiv.<span class="title function_">attachEvent</span>(<span class="string">&#x27;onclick&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是第一个事件&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">oDiv.<span class="title function_">attachEvent</span>(<span class="string">&#x27;onclick&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是第二个事件&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>当你点击 div 的时候，两个函数都会执行，并且会按照你注册的顺序倒叙执行</li><li>先打印 <code>我是第二个事件</code> 再打印 <code>我是第一个事件</code></li><li>注意： <strong>事件类型的时候要写 on，点击事件就行 onclick</strong></li></ul></li></ul><p><strong>两个方式的区别</strong></p><ul><li>注册事件的时候事件类型参数的书写<ul><li><code>addEventListener</code> ： 不用写 on</li><li><code>attachEvent</code> ： 要写 on</li></ul></li><li>参数个数<ul><li><code>addEventListener</code> ： 一般是三个常用参数</li><li><code>attachEvent</code> ： 两个参数</li></ul></li><li>执行顺序<ul><li><code>addEventListener</code> ： 顺序注册，顺序执行</li><li><code>attachEvent</code> ： 顺序注册，倒叙执行</li></ul></li><li>适用浏览器<ul><li><code>addEventListener</code> ： 非 IE 7 8 的浏览器</li><li><code>attachEvent</code> ： IE 7 8 浏览器</li></ul></li></ul><h5 id="11-常见的事件"><a href="#11-常见的事件" class="headerlink" title="11. 常见的事件"></a>11. 常见的事件</h5><ul><li>我们在写页面的时候经常用到的一些事件</li><li>大致分为几类，<strong>浏览器事件</strong> / <strong>鼠标事件</strong> / <strong>键盘事件</strong> / <strong>表单事件</strong> / <strong>触摸事件</strong></li><li>不需要都记住，但是大概要知道</li></ul><h6 id="浏览器事件"><a href="#浏览器事件" class="headerlink" title="浏览器事件"></a>浏览器事件</h6><ul><li><code>load</code> ： 页面全部资源加载完毕</li><li><code>scroll</code> ： 浏览器滚动的时候触发</li><li>…</li></ul><h6 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h6><ul><li><code>click</code> ：点击事件</li><li><code>dblclick</code> ：双击事件</li><li><code>contextmenu</code> ： 右键单击事件</li><li><code>mousedown</code> ：鼠标左键按下事件</li><li><code>mouseup</code> ：鼠标左键抬起事件</li><li><code>mousemove</code> ：鼠标移动</li><li><code>mouseover</code> ：鼠标移入事件</li><li><code>mouseout</code> ：鼠标移出事件</li><li><code>mouseenter</code> ：鼠标移入事件</li><li><code>mouseleave</code> ：鼠标移出事件</li><li>…</li></ul><h6 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h6><ul><li><code>keyup</code> ： 键盘抬起事件</li><li><code>keydown</code> ： 键盘按下事件</li><li><code>keypress</code> ： 键盘按下再抬起事件</li><li>…</li></ul><h6 id="表单事件"><a href="#表单事件" class="headerlink" title="表单事件"></a>表单事件</h6><ul><li><code>change</code> : 表单内容改变事件</li><li><code>input</code> : 表单内容输入事件</li><li><code>submit</code> : 表单提交事件</li><li>…</li></ul><h6 id="触摸事件"><a href="#触摸事件" class="headerlink" title="触摸事件"></a>触摸事件</h6><ul><li><code>touchstart</code> ： 触摸开始事件</li><li><code>touchend</code> ： 触摸结束事件</li><li><code>touchmove</code> ： 触摸移动事件</li><li>…</li></ul><h5 id="12-事件对象"><a href="#12-事件对象" class="headerlink" title="12. 事件对象"></a>12. 事件对象</h5><ul><li><p>什么是事件对象？</p></li><li><p>就是当你触发了一个事件以后，对该事件的一些描述信息</p></li><li><p>例如：</p><ul><li>你触发一个点击事件的时候，你点在哪个位置了，坐标是多少</li><li>你触发一个键盘事件的时候，你按的是哪个按钮</li><li>…</li></ul></li><li><p>每一个事件都会有一个对应的对象来描述这些信息，我们就把这个对象叫做 <strong>事件对象</strong></p></li><li><p>浏览器给了我们一个 <strong>黑盒子</strong>，叫做 <code>window.event</code>，就是对事件信息的所有描述</p><ul><li>比如点击事件</li><li>你点在了 <code>0，0</code> 位置，那么你得到的这个事件对象里面对应的就会有这个点位的属性</li><li>你点在了 <code>10, 10</code> 位置，那么你得到的这个事件对象里面对应的就会有这个点位的属性</li><li>…</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">oDiv.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">event</span>.<span class="property">X</span>轴坐标点信息)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">event</span>.<span class="property">Y</span>轴坐标点信息)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这个玩意很好用，但是一般来说，好用的东西就会有 <strong>兼容性问题</strong></p></li><li><p>在 <code>IE低版本</code> 里面这个东西好用，但是在 <code>高版本IE</code> 和 <code>Chrome</code> 里面不好使了</p></li><li><p>我们就得用另一种方式来获取 <strong>事件对象</strong></p></li><li><p>在每一个事件处理函数的行参位置，默认第一个就是 <strong>事件对象</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">oDiv.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="comment">// e 就是和 IE 的 window.event 一样的东西</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">X</span>轴坐标点信息)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">Y</span>轴坐标点信息)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>综上所述，我们以后在每一个事件里面，想获取事件对象的时候，都用兼容写法</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">oDiv.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  e = e || <span class="variable language_">window</span>.<span class="property">event</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">X</span>轴坐标点信息)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">Y</span>轴坐标点信息)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h6 id="点击事件的光标坐标点获取"><a href="#点击事件的光标坐标点获取" class="headerlink" title="点击事件的光标坐标点获取"></a>点击事件的光标坐标点获取</h6><p><img src="%E7%AC%94%E8%AE%B0.assets/image-20220530215226855.png" alt="image-20220530215226855" style="zoom: 67%;" /></p><p><img src="%E7%AC%94%E8%AE%B0.assets/image-20220530220140448.png" alt="image-20220530220140448" style="zoom: 67%;" /></p><p><img src="%E7%AC%94%E8%AE%B0.assets/image-20220530220229523.png" alt="image-20220530220229523" style="zoom: 67%;" /></p><h5 id="13-事件的传播"><a href="#13-事件的传播" class="headerlink" title="13. 事件的传播"></a>13. 事件的传播</h5><p><img src="../imgs/bj.assets/image-20220601095555972.png" alt="image-20220601095555972"></p><ul><li><strong>当元素触发一个事件的时候，其父元素也会触发相同的事件，父元素的父元素也会触发相同的事件</strong></li><li>就像上面的图片一样</li><li>点击在红色盒子上的时候，会触发红色盒子的点击事件</li><li>也是点击在了粉色的盒子上，也会触发粉色盒子的点击事件</li><li>也是点击在了 body 上，也会触发 body 的点击事件</li><li>也是点击在了 html 上，也会触发 html 的点击事件</li><li>也是点击在了 document 上，也会触发 document 的点击事件</li><li>也是点击在了 window 上，也会触发 window 的点击事件</li><li>也就是说，页面上任何一个元素触发事件，都会一层一层最终导致 window 的相同事件触发，前提是各层级元素得有注册相同的事件，不然不会触发</li><li>在事件传播的过程中，有一些注意的点：<ol><li>只会传播同类事件</li><li>只会从点击元素开始按照 html 的结构逐层向上元素的事件会被触发</li><li>内部元素不管有没有该事件，只要上层元素有该事件，那么上层元素的事件就会被触发</li></ol></li><li>到现在，我们已经了解了事件的传播，我们再来思考一个问题<ul><li>事件确实会从自己开始，到 window 的所有相同事件都会触发</li><li>是因为我们点在自己身上，也确实逐层的点在了直至 window 的每一个元素身上</li><li>但是到底是先点在自己身上，还是先点在了 window 身上呢</li><li>先点在自己身上，就是先执行自己的事件处理函数，逐层向上最后执行 window 的事件处理函数</li><li>反之，则是先执行 window 的事件处理函数，逐层向下最后执行自己身上的事件处理函数</li></ul></li></ul><h6 id="冒泡、捕获、目标"><a href="#冒泡、捕获、目标" class="headerlink" title="冒泡、捕获、目标"></a>冒泡、捕获、目标</h6><ul><li>我们刚才聊过了，每一个事件，都是有可能从自己到 window ，有可能要执行多个同类型事件</li><li>那么这个执行的顺序就有一些说法了</li></ul><p><strong>目标</strong></p><ul><li>你是点击在哪个元素身上了，那么这个事件的 <strong>目标</strong> 就是什么</li></ul><p><strong>冒泡</strong></p><ul><li>就是从事件 <strong>目标</strong> 的事件处理函数开始，依次向外，直到 window 的事件处理函数触发</li><li>也就是从下向上的执行事件处理函数</li></ul><p><strong>捕获</strong></p><ul><li>就是从 window 的事件处理函数开始，依次向内，只要事件 <strong>目标</strong> 的事件处理函数执行</li><li>也就是从上向下的执行事件处理函数</li></ul><p><strong>冒泡和捕获的区别</strong></p><ul><li>就是在事件的传播中，多个同类型事件处理函数的执行顺序不同</li></ul><h5 id="14-事件委托"><a href="#14-事件委托" class="headerlink" title="14. 事件委托"></a>14. 事件委托</h5><ul><li>就是把我要做的事情委托给别人来做</li><li>因为我们的冒泡机制，点击子元素的时候，也会同步触发父元素的相同事件</li><li>所以我们就可以把子元素的事件委托给父元素来做</li></ul><h6 id="事件触发"><a href="#事件触发" class="headerlink" title="事件触发"></a>事件触发</h6><ul><li><p>点击子元素的时候，不管子元素有没有点击事件，只要父元素有点击事件，那么就可以触发父元素的点击事件</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> oUl = docuemnt.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    oUl.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是 ul 的点击事件，我被触发了&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>像上面一段代码，当你点击 ul 的时候肯定会触发</li><li>但是当你点击 li 的时候，其实也会触发</li></ul></li></ul><h6 id="target"><a href="#target" class="headerlink" title="target"></a>target</h6><ul><li><p>target 这个属性是事件对象里面的属性，表示你点击的目标</p></li><li><p>当你触发点击事件的时候，你点击在哪个元素上，target 就是哪个元素</p></li><li><p>这个 target 也不兼容，在 IE 下要使用 srcElement</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> oUl = docuemnt.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    oUl.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      e = e || <span class="variable language_">window</span>.<span class="property">event</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> target = e.<span class="property">target</span> || e.<span class="property">srcElement</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(target)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>上面的代码，当你点击 ul 的时候，target 就是 ul</li><li>当你点击在 li 上面的时候，target 就是 li</li></ul></li></ul><h6 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h6><ul><li><p>这个时候，当我们点击 li 的时候，也可以触发 ul 的点事件</p></li><li><p>并且在事件内不，我们也可以拿到你点击的到底是 ul 还是 li</p></li><li><p>这个时候，我们就可以把 li 的事件委托给 ul 来做</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> oUl = docuemnt.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    oUl.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      e = e || <span class="variable language_">window</span>.<span class="property">event</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> target = e.<span class="property">target</span> || e.<span class="property">srcElement</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 判断你点击的是 li</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (target.<span class="property">nodeName</span>.<span class="property">toUpperCase</span> === <span class="string">&#x27;LI&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 确定点击的是 li</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 因为当你点击在 ul 上面的时候，nodeName 应该是 &#x27;UL&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 去做点击 li 的时候该做的事情了</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是 li，我被点击了&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>上面的代码，我们就可以把 li 要做的事情委托给 ul 来做</li></ul></li></ul><h5 id="15-默认行为"><a href="#15-默认行为" class="headerlink" title="15. 默认行为"></a>15. 默认行为</h5><ul><li>默认行为，就是不用我们注册，它自己就存在的事情<ul><li>比如我们点击鼠标右键的时候，会自动弹出一个菜单</li><li>比如我们点击 a 标签的时候，我们不需要注册点击事件，他自己就会跳转页面</li><li>…</li></ul></li><li>这些不需要我们注册就能实现的事情，我们叫做 <strong>默认事件</strong></li></ul><h6 id="阻止默认行为"><a href="#阻止默认行为" class="headerlink" title="阻止默认行为"></a>阻止默认行为</h6><ul><li><p>有的时候，我们不希望浏览器执行默认事件</p><ul><li>比如我给 a 标签绑定了一个点击事件，我点击你的时候希望你能告诉我你的地址是什么</li><li>而不是直接跳转链接</li><li>那么我们就要把 a 标签原先的默认事件阻止，不让他执行默认事件</li></ul></li><li><p>我们有两个方法来阻止默认事件</p><ul><li><code>e.preventDefault()</code> : 非 IE 使用</li><li><code>e.returnValue = false</code> ：IE 使用</li></ul></li><li><p>我们阻止默认事件的时候也要写一个兼容的写法</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;</span>点击我试试<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> oA = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;a&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  a.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    e = e || <span class="variable language_">window</span>.<span class="property">event</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">href</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    e.<span class="property">preventDefault</span> ? e.<span class="title function_">preventDefault</span>() : (e.<span class="property">returnValue</span> = <span class="literal">false</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>这样写完以后，你点击 a 标签的时候，就不会跳转链接了</li><li>而是会在控制台打印出 a 标签的 href 属性的值</li></ul></li></ul><h5 id="16-this-关键字"><a href="#16-this-关键字" class="headerlink" title="16. this 关键字"></a>16. this 关键字</h5><ul><li><p>每一个函数内部都有一个关键字是 <code>this</code></p></li><li><p>可以让我们直接使用的</p></li><li><p>重点： <strong>函数内部的 this 只和函数的调用方式有关系，和函数的定义方式没有关系</strong></p></li><li><p>函数内部的 this 指向谁，取决于函数的调用方式</p><ul><li><p>全局定义的函数直接调用，<code>this =&gt; window</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line"><span class="comment">// 此时 this 指向 window</span></span><br></pre></td></tr></table></figure></li><li><p>对象内部的方法调用，<code>this =&gt; 调用者</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">fn</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">fn</span>()</span><br><span class="line"><span class="comment">// 此时 this 指向 obj</span></span><br></pre></td></tr></table></figure></li><li><p>定时器的处理函数，<code>this =&gt; window</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="comment">// 此时定时器处理函数里面的 this 指向 window</span></span><br></pre></td></tr></table></figure></li><li><p>事件处理函数，<code>this =&gt; 事件源</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">div.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当你点击 div 的时候，this 指向 div</span></span><br></pre></td></tr></table></figure></li><li><p>自调用函数，<code>this =&gt; window</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">;(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="comment">// 此时 this 指向 window</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong>call 和 apply 和 bind</strong></p><ul><li>刚才我们说过的都是函数的基本调用方式里面的 this 指向</li><li>我们还有三个可以忽略函数本身的 this 指向转而指向别的地方</li><li>这三个方法就是 <strong>call</strong> / <strong>apply</strong> / <strong>bind</strong></li><li>是强行改变 this 指向的方法</li></ul><h6 id="call"><a href="#call" class="headerlink" title="call"></a>call</h6><ul><li><p><code>call</code> 方法是附加在函数调用后面使用，可以忽略函数本身的 this 指向</p></li><li><p>语法： <code>函数名.call(要改变的 this 指向，要给函数传递的参数1，要给函数传递的参数2， ...)</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">fn.<span class="title function_">call</span>(obj, <span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><ul><li><code>fn()</code> 的时候，函数内部的 this 指向 window</li><li><code>fn.call(obj, 1, 2)</code> 的时候，函数内部的 this 就指向了 obj 这个对象</li><li>使用 call 方法的时候<ul><li>会立即执行函数</li><li>第一个参数是你要改变的函数内部的 this 指向</li><li>第二个参数开始，依次是向函数传递参数</li></ul></li></ul></li></ul><h6 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h6><ul><li><p><code>apply</code> 方法是附加在函数调用后面使用，可以忽略函数本身的 this 指向</p></li><li><p>语法： <code>函数名.apply(要改变的 this 指向，[要给函数传递的参数1， 要给函数传递的参数2， ...])</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">fn.<span class="title function_">call</span>(obj, [<span class="number">1</span>, <span class="number">2</span>])</span><br></pre></td></tr></table></figure><ul><li><code>fn()</code> 的时候，函数内部的 this 指向 window</li><li><code>fn.apply(obj, [1, 2])</code> 的时候，函数内部的 this 就指向了 obj 这个对象</li><li>使用 apply 方法的时候<ul><li>会立即执行函数</li><li>第一个参数是你要改变的函数内部的 this 指向</li><li>第二个参数是一个 <strong>数组</strong>，数组里面的每一项依次是向函数传递的参数</li></ul></li></ul></li></ul><h6 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h6><ul><li><p><code>bind</code> 方法是附加在函数调用后面使用，可以忽略函数本身的 this 指向</p></li><li><p>和 call / apply 有一些不一样，就是不会立即执行函数，而是返回一个已经改变了 this 指向的函数</p></li><li><p>语法： <code>var newFn = 函数名.bind(要改变的 this 指向); newFn(传递参数)</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">var</span> newFn = fn.<span class="title function_">bind</span>(obj)</span><br><span class="line"><span class="title function_">newFn</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><ul><li>bind 调用的时候，不会执行 fn 这个函数，而是返回一个新的函数</li><li>这个新的函数就是一个改变了 this 指向以后的 fn 函数</li><li><code>fn(1, 2)</code> 的时候 this 指向 window</li><li><code>newFn(1, 2)</code> 的时候执行的是一个和 fn 一摸一样的函数，只不过里面的 this 指向改成了 obj</li></ul></li></ul><h4 id="四-ES6"><a href="#四-ES6" class="headerlink" title="四. ES6"></a>四. ES6</h4><ul><li>我们所说的 ES5 和 ES6 其实就是在 js 语法的发展过程中的一个版本而已</li><li>ECMAScript 就是 js 的语法<ul><li>以前的版本没有某些功能</li><li>在 ES5 这个版本的时候增加了一些功能</li><li>在 ES6 这个版本的时候增加了一些功能</li></ul></li><li>因为浏览器是浏览器厂商生产的<ul><li>ECMAScript 发布了新的功能以后，浏览器厂商需要让自己的浏览器支持这些功能</li><li>这个过程是需要时间的</li><li>所以到现在，基本上大部分浏览器都可以比较完善的支持了</li><li>只不过有些浏览器还是不能全部支持</li><li>这就出现了兼容性问题</li><li>所以我们写代码的时候就要考虑哪些方法是 ES5 或者 ES6 的，看看是不是浏览器都支持</li></ul></li></ul><h5 id="let-和-const-关键字"><a href="#let-和-const-关键字" class="headerlink" title="let 和 const 关键字"></a>let 和 const 关键字</h5><ul><li><p>我们以前都是使用 <code>var</code> 关键字来声明变量的</p></li><li><p>在 ES6 的时候，多了两个关键字 <code>let</code> 和 <code>const</code>，也是用来声明变量的</p></li><li><p>只不过和 var 有一些区别</p><ol><li><p><code>let</code> 和 <code>const</code> 不允许重复声明变量</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 var 的时候重复声明变量是没问题的，只不过就是后面会把前面覆盖掉</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">100</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">200</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 let 重复声明变量的时候就会报错了</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">100</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">200</span> <span class="comment">// 这里就会报错了</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 const 重复声明变量的时候就会报错</span></span><br><span class="line"><span class="keyword">const</span> num = <span class="number">100</span></span><br><span class="line"><span class="keyword">const</span> num = <span class="number">200</span> <span class="comment">// 这里就会报错了</span></span><br></pre></td></tr></table></figure></li><li><p><code>let</code> 和 <code>const</code> 声明的变量不会在预解析的时候解析（也就是没有变量提升）</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 因为预解析（变量提升）的原因，在前面是有这个变量的，只不过没有赋值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">100</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 因为 let 不会进行预解析（变量提升），所以直接报错了</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">100</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 因为 const 不会进行预解析（变量提升），所以直接报错了</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">const</span> num = <span class="number">100</span></span><br></pre></td></tr></table></figure></li><li><p><code>let</code> 和 <code>const</code> 声明的变量会被所有代码块限制作用范围</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// var 声明的变量只有函数能限制其作用域，其他的不能限制</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">// 100</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// let 声明的变量，除了函数可以限制，所有的代码块都可以限制其作用域（if/while/for/...）</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> num = <span class="number">100</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">// 100</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// const 声明的变量，除了函数可以限制，所有的代码块都可以限制其作用域（if/while/for/...）</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> num = <span class="number">100</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">// 100</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p><code>let</code> 和 <code>const</code> 的区别</p><ol><li><p><code>let</code> 声明的变量的值可以改变，<code>const</code> 声明的变量的值不可以改变</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">100</span></span><br><span class="line">num = <span class="number">200</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">// 200</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> num = <span class="number">100</span></span><br><span class="line">num = <span class="number">200</span> <span class="comment">// 这里就会报错了，因为 const 声明的变量值不可以改变（我们也叫做常量）</span></span><br></pre></td></tr></table></figure></li><li><p><code>let</code> 声明的时候可以不赋值，<code>const</code> 声明的时候必须赋值</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num</span><br><span class="line">num = <span class="number">100</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">// 100</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> num <span class="comment">// 这里就会报错了，因为 const 声明的时候必须赋值</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><h5 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h5><ul><li><p>箭头函数是 ES6 里面一个简写函数的语法方式</p></li><li><p>重点： <strong>箭头函数只能简写函数表达式，不能简写声明式函数</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;&#125; <span class="comment">// 不能简写</span></span><br><span class="line"><span class="keyword">const</span> fun = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125; <span class="comment">// 可以简写</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">fn</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;, <span class="comment">// 可以简写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>语法： <code>(函数的行参) =&gt; &#123; 函数体内要执行的代码 &#125;</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fn = <span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 可以使用箭头函数写成</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fun</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">fn</span>: <span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 可以使用箭头函数写成</span></span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">fn</span>: <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h6 id="箭头函数的特殊性"><a href="#箭头函数的特殊性" class="headerlink" title="箭头函数的特殊性"></a>箭头函数的特殊性</h6><ul><li><p>箭头函数内部没有 this，箭头函数的 this 是上下文的 this</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在箭头函数定义的位置往上数，这一行是可以打印出 this 的</span></span><br><span class="line"><span class="comment">// 因为这里的 this 是 window</span></span><br><span class="line"><span class="comment">// 所以箭头函数内部的 this 就是 window</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">fn</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 这个位置是箭头函数的上一行，但是不能打印出 this</span></span><br><span class="line">  <span class="attr">fun</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 箭头函数内部的 this 是书写箭头函数的上一行一个可以打印出 this 的位置</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">fn</span>()</span><br><span class="line">obj.<span class="title function_">fun</span>()</span><br></pre></td></tr></table></figure><ul><li>按照我们之前的 this 指向来判断，两个都应该指向 obj</li><li>但是 fun 因为是箭头函数，所以 this 不指向 obj，而是指向 fun 的外层，就是 window</li></ul></li><li><p>箭头函数内部没有 <code>arguments</code> 这个参数集合</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">fn</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">fun</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment">// 会打印一个伪数组 [1, 2, 3]</span></span><br><span class="line">obj.<span class="title function_">fun</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment">// 会直接报错</span></span><br></pre></td></tr></table></figure></li><li><p>函数的行参只有一个的时候可以不写 <code>()</code> 其余情况必须写</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">fn</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;没有参数，必须写小括号&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">fn2</span>: <span class="function">(<span class="params">a</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;一个行参，可以不写小括号&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">fn3</span>: <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;两个或两个以上参数，必须写小括号&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>函数体只有一行代码的时候，可以不写 <code>&#123;&#125;</code> ，并且会自动 return</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">fn</span>: <span class="function">(<span class="params">a</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + <span class="number">10</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">fun</span>: <span class="function">(<span class="params">a</span>) =&gt;</span> a + <span class="number">10</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(<span class="number">10</span>)) <span class="comment">// 20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fun</span>(<span class="number">10</span>)) <span class="comment">// 20</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="函数传递参数的时候的默认值"><a href="#函数传递参数的时候的默认值" class="headerlink" title="函数传递参数的时候的默认值"></a>函数传递参数的时候的默认值</h5><ul><li><p>我们在定义函数的时候，有的时候需要一个默认值出现</p></li><li><p>就是当我不传递参数的时候，使用默认值，传递参数了就使用传递的参数</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a</span>) &#123;</span><br><span class="line">  a = a || <span class="number">10</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>() <span class="comment">// 不传递参数的时候，函数内部的 a 就是 10</span></span><br><span class="line"><span class="title function_">fn</span>(<span class="number">20</span>) <span class="comment">// 传递了参数 20 的时候，函数内部的 a 就是 20</span></span><br></pre></td></tr></table></figure><ul><li>在 ES6 中我们可以直接把默认值写在函数的行参位置</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a = <span class="number">10</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>() <span class="comment">// 不传递参数的时候，函数内部的 a 就是 10</span></span><br><span class="line"><span class="title function_">fn</span>(<span class="number">20</span>) <span class="comment">// 传递了参数 20 的时候，函数内部的 a 就是 20</span></span><br></pre></td></tr></table></figure><ul><li>这个默认值的方式箭头函数也可以使用</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params">a = <span class="number">10</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>() <span class="comment">// 不传递参数的时候，函数内部的 a 就是 10</span></span><br><span class="line"><span class="title function_">fn</span>(<span class="number">20</span>) <span class="comment">// 传递了参数 20 的时候，函数内部的 a 就是 20</span></span><br></pre></td></tr></table></figure><ul><li>注意： <strong>箭头函数如果你需要使用默认值的话，那么一个参数的时候也需要写 （）</strong></li></ul></li></ul><h5 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h5><ul><li>解构赋值，就是快速的从对象或者数组中取出成员的一个语法方式</li></ul><h6 id="解构对象"><a href="#解构对象" class="headerlink" title="解构对象"></a>解构对象</h6><ul><li><p>快速的从对象中获取成员</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES5 的方法向得到对象中的成员</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> name = obj.<span class="property">name</span></span><br><span class="line"><span class="keyword">let</span> age = obj.<span class="property">age</span></span><br><span class="line"><span class="keyword">let</span> gender = obj.<span class="property">gender</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 解构赋值的方式从对象中获取成员</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前面的 &#123;&#125; 表示我要从 obj 这个对象中获取成员了</span></span><br><span class="line"><span class="comment">// name age gender 都得是 obj 中有的成员</span></span><br><span class="line"><span class="comment">// obj 必须是一个对象</span></span><br><span class="line"><span class="keyword">let</span> &#123; name, age, gender &#125; = obj</span><br></pre></td></tr></table></figure></li></ul><h6 id="解构数组"><a href="#解构数组" class="headerlink" title="解构数组"></a>解构数组</h6><ul><li><p>快速的从数组中获取成员</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES5 的方式从数组中获取成员</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;Jack&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>, <span class="string">&#x27;Tom&#x27;</span>]</span><br><span class="line"><span class="keyword">let</span> a = arr[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">let</span> b = arr[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">let</span> c = arr[<span class="number">2</span>]</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用解构赋值的方式从数组中获取成员</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;Jack&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>, <span class="string">&#x27;Tom&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前面的 [] 表示要从 arr 这个数组中获取成员了</span></span><br><span class="line"><span class="comment">// a b c 分别对应这数组中的索引 0 1 2</span></span><br><span class="line"><span class="comment">// arr 必须是一个数组</span></span><br><span class="line"><span class="keyword">let</span> [a, b, c] = arr</span><br></pre></td></tr></table></figure></li></ul><h6 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h6><ul><li><code>&#123;&#125;</code> 是专门解构对象使用的</li><li><code>[]</code> 是专门解构数组使用的</li><li>不能混用</li></ul><h5 id="模版字符串"><a href="#模版字符串" class="headerlink" title="模版字符串"></a>模版字符串</h5><ul><li><p>ES5 中我们表示字符串的时候使用 <code>&#39;&#39;</code> 或者 <code>&quot;&quot;</code></p></li><li><p>在 ES6 中，我们还有一个东西可以表示字符串，就是 <strong>``</strong>（反引号）</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">`hello world`</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> str) <span class="comment">// string</span></span><br></pre></td></tr></table></figure></li><li><p>和单引号好友双引号的区别</p><ol><li><p>反引号可以换行书写</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这个单引号或者双引号不能换行，换行就会报错了</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面这个就报错了</span></span><br><span class="line"><span class="keyword">let</span> str2 = <span class="string">&#x27;hello</span></span><br><span class="line"><span class="string">world&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">`</span></span><br><span class="line"><span class="string">hello</span></span><br><span class="line"><span class="string">world</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str) <span class="comment">// 是可以使用的</span></span><br></pre></td></tr></table></figure></li><li><p>反引号可以直接在字符串里面拼接变量</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES5 需要字符串拼接变量的时候</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">100</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;hello&#x27;</span> + num + <span class="string">&#x27;world&#x27;</span> + num</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str) <span class="comment">// hello100world100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接写在字符串里面不好使</span></span><br><span class="line"><span class="keyword">let</span> str2 = <span class="string">&#x27;hellonumworldnum&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str2) <span class="comment">// hellonumworldnum</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模版字符串拼接变量</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">100</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">`hello<span class="subst">$&#123;num&#125;</span>world<span class="subst">$&#123;num&#125;</span>`</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str) <span class="comment">// hello100world100</span></span><br></pre></td></tr></table></figure><ul><li>在 <strong>``</strong> 里面的 <code>$&#123;&#125;</code> 就是用来书写变量的位置</li></ul></li></ol></li></ul><h5 id="展开运算符"><a href="#展开运算符" class="headerlink" title="展开运算符"></a>展开运算符</h5><ul><li><p>ES6 里面号新添加了一个运算符 <code>...</code> ，叫做展开运算符</p></li><li><p>作用是把数组展开</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(...arr) <span class="comment">// 1 2 3 4 5</span></span><br></pre></td></tr></table></figure></li><li><p>合并数组的时候可以使用</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> arr2 = [...arr, <span class="number">5</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2)</span><br></pre></td></tr></table></figure></li><li><p>也可以合并对象使用</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">  ...obj,</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2)</span><br></pre></td></tr></table></figure></li><li><p>在函数传递参数的时候也可以使用</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(c)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(...arr)</span><br><span class="line"><span class="comment">// 等价于 fn(1, 2, 3)</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="五-面向对象"><a href="#五-面向对象" class="headerlink" title="五.面向对象"></a>五.面向对象</h4><ul><li>首先，我们要明确，面向对象不是语法，是一个思想，是一种 <strong>编程模式</strong></li><li>面向： 面（脸），向（朝着）</li><li>面向过程： 脸朝着过程 =》 关注着过程的编程模式</li><li>面向对象： 脸朝着对象 =》 关注着对象的编程模式</li><li>实现一个效果<ul><li>在面向过程的时候，我们要关注每一个元素，每一个元素之间的关系，顺序，。。。</li><li>在面向过程的时候，我们要关注的就是找到一个对象来帮我做这个事情，我等待结果</li></ul></li><li>我们以前的编程思想是，每一个功能，都按照需求一步一步的逐步完成</li></ul><h5 id="创建对象的方式"><a href="#创建对象的方式" class="headerlink" title="创建对象的方式"></a>创建对象的方式</h5><ul><li>因为面向对象就是一个找到对象的过程</li><li>所以我们先要了解如何创建一个对象</li></ul><h6 id="调用系统内置的构造函数创建对象"><a href="#调用系统内置的构造函数创建对象" class="headerlink" title="调用系统内置的构造函数创建对象"></a>调用系统内置的构造函数创建对象</h6><ul><li><p>js 给我们内置了一个 Object 构造函数</p></li><li><p>这个构造函数就是用来创造对象的</p></li><li><p>当 构造函数 和 new 关键字连用的时候，就可以为我们创造出一个对象</p></li><li><p>因为 js 是一个动态的语言，那么我们就可以动态的向对象中添加成员了</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 就能得到一个空对象</span></span><br><span class="line"><span class="keyword">var</span> o1 = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正常操作对象</span></span><br><span class="line">o1.<span class="property">name</span> = <span class="string">&#x27;Jack&#x27;</span></span><br><span class="line">o1.<span class="property">age</span> = <span class="number">18</span></span><br><span class="line">o1.<span class="property">gender</span> = <span class="string">&#x27;男&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><h6 id="字面量的方式创建一个对象"><a href="#字面量的方式创建一个对象" class="headerlink" title="字面量的方式创建一个对象"></a>字面量的方式创建一个对象</h6><ul><li><p>直接使用字面量的形式，也就是直接写 <code>&#123;&#125;</code></p></li><li><p>可以在写的时候就添加好成员，也可以动态的添加</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字面量方式创建对象</span></span><br><span class="line"><span class="keyword">var</span> o1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 再来一个</span></span><br><span class="line"><span class="keyword">var</span> o2 = &#123;&#125;</span><br><span class="line">o2.<span class="property">name</span> = <span class="string">&#x27;Rose&#x27;</span></span><br><span class="line">o2.<span class="property">age</span> = <span class="number">20</span></span><br><span class="line">o2.<span class="property">gender</span> = <span class="string">&#x27;女&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><h6 id="使用工厂函数的方式创建对象"><a href="#使用工厂函数的方式创建对象" class="headerlink" title="使用工厂函数的方式创建对象"></a>使用工厂函数的方式创建对象</h6><ul><li><p>先书写一个工厂函数</p></li><li><p>这个工厂函数里面可以创造出一个对象，并且给对象添加一些属性，还能把对象返回</p></li><li><p>使用这个工厂函数创造对象</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 先创建一个工厂函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createObj</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 手动创建一个对象</span></span><br><span class="line">  <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 手动的向对象中添加成员</span></span><br><span class="line">  obj.<span class="property">name</span> = <span class="string">&#x27;Jack&#x27;</span></span><br><span class="line">  obj.<span class="property">age</span> = <span class="number">18</span></span><br><span class="line">  obj.<span class="property">gender</span> = <span class="string">&#x27;男&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 手动返回一个对象</span></span><br><span class="line">  <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 使用这个工厂函数创建对象</span></span><br><span class="line"><span class="keyword">var</span> o1 = <span class="title function_">createObj</span>()</span><br><span class="line"><span class="keyword">var</span> o2 = <span class="title function_">createObj</span>()</span><br></pre></td></tr></table></figure></li></ul><h6 id="使用自定义构造函数创建对象"><a href="#使用自定义构造函数创建对象" class="headerlink" title="使用自定义构造函数创建对象"></a>使用自定义构造函数创建对象</h6><ul><li><p>工厂函数需要经历三个步骤</p><ul><li>手动创建对象</li><li>手动添加成员</li><li>手动返回对象</li></ul></li><li><p>构造函数会比工厂函数简单一下</p><ul><li>自动创建对象</li><li>手动添加成员</li><li>自动返回对象</li></ul></li><li><p>先书写一个构造函数</p></li><li><p>在构造函数内向对象添加一些成员</p></li><li><p>使用这个构造函数创造一个对象（和 new 连用）</p></li><li><p>构造函数可以创建对象，并且创建一个带有属性和方法的对象</p></li><li><p>面向对象就是要想办法找到一个有属性和方法的对象</p></li><li><p>面向对象就是我们自己制造 <strong>构造函数</strong> 的过程</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 先创造一个构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, gender</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">18</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">gender</span> = gender</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 使用构造函数创建对象</span></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Jack&#x27;</span>, <span class="string">&#x27;man&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Rose&#x27;</span>, <span class="string">&#x27;woman&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><h5 id="构造函数详解"><a href="#构造函数详解" class="headerlink" title="构造函数详解"></a>构造函数详解</h5><ul><li>我们了解了对象的创建方式</li><li>我们的面向对象就是要么能直接得到一个对象</li><li>要么就弄出一个能创造对象的东西，我们自己创造对象</li><li>我们的构造函数就能创造对象，所以接下来我们就详细聊聊 <strong>构造函数</strong></li></ul><h6 id="构造函数的基本使用"><a href="#构造函数的基本使用" class="headerlink" title="构造函数的基本使用"></a>构造函数的基本使用</h6><ul><li><p>和普通函数一样，只不过 <strong>调用的时候要和 new 连用</strong>，不然就是一个普通函数调用</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> o1 = <span class="keyword">new</span> <span class="title class_">Person</span>() <span class="comment">// 能得到一个空对象</span></span><br><span class="line"><span class="keyword">var</span> o2 = <span class="title class_">Person</span>() <span class="comment">// 什么也得不到，这个就是普通函数调用</span></span><br></pre></td></tr></table></figure><ul><li>注意： <strong>不写 new 的时候就是普通函数调用，没有创造对象的能力</strong></li></ul></li><li><p>首字母大写</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> o1 = <span class="keyword">new</span> <span class="title function_">person</span>() <span class="comment">// 能得到一个对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> o2 = <span class="keyword">new</span> <span class="title class_">Person</span>() <span class="comment">// 能得到一个对象</span></span><br></pre></td></tr></table></figure><ul><li>注意： <strong>首字母不大写，只要和 new 连用，就有创造对象的能力</strong></li></ul></li><li><p>当调用的时候如果不需要传递参数可以不写 <code>()</code>，建议都写上</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> o1 = <span class="keyword">new</span> <span class="title class_">Person</span>() <span class="comment">// 能得到一个空对象</span></span><br><span class="line"><span class="keyword">var</span> o2 = <span class="keyword">new</span> <span class="title class_">Person</span>() <span class="comment">// 能得到一个空对象</span></span><br></pre></td></tr></table></figure><ul><li>注意： <strong>如果不需要传递参数，那么可以不写 （），如果传递参数就必须写</strong></li></ul></li><li><p>构造函数内部的 this，由于和 new 连用的关系，是指向当前实例对象的</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> o1 = <span class="keyword">new</span> <span class="title class_">Person</span>() <span class="comment">// 本次调用的时候，this =&gt; o1</span></span><br><span class="line"><span class="keyword">var</span> o2 = <span class="keyword">new</span> <span class="title class_">Person</span>() <span class="comment">// 本次调用的时候，this =&gt; o2</span></span><br></pre></td></tr></table></figure><ul><li>注意： <strong>每次 new 的时候，函数内部的 this 都是指向当前这次的实例化对象</strong></li></ul></li><li><p>因为构造函数会自动返回一个对象，所以构造函数内部不要写 return</p><ul><li>你如果 return 一个基本数据类型，那么写了没有意义</li><li>如果你 return 一个引用数据类型，那么构造函数本身的意义就没有了</li></ul></li></ul><h6 id="使用构造函数创建一个对象"><a href="#使用构造函数创建一个对象" class="headerlink" title="使用构造函数创建一个对象"></a>使用构造函数创建一个对象</h6><ul><li><p>我们在使用构造函数的时候，可以通过一些代码和内容来向当前的对象中添加一些内容</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;Jack&#x27;</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o1 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="keyword">var</span> o2 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br></pre></td></tr></table></figure><ul><li>我们得到的两个对象里面都有自己的成员 <strong>name</strong> 和 <strong>age</strong></li></ul></li><li><p>我们在写构造函数的时候，是不是也可以添加一些方法进去呢？</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;Jack&#x27;</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">18</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello constructor&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o1 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="keyword">var</span> o2 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br></pre></td></tr></table></figure><ul><li>显然是可以的，我们的到的两个对象中都有 <code>sayHi</code> 这个函数</li><li>也都可以正常调用</li></ul></li><li><p>但是这样好不好呢？缺点在哪里？</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;Jack&#x27;</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">18</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello constructor&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一次 new 的时候， Person 这个函数要执行一遍</span></span><br><span class="line"><span class="comment">// 执行一遍就会创造一个新的函数，并且把函数地址赋值给 this.sayHi</span></span><br><span class="line"><span class="keyword">var</span> o1 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二次 new 的时候， Person 这个函数要执行一遍</span></span><br><span class="line"><span class="comment">// 执行一遍就会创造一个新的函数，并且把函数地址赋值给 this.sayHi</span></span><br><span class="line"><span class="keyword">var</span> o2 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br></pre></td></tr></table></figure><ul><li>这样的话，那么我们两个对象内的 <code>sayHi</code> 函数就是一个代码一摸一样，功能一摸一样</li><li>但是是两个空间函数，占用两个内存空间</li><li>也就是说 <code>o1.sayHi</code> 是一个地址，<code>o2.sayHi</code> 是一个地址</li><li>所以我们执行 <code>console.log(o1 === o2.sayHi)</code> 的到的结果是 <code>false</code></li><li>缺点： <strong>一摸一样的函数出现了两次，占用了两个空间地址</strong></li></ul></li><li><p>怎么解决这个问题呢？</p><ul><li>就需要用到一个东西，叫做 <strong>原型</strong></li></ul></li></ul><h5 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h5><ul><li>原型的出现，就是为了解决 <strong>构造函数的缺点</strong></li><li>也就是给我们提供了一个给对象添加函数的方法</li><li>不然构造函数只能给对象添加属性，不能合理的添加函数就太 LOW 了</li></ul><h6 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h6><ul><li><p><strong>每一个函数天生自带一个成员，叫做 prototype，是一个对象空间</strong></p></li><li><p>即然每一个函数都有，构造函数也是函数，构造函数也有这个对象空间</p></li><li><p>这个 <code>prototype</code> 对象空间可以由函数名来访问</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">// 是一个对象</span></span><br></pre></td></tr></table></figure><ul><li>即然是个对象，那么我们就可以向里面放入一些东西</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;prototype&#x27;</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>我们发现了一个叫做 <code>prototype</code> 的空间是和函数有关联的</p></li><li><p>并且可以向里面存储一些东西</p></li><li><p>重点： <strong>在函数的 prototype 里面存储的内容，不是给函数使用的，是给函数的每一个实例化对象使用的</strong></p></li><li><p>那实例化对象怎么使用能？</p></li></ul><h6 id="proto"><a href="#proto" class="headerlink" title="__proto__"></a>__proto__</h6><ul><li><p><strong>每一个对象都天生自带一个成员，叫做 <code>__proto__</code>，是一个对象空间</strong></p></li><li><p>即然每一个对象都有，实例化对象也是对象，那么每一个实例化对象也有这个成员</p></li><li><p>这个 <code>__proto__</code> 对象空间是给每一个对象使用的</p></li><li><p>当你访问一个对象中的成员的时候</p><ul><li>如果这个对象自己本身有这个成员，那么就会直接给你结果</li><li>如果没有，就会去 <code>__proto__</code> 这个对象空间里面找，里面有的话就给你结果</li><li>未完待续。。。</li></ul></li><li><p>那么这个 <code>__proto__</code> 又指向哪里呢？</p><ul><li>这个对象是由哪个构造函数 new 出来的</li><li>那么这个对象的 <code>__proto__</code> 就指向这个构造函数的 <code>prototype</code></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">__proto__</span> === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>我们发现实例化对象的 <code>__proto__</code> 和所属的构造函数的 <code>prototype</code> 是一个对象空间</li><li>我们可以通过构造函数名称来向 <code>prototype</code> 中添加成员</li><li>对象在访问的时候自己没有，可以自动去自己的 <code>__proto__</code> 中查找</li><li>那么，我们之前构造函数的缺点就可以解决了<ul><li>我们可以把函数放在构造函数的 <code>prototype</code> 中</li><li>实例化对象访问的时候，自己没有，就会自动去 <code>__proto__</code> 中找</li><li>那么也可以使用了</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello Person&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line">p1.<span class="title function_">sayHi</span>()</span><br></pre></td></tr></table></figure><ul><li><code>p1</code> 自己没有 <code>sayHi</code> 方法，就会去自己的 <code>__proto__</code> 中查找</li><li><code>p1.__proto__</code> 就是 <code>Person.prototype</code></li><li>我们又向 <code>Person.prototype</code> 中添加了 <code>sayHi</code> 方法</li><li>所以 <code>p1.sayHi</code> 就可以执行了</li></ul></li><li><p>到这里，当我们实例化多个对象的时候，每个对象里面都没有方法</p><ul><li>都是去所属的构造函数的 <code>protottype</code> 中查找</li><li>那么每一个对象使用的函数，其实都是同一个函数</li><li>那么就解决了我们构造函数的缺点</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">sayHi</span> === p2.<span class="property">sayHi</span>)</span><br></pre></td></tr></table></figure><ul><li><code>p1</code> 是 <code>Person</code> 的一个实例</li><li><code>p2</code> 是 <code>Person</code> 的一个实例</li><li>也就是说 <code>p1.__proto__</code> 和 <code>p2.__proto__</code> 指向的都是 <code>Person.prototype</code></li><li>当 <code>p1</code> 去调用 <code>sayHi</code> 方法的时候是去 <code>Person.prototype</code> 中找</li><li>当 <code>p2</code> 去调用 <code>sayHi</code> 方法的时候是去 <code>Person.prototype</code> 中找</li><li>那么两个实例化对象就是找到的一个方法，也是执行的一个方法</li></ul></li><li><p>结论</p><ul><li>当我们写构造函数的时候</li><li><strong>属性我们直接写在构造函数体内</strong></li><li><strong>方法我们写在原型上</strong></li></ul></li></ul><h5 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h5><ul><li>我们刚才聊过构造函数了，也聊了原型</li><li>那么问题出现了，我们说构造函数的 <code>prototype</code> 是一个对象</li><li>又说了每一个对象都天生自带一个 <code>__proto__</code> 属性</li><li>那么 <strong>构造函数的 prototype</strong> 里面的 <code>__proto__</code> 属性又指向哪里呢？</li></ul><h6 id="一个对象所属的构造函数"><a href="#一个对象所属的构造函数" class="headerlink" title="一个对象所属的构造函数"></a>一个对象所属的构造函数</h6><ul><li><p>每一个对象都有一个自己所属的构造函数</p></li><li><p>比如： 数组</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组本身也是一个对象</span></span><br><span class="line"><span class="keyword">var</span> arr = []</span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="title class_">Array</span>()</span><br></pre></td></tr></table></figure><ul><li>以上两种方式都是创造一个数组</li><li>我们就说数组所属的构造函数就是 <code>Array</code></li></ul></li><li><p>比如： 函数</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数本身也是一个对象</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> fun = <span class="keyword">new</span> <span class="title class_">Function</span>()</span><br></pre></td></tr></table></figure><ul><li>以上两种方式都是创造一个函数</li><li>我们就说函数所属的构造函数就是 <code>Function</code></li></ul></li></ul><h6 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h6><ul><li>对象的 <code>__proto__</code> 里面也有一个成员叫做 <strong><code>constructor</code></strong></li><li>这个属性就是指向当前这个对象所属的构造函数</li></ul><h6 id="链状结构"><a href="#链状结构" class="headerlink" title="链状结构"></a>链状结构</h6><ul><li>当一个对象我们不知道准确的是谁构造的时候，我们呢就把它看成 <code>Object</code> 的实例化对象</li><li>也就是说，我们的 <strong>构造函数 的 prototype 的 <code>__proto__</code></strong> 指向的是 <code>Object.prototype</code></li><li>那么 <code>Object.prototype</code> 也是个对象，那么它的 <code>__proto__</code> 又指向谁呢？</li><li>因为 <code>Object</code> 的 js 中的顶级构造函数，我们有一句话叫 <strong>万物皆对象</strong></li><li>所以 <code>Object.prototype</code> 就到顶了，<code>Object.prototype</code> 的 <code>__proto__</code> 就是 null</li></ul><h6 id="原型链的访问原则"><a href="#原型链的访问原则" class="headerlink" title="原型链的访问原则"></a>原型链的访问原则</h6><ul><li>我们之前说过，访问一个对象的成员的时候，自己没有就会去 <code>__proto__</code> 中找</li><li>接下来就是，如果 <code>__proto__</code> 里面没有就再去 <code>__proto__</code> 里面找</li><li>一直找到 <code>Object.prototype</code> 里面都没有，那么就会返回 <code>undefiend</code></li></ul><h6 id="对象的赋值"><a href="#对象的赋值" class="headerlink" title="对象的赋值"></a>对象的赋值</h6><ul><li>到这里，我们就会觉得，如果是赋值的话，那么也会按照原型链的规则来</li><li>但是： <strong>并不是！并不是！并不是！</strong> 重要的事情说三遍</li><li>赋值的时候，就是直接给对象自己本身赋值<ul><li>如果原先有就是修改</li><li>原先没有就是添加</li><li>不会和 <code>__proto__</code> 有关系</li></ul></li></ul><h5 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h5><h6 id="构造函数继承"><a href="#构造函数继承" class="headerlink" title="构造函数继承"></a>构造函数继承</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">name, age, classroom</span>) &#123;</span><br><span class="line">  <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name, age)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">classroom</span> = classroom</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br></pre></td></tr></table></figure><h6 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h6><p>构造函数继承+原型继承</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">say</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">name, age, classroom</span>) &#123;</span><br><span class="line">  <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name, age)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">classroom</span> = classroom</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;kerwin&#x27;</span>, <span class="number">100</span>, <span class="string">&#x27;1班&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="六-AJAX"><a href="#六-AJAX" class="headerlink" title="六. AJAX"></a>六. AJAX</h4><ul><li><code>ajax</code> 全名 <code>async javascript and XML</code></li><li>是前后台交互的能力</li><li>也就是我们客户端给服务端发送消息的工具，以及接受响应的工具</li><li>是一个 <strong>默认异步</strong> 执行机制的功能</li></ul><h5 id="AJAX-的优势"><a href="#AJAX-的优势" class="headerlink" title="AJAX 的优势"></a>AJAX 的优势</h5><ol><li>不需要插件的支持，原生 js 就可以使用</li><li>用户体验好（不需要刷新页面就可以更新数据）</li><li>减轻服务端和带宽的负担</li><li>缺点： 搜索引擎的支持度不够，因为数据都不在页面上，搜索引擎搜索不到</li></ol><h5 id="AJAX-的使用"><a href="#AJAX-的使用" class="headerlink" title="AJAX 的使用"></a>AJAX 的使用</h5><ul><li>在 js 中有内置的构造函数来创建 ajax 对象</li><li>创建 ajax 对象以后，我们就使用 ajax 对象的方法去发送请求和接受响应</li></ul><h6 id="创建一个-ajax-对象"><a href="#创建一个-ajax-对象" class="headerlink" title="创建一个 ajax 对象"></a>创建一个 ajax 对象</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// IE9及以上</span></span><br><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// IE9以下</span></span><br><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&#x27;Mricosoft.XMLHTTP&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>上面就是有了一个 ajax 对象</li><li>我们就可以使用这个 <code>xhr</code> 对象来发送 ajax 请求了</li></ul><h6 id="配置链接信息"><a href="#配置链接信息" class="headerlink" title="配置链接信息"></a>配置链接信息</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// xhr 对象中的 open 方法是来配置请求信息的</span></span><br><span class="line"><span class="comment">// 第一个参数是本次请求的请求方式 get / post / put / ...</span></span><br><span class="line"><span class="comment">// 第二个参数是本次请求的 url</span></span><br><span class="line"><span class="comment">// 第三个参数是本次请求是否异步，默认 true 表示异步，false 表示同步</span></span><br><span class="line"><span class="comment">// xhr.open(&#x27;请求方式&#x27;, &#x27;请求地址&#x27;, 是否异步)</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;./data.php&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>上面的代码执行完毕以后，本次请求的基本配置信息就写完了</li></ul><h6 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;./data.php&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 xhr 对象中的 send 方法来发送请求</span></span><br><span class="line">xhr.<span class="title function_">send</span>()</span><br></pre></td></tr></table></figure><ul><li>上面代码是把配置好信息的 ajax 对象发送到服务端</li></ul><h6 id="一个基本的-ajax-请求"><a href="#一个基本的-ajax-请求" class="headerlink" title="一个基本的 ajax 请求"></a>一个基本的 ajax 请求</h6><ul><li>一个最基本的 ajax 请求就是上面三步</li><li>但是光有上面的三个步骤，我们确实能把请求发送的到服务端</li><li>如果服务端正常的话，响应也能回到客户端</li><li>但是我们拿不到响应</li><li>如果想拿到响应，我们有两个前提条件<ol><li>本次 HTTP 请求是成功的，也就是我们之前说的 http 状态码为 200 ~ 299</li><li>ajax 对象也有自己的状态码，用来表示本次 ajax 请求中各个阶段</li></ol></li></ul><h6 id="ajax-状态码"><a href="#ajax-状态码" class="headerlink" title="ajax 状态码"></a>ajax 状态码</h6><ul><li>ajax 状态码 - <code>xhr.readyState</code></li><li>是用来表示一个 ajax 请求的全部过程中的某一个状态<ul><li><code>readyState === 0</code>： 表示未初始化完成，也就是 <code>open</code> 方法还没有执行</li><li><code>readyState === 1</code>： 表示配置信息已经完成，也就是执行完 <code>open</code> 之后</li><li><code>readyState === 2</code>： 表示 <code>send</code> 方法已经执行完成</li><li><code>readyState === 3</code>： 表示正在解析响应内容</li><li><code>readyState === 4</code>： 表示响应内容已经解析完毕，可以在客户端使用了</li></ul></li><li>这个时候我们就会发现，当一个 ajax 请求的全部过程中，只有当 <code>readyState === 4</code> 的时候，我们才可以正常使用服务端给我们的数据</li><li>所以，配合 http 状态码为 200 ~ 299<ul><li>一个 ajax 对象中有一个成员叫做 <code>xhr.status</code></li><li>这个成员就是记录本次请求的 http 状态码的</li></ul></li><li>两个条件都满足的时候，才是本次请求正常完成</li></ul><h6 id="readyStateChange"><a href="#readyStateChange" class="headerlink" title="readyStateChange"></a>readyStateChange</h6><ul><li><p>在 ajax 对象中有一个事件，叫做 <code>readyStateChange</code> 事件</p></li><li><p>这个事件是专门用来监听 ajax 对象的 <code>readyState</code> 值改变的的行为</p></li><li><p>也就是说只要 <code>readyState</code> 的值发生变化了，那么就会触发该事件</p></li><li><p>所以我们就在这个事件中来监听 ajax 的 <code>readyState</code> 是不是到 4 了</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;./data.php&#x27;</span>)</span><br><span class="line"></span><br><span class="line">xhr.<span class="title function_">send</span>()</span><br><span class="line"></span><br><span class="line">xhr.<span class="property">onreadyStateChange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 每次 readyState 改变的时候都会触发该事件</span></span><br><span class="line">  <span class="comment">// 我们就在这里判断 readyState 的值是不是到 4</span></span><br><span class="line">  <span class="comment">// 并且 http 的状态码是不是 200 ~ 299</span></span><br><span class="line">  <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; <span class="regexp">/^2\d&#123;2&#125;$/</span>.<span class="title function_">test</span>(xhr.<span class="property">status</span>)) &#123;</span><br><span class="line">    <span class="comment">// 这里表示验证通过</span></span><br><span class="line">    <span class="comment">// 我们就可以获取服务端给我们响应的内容了</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h6 id="responseText"><a href="#responseText" class="headerlink" title="responseText"></a>responseText</h6><ul><li><p>ajax 对象中的 <code>responseText</code> 成员</p></li><li><p>就是用来记录服务端给我们的响应体内容的</p></li><li><p>所以我们就用这个成员来获取响应体内容就可以</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;./data.php&#x27;</span>)</span><br><span class="line"></span><br><span class="line">xhr.<span class="title function_">send</span>()</span><br><span class="line"></span><br><span class="line">xhr.<span class="property">onreadyStateChange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; <span class="regexp">/^2\d&#123;2&#125;$/</span>.<span class="title function_">test</span>(xhr.<span class="property">status</span>)) &#123;</span><br><span class="line">    <span class="comment">// 我们在这里直接打印 xhr.responseText 来查看服务端给我们返回的内容</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="使用-ajax-发送请求时携带参数"><a href="#使用-ajax-发送请求时携带参数" class="headerlink" title="使用 ajax 发送请求时携带参数"></a>使用 ajax 发送请求时携带参数</h5><ul><li>我们使用 ajax 发送请求也是可以携带参数的</li><li>参数就是和后台交互的时候给他的一些信息</li><li>但是携带参数 get 和 post 两个方式还是有区别的</li></ul><h6 id="发送一个带有参数的-get-请求"><a href="#发送一个带有参数的-get-请求" class="headerlink" title="发送一个带有参数的 get 请求"></a>发送一个带有参数的 get 请求</h6><ul><li><p>get 请求的参数就直接在 url 后面进行拼接就可以</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"><span class="comment">// 直接在地址后面加一个 ?，然后以 key=value 的形式传递</span></span><br><span class="line"><span class="comment">// 两个数据之间以 &amp; 分割</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;./data.php?a=100&amp;b=200&#x27;</span>)</span><br><span class="line"></span><br><span class="line">xhr.<span class="title function_">send</span>()</span><br></pre></td></tr></table></figure><ul><li>这样服务端就能接受到两个参数</li><li>一个是 a，值是 100</li><li>一个是 b，值是 200</li></ul></li></ul><h6 id="发送一个带有参数的-post-请求"><a href="#发送一个带有参数的-post-请求" class="headerlink" title="发送一个带有参数的 post 请求"></a>发送一个带有参数的 post 请求</h6><ul><li><p>post 请求的参数是携带在请求体中的，所以不需要再 url 后面拼接</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;./data.php&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果是用 ajax 对象发送 post 请求，必须要先设置一下请求头中的 content-type</span></span><br><span class="line"><span class="comment">// 告诉一下服务端我给你的是一个什么样子的数据格式</span></span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;content-type&#x27;</span>, <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求体直接再 send 的时候写在 () 里面就行</span></span><br><span class="line"><span class="comment">// 不需要问号，直接就是 &#x27;key=value&amp;key=value&#x27; 的形式</span></span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="string">&#x27;a=100&amp;b=200&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><code>application/x-www-form-urlencoded</code> 表示的数据格式就是 <code>key=value&amp;key=value</code></li></ul></li></ul><h5 id="封装-ajax"><a href="#封装-ajax" class="headerlink" title="封装 ajax"></a>封装 ajax</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @作者: kerwin</span></span><br><span class="line"><span class="comment"> * @公众号: 大前端私房菜</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">queryStringify</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> obj) str += <span class="string">`<span class="subst">$&#123;k&#125;</span>=<span class="subst">$&#123;obj[k]&#125;</span>&amp;`</span></span><br><span class="line">  <span class="keyword">return</span> str.<span class="title function_">slice</span>(<span class="number">0</span>, -<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装 ajax</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ajax</span>(<span class="params">options</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> defaultoptions = &#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="attr">async</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">headers</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span><br><span class="line">    <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> &#123; url, method, <span class="keyword">async</span>, data, headers, success, error &#125; = &#123;</span><br><span class="line">    ...defaultoptions,</span><br><span class="line">    ...options,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    <span class="keyword">typeof</span> data === <span class="string">&#x27;object&#x27;</span> &amp;&amp;</span><br><span class="line">    headers[<span class="string">&#x27;content-type&#x27;</span>]?.<span class="title function_">indexOf</span>(<span class="string">&#x27;json&#x27;</span>) &gt; -<span class="number">1</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    data = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    data = <span class="title function_">queryStringify</span>(data)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果是 get 请求, 并且有参数, 那么直接组装一下 url 信息</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/^get$/i</span>.<span class="title function_">test</span>(method) &amp;&amp; data) url += <span class="string">&#x27;?&#x27;</span> + data</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4. 发送请求</span></span><br><span class="line">  <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">  xhr.<span class="title function_">open</span>(method, url, <span class="keyword">async</span>)</span><br><span class="line">  xhr.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="regexp">/^2\d&#123;2&#125;$/</span>.<span class="title function_">test</span>(xhr.<span class="property">status</span>)) &#123;</span><br><span class="line">      <span class="title function_">error</span>(<span class="string">`错误状态码:<span class="subst">$&#123;xhr.status&#125;</span>`</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 执行解析</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> result = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">      <span class="title function_">success</span>(result)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="title function_">error</span>(<span class="string">&#x27;解析失败 ! 因为后端返回的结果不是 json 格式字符串&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置请求头内的信息</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> headers) xhr.<span class="title function_">setRequestHeader</span>(k, headers[k])</span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/^get$/i</span>.<span class="title function_">test</span>(method)) &#123;</span><br><span class="line">    xhr.<span class="title function_">send</span>()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    xhr.<span class="title function_">send</span>(data)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">ajax</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/users&#x27;</span>,</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">  <span class="attr">async</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;kerwin&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">headers</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h5><ul><li><code>promise</code> 是一个 ES6 的语法</li><li>承诺的意思，是一个专门用来解决异步 <strong>回调地狱</strong> 的问题</li></ul><h6 id="回调地狱"><a href="#回调地狱" class="headerlink" title="回调地狱"></a>回调地狱</h6><ul><li><p>当一个回调函数嵌套一个回调函数的时候</p></li><li><p>就会出现一个嵌套结构</p></li><li><p>当嵌套的多了就会出现回调地狱的情况</p></li><li><p>比如我们发送三个 ajax 请求</p><ul><li>第一个正常发送</li><li>第二个请求需要第一个请求的结果中的某一个值作为参数</li><li>第三个请求需要第二个请求的结果中的某一个值作为参数</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">ajax</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;我是第一个请求&#x27;</span>,</span><br><span class="line">  success (res) &#123;</span><br><span class="line">    <span class="comment">// 现在发送第二个请求</span></span><br><span class="line">    <span class="title function_">ajax</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;我是第二个请求&#x27;</span>，</span><br><span class="line">      <span class="attr">data</span>: &#123; <span class="attr">a</span>: res.<span class="property">a</span>, <span class="attr">b</span>: res.<span class="property">b</span> &#125;,</span><br><span class="line">      success (res2) &#123;</span><br><span class="line">        <span class="comment">// 进行第三个请求</span></span><br><span class="line">        <span class="title function_">ajax</span>(&#123;</span><br><span class="line">          <span class="attr">url</span>: <span class="string">&#x27;我是第三个请求&#x27;</span>,</span><br><span class="line">          <span class="attr">data</span>: &#123; <span class="attr">a</span>: res2.<span class="property">a</span>, <span class="attr">b</span>: res2.<span class="property">b</span> &#125;,</span><br><span class="line">  success (res3) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(res3)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><strong>回调地狱，其实就是回调函数嵌套过多导致的</strong></p></li></ul><p><img src="%E7%AC%94%E8%AE%B0.assets/%E5%9B%9E%E8%B0%83%E5%9C%B0%E7%8B%B1.jpeg" alt=""></p><ul><li>当代码成为这个结构以后，已经没有维护的可能了</li><li>所以我们要把代码写的更加的艺术一些</li></ul><h6 id="PROMISE"><a href="#PROMISE" class="headerlink" title="PROMISE"></a>PROMISE</h6><ul><li><p>为了解决回调地狱</p></li><li><p>我们就要使用 promise 语法</p></li><li><p>语法：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="comment">// resolve 表示成功的回调</span></span><br><span class="line">  <span class="comment">// reject 表示失败的回调</span></span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="comment">// 成功的函数</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="comment">// 失败的函数</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></li><li><p>promise 就是一个语法</p><ul><li>我们的每一个异步事件，在执行的时候</li><li>都会有三个状态，执行中 / 成功 / 失败</li></ul></li><li><p>因为它包含了成功的回调函数</p></li><li><p>所以我们就可以使用 promise 来解决多个 ajax 发送的问题</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;第一个请求&#x27;</span>,</span><br><span class="line">    <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(res)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="comment">// 准备发送第二个请求</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">      <span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;第二个请求&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: &#123; <span class="attr">a</span>: res.<span class="property">a</span>, <span class="attr">b</span>: res.<span class="property">b</span> &#125;,</span><br><span class="line">        <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(res)</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="title function_">ajax</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;第三个请求&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: &#123; <span class="attr">a</span>: res.<span class="property">a</span>, <span class="attr">b</span>: res.<span class="property">b</span> &#125;,</span><br><span class="line">      <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></li></ul><h5 id="ASYNC-AWAIT"><a href="#ASYNC-AWAIT" class="headerlink" title="ASYNC/AWAIT"></a>ASYNC/AWAIT</h5><ul><li><p><code>async/await</code> 是一个 es7 的语法</p></li><li><p>这个语法是 <strong>回调地狱的终极解决方案</strong></p></li><li><p>语法：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> promise对象</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这个是一个特殊的函数方式</p></li><li><p>可以 await 一个 promise 对象</p></li><li><p><strong>可以把异步代码写的看起来像同步代码</strong></p></li><li><p>只要是一个 promiser 对象，那么我们就可以使用 <code>async/await</code> 来书写</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="title function_">ajax</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;第一个地址&#x27;</span>,</span><br><span class="line">      <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(res)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// res 就可以得到请求的结果</span></span><br><span class="line">  <span class="keyword">const</span> res2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="title function_">ajax</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;第二个地址&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: &#123; <span class="attr">a</span>: res.<span class="property">a</span>, <span class="attr">b</span>: res.<span class="property">b</span> &#125;,</span><br><span class="line">      <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(res)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> res3 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="title function_">ajax</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;第三个地址&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: &#123; <span class="attr">a</span>: res2.<span class="property">a</span>, <span class="attr">b</span>: res2.<span class="property">b</span> &#125;,</span><br><span class="line">      <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(res)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// res3 就是我们要的结果</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这样的异步代码写的就看起来像一个同步代码了</li></ul></li></ul><h5 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h5><p>​ <em>XMLHttpRequest 是一个设计粗糙的 API，配置和调用方式非常混乱， 而且基于事件的异步模型写起来不友好。</em></p><p>​ <strong>兼容性不好 polyfill: <a href="https://github.com/camsong/fetch-ie8">https://github.com/camsong/fetch-ie8</a></strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://localhost:3000/users&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> res.<span class="title function_">json</span>())</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://localhost:3000/users&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;kerwin&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> res.<span class="title function_">json</span>())</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://localhost:3000/users/5&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;PUT&#x27;</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;kerwin&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;456&#x27;</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> res.<span class="title function_">json</span>())</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://localhost:3000/users/5&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;DELETE&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> res.<span class="title function_">json</span>())</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//错误处理</span></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://localhost:3000/users1&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">ok</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">json</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(&#123;</span><br><span class="line">        <span class="attr">status</span>: res.<span class="property">status</span>,</span><br><span class="line">        <span class="attr">statusText</span>: res.<span class="property">statusText</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h5 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h5><p><strong>cookie 的特点</strong></p><ol><li>只能存储文本</li><li>单条存储有大小限制 4KB 左右<br>数量限制（一般浏览器，限制大概在 50 条左右）</li><li>读取有域名限制：不可跨域读取，只能由来自 写入 cookie 的 同一域名 的网页可进行读取。简单的讲就是，哪个服务器发给你的 cookie，只有哪个服务器有权利读取</li><li>时效限制：每个 cookie 都有时效，默认的有效期是，会话级别：就是当浏览器关闭，那么 cookie 立即销毁，但是我们也可以在存储的时候手动设置 cookie 的过期时间</li><li>路径限制：存 cookie 时候可以指定路径，只允许子路径读取外层 cookie，外层不能读取内层。</li></ol><h5 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h5><p>Jsonp(JSON with Padding) 是 json 的一种”使用模式”，可以让网页从别的域名（网站）那获取资料，即跨域读取数据。</p><p>为什么我们从不同的域（网站）访问数据需要一个特殊的技术( JSONP )呢？这是因为同源策略。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line">script.<span class="property">src</span> = <span class="string">&#x27;./kerwin.txt&#x27;</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script)</span><br></pre></td></tr></table></figure><h4 id="七-jQuery"><a href="#七-jQuery" class="headerlink" title="七. jQuery"></a>七. jQuery</h4><ul><li><code>jQuery</code> 是一个前端库，也是一个方法库</li><li>他里面封装着一些列的方法供我们使用</li><li>我们常用的一些方法它里面都有，我们可以直接拿来使用就行了</li><li><code>jQuery</code> 之所以好用，很多人愿意使用，是因为他的几个优点太强大了<ol><li>优质的选择器和筛选器</li><li>好用的隐式迭代</li><li>强大的链式编程</li></ol></li><li>因为这些东西的出现，很多时候我们要做的事情被 “一行代码解决”</li><li>接下来我们就来认识一下 <code>jQuery</code></li></ul><h5 id="1-jQuery-的使用"><a href="#1-jQuery-的使用" class="headerlink" title="1. jQuery 的使用"></a>1. jQuery 的使用</h5><ul><li><p><a href="https://jquery.com/">jQuery 官网</a></p></li><li><p><a href="http://jquery.cuishifeng.cn/">jQuery 方法大全中文网</a></p><ul><li>这个网站可以多看看</li><li>里面是 <code>jQuery</code> 的方法大全，而且是中文的</li></ul></li><li><p>我们要使用 <code>jQuery</code> 首先要下载一个</p><ul><li>可以去官网下载</li></ul></li><li><p>然后就是再页面里面引入 <code>jQuery.js</code> 就行了</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./jquery/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>然后就可以开始使用了</p></li><li><p><code>jQuery</code> 向全局暴露的接口就是 <code>jQuery</code> 或者 <code>$</code> 都行</p></li></ul><h5 id="2-选择器和筛选器"><a href="#2-选择器和筛选器" class="headerlink" title="2.选择器和筛选器"></a>2.选择器和筛选器</h5><ul><li>选择器和筛选器就是用来帮我们获取 DOM 元素的</li></ul><h6 id="2-1-选择器"><a href="#2-1-选择器" class="headerlink" title="2-1 选择器"></a>2-1 选择器</h6><ul><li><p><code>jQuery</code> 有着相当强大的选择器</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 按照 id 获取页面中的元素</span></span><br><span class="line"><span class="keyword">const</span> ele = <span class="title function_">jQuery</span>(<span class="string">&#x27;#box&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> ele = $(<span class="string">&#x27;#box&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>上面两个都可以按照 id 来获取元素</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 按照类名来选择</span></span><br><span class="line"><span class="keyword">const</span> eles = <span class="title function_">jQuery</span>(<span class="string">&#x27;.a&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> eles = $(<span class="string">&#x27;.a&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>上面就是按照类名来选择元素，可以获取到一组元素</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> lis = <span class="title function_">jQuery</span>(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> lis = $(<span class="string">&#x27;li&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>上面就是按照标签名来获取元素，可以获取到一组元素</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> eles = <span class="title function_">jQuery</span>(<span class="string">&#x27;ul &gt; li&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> eles = $(<span class="string">&#x27;ul &gt; li&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>上面就是按照选择器来获取元素，可以获取到一组元素</li></ul></li></ul><h6 id="2-2-特殊选择器"><a href="#2-2-特殊选择器" class="headerlink" title="2-2 特殊选择器"></a>2-2 特殊选择器</h6><ul><li><p>直接找到第一个</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;li:first&#x27;</span>) <span class="comment">// 找到所有 li 中的第一个</span></span><br></pre></td></tr></table></figure></li><li><p>直接找到最后一个</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;li:last&#x27;</span>) <span class="comment">// 找到所有 li 中的最后一个</span></span><br></pre></td></tr></table></figure></li><li><p>直接找到第几个</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;li:eq(3)&#x27;</span>) <span class="comment">// 找到所有 li 中索引为 3 的那个</span></span><br></pre></td></tr></table></figure></li><li><p>找到所有奇数个</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;li:odd&#x27;</span>) <span class="comment">// 找到所有 li 中索引为 奇数 的</span></span><br></pre></td></tr></table></figure></li><li><p>找到所有偶数</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;li:even&#x27;</span>) <span class="comment">// 找到所有 li 中索引为 偶数 的</span></span><br></pre></td></tr></table></figure></li></ul><h6 id="2-3-筛选器"><a href="#2-3-筛选器" class="headerlink" title="2-3 筛选器"></a>2-3 筛选器</h6><ul><li><p>jQuery 的筛选器就是在选择器选择到一组元素以后</p></li><li><p>对元素进行筛选，也可以对准确的某一个元素进行判断和获取</p><ol><li><p>找到所有元素中的第一个</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;li&#x27;</span>).<span class="title function_">first</span>()</span><br></pre></td></tr></table></figure></li><li><p>找到所有元素中的最后一个</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;li&#x27;</span>).<span class="title function_">last</span>()</span><br></pre></td></tr></table></figure></li><li><p>找到某一个元素的下一个兄弟元素</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;li:eq(3)&#x27;</span>).<span class="title function_">next</span>()</span><br></pre></td></tr></table></figure></li><li><p>找到某一个元素的上一个兄弟元素</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;li:eq(3)&#x27;</span>).<span class="title function_">prev</span>()</span><br></pre></td></tr></table></figure></li><li><p>找到某一个元素的后面的所有兄弟元素</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;li:eq(3)&#x27;</span>).<span class="title function_">nextAll</span>()</span><br></pre></td></tr></table></figure></li><li><p>找到某一个元素的前面的所有兄弟元素</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;li:eq(3)&#x27;</span>).<span class="title function_">prevAll</span>()</span><br></pre></td></tr></table></figure></li><li><p>找到某一个元素的父元素</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;li:eq(3)&#x27;</span>).<span class="title function_">parent</span>()</span><br></pre></td></tr></table></figure></li><li><p>找到某一个元素的所有结构父级，一直到 html</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;li:eq(3)&#x27;</span>).<span class="title function_">parents</span>()</span><br></pre></td></tr></table></figure></li><li><p>找到一组元素中的某一个</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在 li 的所有父级里面找到所有 body 标签</span></span><br><span class="line">$(<span class="string">&#x27;li&#x27;</span>).<span class="title function_">parents</span>().<span class="title function_">find</span>(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 找到 div 标签下所有后代元素中所有类名为 box 的元素</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">find</span>(<span class="string">&#x27;.box&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ol></li></ul><h5 id="3-属性操作"><a href="#3-属性操作" class="headerlink" title="3.属性操作"></a>3.属性操作</h5><ul><li><p>给一个元素添加某个属性</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 给 div 元素添加一个 id 属性，值是 box</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">prop</span>(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;box&#x27;</span>)</span><br><span class="line"><span class="comment">// 获取 div 的 id 属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">prop</span>(<span class="string">&#x27;id&#x27;</span>))</span><br></pre></td></tr></table></figure><ul><li>prop 这个方法只能添加元素自己本身就有的属性</li><li>如果是添加的自定义属性，不会显示在标签上，但是可以使用</li></ul></li><li><p>给一个元素添加某个自定义属性</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 给 div 添加一个 index 属性，值是 1</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;index&#x27;</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment">// 获取 div 的 index 属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;index&#x27;</span>))</span><br></pre></td></tr></table></figure></li><li><p>移除元素的某一个属性</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 移除元素自己本身的属性</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">removeProp</span>(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line"><span class="comment">// 移除元素的自定义属性</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">removeAttr</span>(<span class="string">&#x27;index&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><h5 id="4-操作元素的类名"><a href="#4-操作元素的类名" class="headerlink" title="4.操作元素的类名"></a>4.操作元素的类名</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断某一个元素有没有某一个 class</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">hasClass</span>(<span class="string">&#x27;box&#x27;</span>) <span class="comment">// true 表示该元素有 box 类名，false 表示该元素没有 box 类名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 给元素添加一个类名</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">addClass</span>(<span class="string">&#x27;box2&#x27;</span>) <span class="comment">// 给 div 元素添加一个 box2 类名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除元素的类名</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">removeClass</span>(<span class="string">&#x27;box&#x27;</span>) <span class="comment">// 移除 div 的 box 类名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 切换元素类名</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">toggleClass</span>(<span class="string">&#x27;box3&#x27;</span>) <span class="comment">// 如果元素本身有这个类名就移除，本身没有就添加</span></span><br></pre></td></tr></table></figure><h5 id="5-操作元素的内容"><a href="#5-操作元素的内容" class="headerlink" title="5. 操作元素的内容"></a>5. 操作元素的内容</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">给元素的 innerHTML 赋值</span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">html</span>(<span class="string">&#x27;&lt;span&gt;hello world&lt;/span&gt;&#x27;</span>)</span><br><span class="line"><span class="comment">// 获取元素的 innerHTML</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">html</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给元素的 innerText 赋值</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">text</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line"><span class="comment">// 获取元素的 innerText</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">text</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给元素的 value 赋值</span></span><br><span class="line">$(<span class="string">&#x27;input&#x27;</span>).<span class="title function_">val</span>(<span class="string">&#x27;admin&#x27;</span>)</span><br><span class="line"><span class="comment">// 获取元素的 value 值</span></span><br><span class="line">$(<span class="string">&#x27;input&#x27;</span>).<span class="title function_">val</span>()</span><br></pre></td></tr></table></figure><h5 id="6-操作样式"><a href="#6-操作样式" class="headerlink" title="6. 操作样式"></a>6. 操作样式</h5><ul><li><p>jQuery 操作元素的样式就是一个方法 <code>css</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 给元素设置一个 css 样式</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;width&#x27;</span>, <span class="string">&#x27;100px&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取元素的某一个样式</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;width&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给元素设置一组样式</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">css</span>(&#123;</span><br><span class="line">  <span class="attr">width</span>: <span class="string">&#x27;100px&#x27;</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="string">&#x27;200px&#x27;</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h5 id="7-元素尺寸"><a href="#7-元素尺寸" class="headerlink" title="7. 元素尺寸"></a>7. 元素尺寸</h5><ul><li><p>操作元素的宽和高</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取 div 元素内容位置的高，不包含 padding 和 border</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">height</span>()</span><br><span class="line"><span class="comment">// 设置 div 内容位置的高为 200px</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">height</span>(<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 div 元素内容位置的宽，不包含 padding 和 border</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">width</span>()</span><br><span class="line"><span class="comment">// 设置 div 内容位置的宽为 200px</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">width</span>(<span class="number">200</span>)</span><br></pre></td></tr></table></figure></li><li><p>获取元素的内置宽和高</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取 div 元素内容位置的高，包含 padding 不包含 border</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">innerHeight</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 div 元素内容位置的宽，包含 padding 不包含 border</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">innerWidth</span>()</span><br></pre></td></tr></table></figure></li><li><p>获取元素的外置宽和高</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取 div 元素内容位置的高，包含 padding 和 border</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">outerHeight</span>()</span><br><span class="line"><span class="comment">// 获取 div 元素内容位置的高，包含 padding 和 border 和 margin</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">outerHeight</span>(<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 div 元素内容位置的宽，包含 padding 和 border</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">outerWidth</span>()</span><br><span class="line"><span class="comment">// 获取 div 元素内容位置的高，包含 padding 和 border 和 margin</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">outerWidth</span>(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure></li></ul><h5 id="8-元素位置"><a href="#8-元素位置" class="headerlink" title="8. 元素位置"></a>8. 元素位置</h5><ul><li><p>元素相对页面的位置</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取 div 相对页面的位置</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">offset</span>() <span class="comment">// 得到的是以一个对象 &#123; left: 值, top: 值 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 给 div 设置相对页面的位置</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">offset</span>(&#123; <span class="attr">left</span>: <span class="number">100</span>, <span class="attr">top</span>: <span class="number">100</span> &#125;)</span><br><span class="line"><span class="comment">// 获取定位到一个距离页面左上角 100 100 的位置</span></span><br></pre></td></tr></table></figure></li><li><p>元素相对于父元素的偏移量</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取 div 相对于父元素的偏移量（定位的值）</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">position</span>()</span><br></pre></td></tr></table></figure></li><li><p>获取页面卷去的高度和宽度</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onscroll</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 获取浏览器卷去的高度</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="variable language_">window</span>).<span class="title function_">scrollTop</span>())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onscroll</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 获取浏览器卷去的宽度</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="variable language_">window</span>).<span class="title function_">scrollLeft</span>())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="9-元素事件"><a href="#9-元素事件" class="headerlink" title="9. 元素事件"></a>9. 元素事件</h5><ul><li><p>绑定事件的方法</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 给 button 按钮绑定一个点击事件</span></span><br><span class="line">$(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我被点击了&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给 button 按钮绑定一个点击事件，并且携带参数</span></span><br><span class="line">$(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, &#123; <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span> &#125;, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e) <span class="comment">// 所有的内容都再事件对象里面</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">data</span>) <span class="comment">// &#123; name: &#x27;Jack&#x27; &#125;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事件委托的方式给 button 绑定点击事件</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="string">&#x27;button&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// button 按钮</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事件委托的方式给 button 绑定点击事件并携带参数</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="string">&#x27;button&#x27;</span>, &#123; <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span> &#125;, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// button 按钮</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">data</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>移除事件</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 给 button 按钮绑定一个 点击事件，执行 handler 函数</span></span><br><span class="line">$(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, handler)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除事件使用 off</span></span><br><span class="line">$(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">off</span>(<span class="string">&#x27;click&#x27;</span>, handler)</span><br></pre></td></tr></table></figure></li><li><p>只能执行一次的事件</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这个事件绑定再 button 按钮身上</span></span><br><span class="line"><span class="comment">// 当执行过一次以后就不会再执行了</span></span><br><span class="line">$(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">one</span>(<span class="string">&#x27;click&#x27;</span>, handler)</span><br></pre></td></tr></table></figure></li><li><p>直接触发事件</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当代码执行到这里的时候，会自动触发一下 button 的 click 事件</span></span><br><span class="line">$(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">trigger</span>(<span class="string">&#x27;click&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><p><strong>可以直接使用的常见事件</strong></p><ul><li><p>可以直接使用的事件就是可以不利用 <code>on</code> 来绑定，直接就可以使用的事件方法</p></li><li><p><code>click</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 直接给 div 绑定一个点击事件</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我被点击了&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给 div 绑定一个点击事件并传递参数</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">click</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span> &#125;, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">data</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><code>dblclick</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 直接给 div 绑定一个双击事件</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">dblclick</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我被点击了&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给 div 绑定一个双击事件并传递参数</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">dblclick</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span> &#125;, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">data</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><code>scroll</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 直接给 div 绑定一个滚动事件</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">scroll</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我被点击了&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给 div 绑定一个滚动事件并传递参数</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">scroll</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span> &#125;, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">data</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h5 id="10-动画"><a href="#10-动画" class="headerlink" title="10.动画"></a>10.动画</h5><ul><li><p><code>show</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 给 div 绑定一个显示的动画</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">show</span>() <span class="comment">// 如果元素本身是 display none 的状态可以显示出来</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 给 div 绑定一个显示的动画</span></span><br><span class="line"><span class="comment">// 接受三个参数</span></span><br><span class="line"><span class="comment">// $(&#x27;div&#x27;).show(&#x27;毫秒&#x27;, &#x27;速度&#x27;, &#x27;回调函数&#x27;)</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">show</span>(<span class="number">1000</span>, <span class="string">&#x27;linear&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我显示完毕&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><code>hide</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 给 div 绑定一个隐藏的动画</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">hide</span>() <span class="comment">// 如果元素本身是 display block 的状态可以隐藏起来</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 给 div 绑定一个显示的动画</span></span><br><span class="line"><span class="comment">// 接受三个参数</span></span><br><span class="line"><span class="comment">// $(&#x27;div&#x27;).show(&#x27;毫秒&#x27;, &#x27;速度&#x27;, &#x27;回调函数&#x27;)</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">hide</span>(<span class="number">1000</span>, <span class="string">&#x27;linear&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我隐藏完毕&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><code>toggle</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 给 div 绑定一个切换的动画</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">hide</span>() <span class="comment">// 元素本身是显示，那么就隐藏，本身是隐藏那么就显示</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 给 div 绑定一个显示的动画</span></span><br><span class="line"><span class="comment">// 接受三个参数</span></span><br><span class="line"><span class="comment">// $(&#x27;div&#x27;).show(&#x27;毫秒&#x27;, &#x27;速度&#x27;, &#x27;回调函数&#x27;)</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">toggle</span>(<span class="number">1000</span>, <span class="string">&#x27;linear&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;动画执行完毕&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><code>animate</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个自定义动画</span></span><br><span class="line">$(<span class="string">&#x27;.show&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  $(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">animate</span>(</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">width</span>: <span class="number">500</span>,</span><br><span class="line">      <span class="attr">height</span>: <span class="number">300</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">1000</span>,</span><br><span class="line">    <span class="string">&#x27;linear&#x27;</span>,</span><br><span class="line">    <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;动画运动完毕&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><code>stop</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 立刻定制动画</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">stop</span>() <span class="comment">// 就停止再当前状态</span></span><br></pre></td></tr></table></figure></li><li><p><code>finish</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 立刻结束动画</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">finish</span>() <span class="comment">// 停止在动画结束状态</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="11-元素操作"><a href="#11-元素操作" class="headerlink" title="11. 元素操作"></a>11. 元素操作</h5><ul><li><p>创建一个元素</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div = $(<span class="string">&#x27;&lt;div&gt;&lt;/div&gt;&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>内部插入元素</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 向 div 元素中插入一个 p 元素，放在最后</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">append</span>($(<span class="string">&#x27;&lt;p&gt;&lt;/p&gt;&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把 p 元素插入到 div 中去，放在最后</span></span><br><span class="line">$(<span class="string">&#x27;&lt;p&gt;hello&lt;/p&gt;&#x27;</span>).<span class="title function_">appendTo</span>($(<span class="string">&#x27;div&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向 div 元素中插入一个 p 元素，放在最前</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">prepend</span>($(<span class="string">&#x27;&lt;p&gt;&lt;/p&gt;&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把 p 元素插入到 div 中去，放在最前</span></span><br><span class="line">$(<span class="string">&#x27;&lt;p&gt;hello&lt;/p&gt;&#x27;</span>).<span class="title function_">prependTo</span>($(<span class="string">&#x27;div&#x27;</span>))</span><br></pre></td></tr></table></figure></li><li><p>外部插入元素</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在 div 的后面插入一个元素 p</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">after</span>($(<span class="string">&#x27;&lt;p&gt;&lt;/p&gt;&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 div 的前面插入一个元素 p</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">before</span>($(<span class="string">&#x27;&lt;p&gt;&lt;/p&gt;&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把 p 元素插入到 div 元素的后面</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">insertAfter</span>($(<span class="string">&#x27;&lt;p&gt;&lt;/p&gt;&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把 p 元素插入到 div 元素的前面</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">insertBefore</span>($(<span class="string">&#x27;&lt;p&gt;&lt;/p&gt;&#x27;</span>))</span><br></pre></td></tr></table></figure></li><li><p>替换元素</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 把 div 元素替换成 p 元素</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">replaceWith</span>($(<span class="string">&#x27;&lt;p&gt;&lt;/p&gt;&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用 p 元素替换掉 div 元素</span></span><br><span class="line">$(<span class="string">&#x27;&lt;p&gt;&lt;/p&gt;&#x27;</span>).<span class="title function_">replaceAll</span>($(<span class="string">&#x27;div&#x27;</span>))</span><br></pre></td></tr></table></figure></li><li><p>删除元素</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除元素下的所有子节点</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">empty</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把自己从页面中移除</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">remove</span>()</span><br></pre></td></tr></table></figure></li><li><p>克隆元素</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 克隆一个 li 元素</span></span><br><span class="line"><span class="comment">// 接受两个参数</span></span><br><span class="line"><span class="comment">//   参数1： 自己身上的事件要不要复制，默认是 false</span></span><br><span class="line"><span class="comment">//   参数2： 所有子节点身上的事件要不要复制，默认是 true</span></span><br><span class="line">$(<span class="string">&#x27;li&#x27;</span>).<span class="title function_">clone</span>()</span><br></pre></td></tr></table></figure></li></ul><h5 id="12-发送-ajax-请求"><a href="#12-发送-ajax-请求" class="headerlink" title="12. 发送 ajax 请求"></a>12. 发送 ajax 请求</h5><ul><li><p>发送 get 请求</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 直接使用 $.get 方法来发送一个请求</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数一： 请求地址</span></span><br><span class="line"><span class="comment">参数二： 请求时携带的参数</span></span><br><span class="line"><span class="comment">参数三： 请求成功的回调</span></span><br><span class="line"><span class="comment">参数四： 返回的数据类型</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">$.<span class="title function_">get</span>(</span><br><span class="line">  <span class="string">&#x27;./ajax.php&#x27;</span>,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">10</span> &#125;,</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&#x27;json&#x27;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>发送 post 请求</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 直接使用 $.post 方法来发送一个请求</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数一： 请求地址</span></span><br><span class="line"><span class="comment">参数二： 请求时携带的参数</span></span><br><span class="line"><span class="comment">参数三： 请求成功的回调</span></span><br><span class="line"><span class="comment">参数四： 返回的数据类型</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">$.<span class="title function_">post</span>(</span><br><span class="line">  <span class="string">&#x27;./ajax.php&#x27;</span>,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">10</span> &#125;,</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&#x27;json&#x27;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>综合发送 ajax 请求</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 $.ajax 方法</span></span><br><span class="line"><span class="comment">// 只接受一个参数，是一个对象，这个对象对当前的请求进行所有的配置</span></span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;./ajax&#x27;</span>, <span class="comment">// 必填，请求的地址</span></span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;GET&#x27;</span>, <span class="comment">// 选填，请求方式，默认是 GET（忽略大小写）</span></span><br><span class="line">  <span class="attr">data</span>: &#123;&#125;, <span class="comment">// 选填，发送请求是携带的参数</span></span><br><span class="line">  <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>, <span class="comment">// 选填，期望返回值的数据类型</span></span><br><span class="line">  <span class="attr">async</span>: <span class="literal">true</span>, <span class="comment">// 选填，是否异步，默认是 true</span></span><br><span class="line">  <span class="title function_">success</span>(<span class="params"></span>) &#123;&#125;, <span class="comment">// 选填，成功的回调函数</span></span><br><span class="line">  <span class="title function_">error</span>(<span class="params"></span>) &#123;&#125;, <span class="comment">// 选填，失败的回调函数</span></span><br><span class="line">  <span class="attr">cache</span>: <span class="literal">true</span>, <span class="comment">// 选填，是否缓存，默认是 true</span></span><br><span class="line">  <span class="attr">context</span>: div, <span class="comment">// 选填，回调函数中的 this 指向，默认是 ajax 对象</span></span><br><span class="line">  <span class="attr">status</span>: &#123;&#125;, <span class="comment">// 选填，根据对应的状态码进行函数执行</span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">1000</span>, <span class="comment">// 选填，超时事件</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>发送一个 jsonp 请求</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 $.ajax 方法也可以发送 jsonp 请求</span></span><br><span class="line"><span class="comment">// 只不过 dataType 要写成 jsonp</span></span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;./jsonp.php&#x27;</span>,</span><br><span class="line">  <span class="attr">dataType</span>: <span class="string">&#x27;jsonp&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;,</span><br><span class="line">  <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">jsonp</span>: <span class="string">&#x27;cb&#x27;</span>, <span class="comment">// jsonp 请求的时候回调函数的 key</span></span><br><span class="line">  <span class="attr">jsonpCallback</span>: <span class="string">&#x27;fn&#x27;</span>, <span class="comment">// jsonp 请求的时候回调函数的名称</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h5 id="13-全局-ajax-函数"><a href="#13-全局-ajax-函数" class="headerlink" title="13. 全局 ajax 函数"></a>13. 全局 ajax 函数</h5><ul><li>全局的 <code>ajax</code> 函数我们也叫做 <strong><code>ajax</code> 的钩子函数</strong></li><li>也就是在一个 <code>ajax</code> 的整个过程中的某一个阶段执行的函数</li><li>而且每一个 <code>ajax</code> 请求都会触发</li></ul><h6 id="ajaxStart"><a href="#ajaxStart" class="headerlink" title="ajaxStart"></a>ajaxStart</h6><ul><li><p>任意一个请求在 <strong>开始</strong> 的时候就会触发这个函数</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="variable language_">window</span>).<span class="title function_">ajaxStart</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;有一个请求开始了&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h6 id="ajaxSend"><a href="#ajaxSend" class="headerlink" title="ajaxSend"></a>ajaxSend</h6><ul><li><p>任意一个请求在 <strong>准备 send 之前</strong> 会触发这个函数</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="variable language_">window</span>).<span class="title function_">ajaxSend</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;有一个要发送出去了&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h6 id="ajaxSuccess"><a href="#ajaxSuccess" class="headerlink" title="ajaxSuccess"></a>ajaxSuccess</h6><ul><li><p>任意一个请求在 <strong>成功</strong> 的时候就会触发这个函数</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="variable language_">window</span>).<span class="title function_">ajaxSuccess</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;有一个请求成功了&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h6 id="ajaxError"><a href="#ajaxError" class="headerlink" title="ajaxError"></a>ajaxError</h6><ul><li><p>任意一个请求在 <strong>失败</strong> 的时候就会触发这个函数</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="variable language_">window</span>).<span class="title function_">ajaxError</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;有一个请求失败了&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h6 id="ajaxComplete"><a href="#ajaxComplete" class="headerlink" title="ajaxComplete"></a>ajaxComplete</h6><ul><li><p>任意一个请求在 <strong>完成</strong> 的时候就会触发这个函数</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="variable language_">window</span>).<span class="title function_">ajaxComplete</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;有一个请求完成了&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h6 id="ajaxStop"><a href="#ajaxStop" class="headerlink" title="ajaxStop"></a>ajaxStop</h6><ul><li><p>任意一个请求在 <strong>结束</strong> 的时候就会触发这个函数</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="variable language_">window</span>).<span class="title function_">ajaxStop</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;有一个请求结束了&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h5 id="14-jQuery-的多库共存"><a href="#14-jQuery-的多库共存" class="headerlink" title="14.jQuery 的多库共存"></a>14.jQuery 的多库共存</h5><ul><li><p>我们一直在使用 <code>jQuery</code>，都没有什么问题</p></li><li><p>但是如果有一天，我们需要引入一个别的插件或者库的时候</p></li><li><p>人家也向外暴露的是 <code>$</code> 获取 <code>jQuery</code></p></li><li><p>那么，我们的 <code>jQuery</code> 就不能用了</p></li><li><p>那么这个时候，<code>jQuery</code> 为我们提供了一个多库并存的方法</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这个方法可以交还 jQuery 命名的控制权</span></span><br><span class="line">jQuery.<span class="title function_">noConflict</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面代码执行完毕以后 $ 这个变量就不能用了</span></span><br><span class="line"><span class="comment">// 但是 jQuery 可以使用</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($) <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(jQuery) <span class="comment">// 可以使用</span></span><br></pre></td></tr></table></figure></li><li><p>完全交出控制权</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这个方法可以交并且传递一个 true 的时候，会完全交出控制权</span></span><br><span class="line">jQuery.<span class="title function_">noConflict</span>(<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面代码执行完毕以后 $ 这个变量就不能用了</span></span><br><span class="line"><span class="comment">// jQuery 这个变量也不能用了</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($) <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(jQuery) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></li><li><p>更换控制权</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可以用一个变量来接受返回值，这个变量就是新的控制权</span></span><br><span class="line"><span class="keyword">var</span> aa = jQuery.<span class="title function_">noConflict</span>(<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接下来就可以把 aa 当作 jQuery 向外暴露的接口使用了</span></span><br><span class="line"><span class="title function_">aa</span>(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我被点击了&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h5 id="15-JQuery-的插件扩展"><a href="#15-JQuery-的插件扩展" class="headerlink" title="15 . JQuery 的插件扩展"></a>15 . JQuery 的插件扩展</h5><ul><li><code>jQuery</code> 确实很好很强大</li><li>但是也有一些方法是他没有的，我们的业务需求中有的时候会遇到一些它里面没有的方法</li><li>那么我们就可以给他扩展一些方法</li></ul><h6 id="扩展给他自己本身"><a href="#扩展给他自己本身" class="headerlink" title="扩展给他自己本身"></a>扩展给他自己本身</h6><ul><li><p>扩展给自己本身使用 <code>jQuery.extend</code> 这个方法</p></li><li><p>扩展完后的内容只能用 <code>$</code> 或者 <code>jQuery</code> 来调用</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// jQuery.extend 接受一个参数，是一个对象，对象里面是我们扩展的方法</span></span><br><span class="line">jQuery.<span class="title function_">extend</span>(&#123;</span><br><span class="line">  <span class="attr">max</span>: <span class="keyword">function</span> (<span class="params">...n</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, n)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">min</span>: <span class="keyword">function</span> (<span class="params">...n</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="property">min</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, n)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>扩展完毕我们就可以使用了</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> max = $.<span class="title function_">max</span>(<span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">1</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(max) <span class="comment">// 6</span></span><br><span class="line"><span class="keyword">const</span> min = $.<span class="title function_">min</span>(<span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">1</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(min) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li></ul><h6 id="扩展给元素集"><a href="#扩展给元素集" class="headerlink" title="扩展给元素集"></a>扩展给元素集</h6><ul><li><p>扩展完毕以后给元素的集合使用</p></li><li><p>也就是我们用 <code>$(&#39;li&#39;)</code> 这样的选择器获取到的元素集合来使用</p></li><li><p>使用 <code>jQuery.fn.extend()</code> 方法来扩展</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// jQuery.fn.extend() 接受一个参数，是一个对象，对象里面是我们扩展的方法</span></span><br><span class="line">jQuery.<span class="property">fn</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">  <span class="attr">checked</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// return 关键字是为了保证链式编程</span></span><br><span class="line">    <span class="comment">// 后面的代码才是业务逻辑</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">each</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">checked</span> = <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>扩展完毕我们就可以使用了</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 靠元素集合来调用</span></span><br><span class="line">$(<span class="string">&#x27;input[type=checkbox]&#x27;</span>).<span class="title function_">checked</span>()</span><br><span class="line"><span class="comment">// 执行完毕之后，所有的 复选框 就都是选中状态了</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="八-swiper"><a href="#八-swiper" class="headerlink" title="八. swiper"></a>八. swiper</h4><blockquote><p><a href="https://www.swiper.com.cn/">https://www.swiper.com.cn/</a></p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:3000/banner&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  <span class="title function_">render</span>(res)</span><br><span class="line">  <span class="title function_">initSwiper</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">list</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> oslides = list.<span class="title function_">map</span>(</span><br><span class="line">    <span class="function">(<span class="params">item</span>) =&gt;</span> <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;div class=&quot;swiper-slide&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;img src=&quot;<span class="subst">$&#123;item.imgUrl&#125;</span>&quot;/&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">            `</span></span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="comment">// console.log(oslides.join(&quot;&quot;))</span></span><br><span class="line"></span><br><span class="line">  $(<span class="string">&#x27;.swiper-wrapper&#x27;</span>).<span class="title function_">html</span>(oslides.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$.<span class="title function_">extend</span>(&#123;</span><br><span class="line">  <span class="attr">swiper</span>: <span class="keyword">function</span> (<span class="params">ele, obj</span>) &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Swiper</span>(ele, obj)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initSwiper</span>(<span class="params"></span>) &#123;</span><br><span class="line">  $.<span class="title function_">swiper</span>(<span class="string">&#x27;.kerwin&#x27;</span>, &#123;</span><br><span class="line">    <span class="comment">// direction: &#x27;vertical&#x27;, // 垂直切换选项</span></span><br><span class="line">    <span class="attr">loop</span>: <span class="literal">true</span>, <span class="comment">// 循环模式选项</span></span><br><span class="line">    <span class="comment">// 如果需要分页器</span></span><br><span class="line">    <span class="attr">pagination</span>: &#123;</span><br><span class="line">      <span class="attr">el</span>: <span class="string">&#x27;.swiper-pagination&#x27;</span>,</span><br><span class="line">      <span class="attr">clickable</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">observer</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="九-BootStrap"><a href="#九-BootStrap" class="headerlink" title="九. BootStrap"></a>九. BootStrap</h4><p><img src="%E7%AC%94%E8%AE%B0.assets/image-20220716160225615.png" alt="image-20220716160225615"></p><blockquote><p><a href="https://www.bootcss.com/">https://www.bootcss.com/</a></p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xl-3 col-lg-4 col-md-6 col-sm-12&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 18rem;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;card-img-top&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-body&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;card-title&quot;</span>&gt;</span>Card title<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;card-text&quot;</span>&gt;</span></span><br><span class="line">          Some quick example text to build on the card title and make up the</span><br><span class="line">          bulk of the card&#x27;s content.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>Go somewhere<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xl-3 col-lg-4 col-md-6 col-sm-12&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 18rem;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;card-img-top&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-body&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;card-title&quot;</span>&gt;</span>Card title<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;card-text&quot;</span>&gt;</span></span><br><span class="line">          Some quick example text to build on the card title and make up the</span><br><span class="line">          bulk of the card&#x27;s content.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>Go somewhere<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xl-3 col-lg-4 col-md-6 col-sm-12&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 18rem;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;card-img-top&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-body&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;card-title&quot;</span>&gt;</span>Card title<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;card-text&quot;</span>&gt;</span></span><br><span class="line">          Some quick example text to build on the card title and make up the</span><br><span class="line">          bulk of the card&#x27;s content.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>Go somewhere<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xl-3 col-lg-4 col-md-6 col-sm-12&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 18rem;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;card-img-top aaa&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-body&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;card-title&quot;</span>&gt;</span>Card title<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;card-text&quot;</span>&gt;</span></span><br><span class="line">          Some quick example text to build on the card title and make up the</span><br><span class="line">          bulk of the card&#x27;s content.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>Go somewhere<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="十-Sass"><a href="#十-Sass" class="headerlink" title="十. Sass"></a>十. Sass</h4><ul><li><p><a href="https://www.sass.hk/">SASS 官网</a></p></li><li><p>世界上最成熟、最稳定、最强大的专业级 CSS 扩展语言！</p></li><li><p><code>sass</code> 是一个 <code>css</code> 的预编译工具</p></li><li><p>也就是能够 <strong>更优雅</strong> 的书写 <code>css</code></p></li><li><p><code>sass</code> 写出来的东西 <strong>浏览器不认识</strong></p></li><li><p>依旧是要转换成 <code>css</code> 在浏览器中运行</p></li></ul><h5 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h5><ul><li><p>定义一个变量，在后面的代码中使用</p></li><li><p>使用 <code>$</code> 来定义变量</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个 $c 作为变量，值是 红色</span></span><br><span class="line"><span class="variable">$c</span>: red;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="comment">// 在使用 $c 这个变量</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$c</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>上面定义的变量全局都可以使用</p></li><li><p>我们也可以在规则块内定义私有变量</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="comment">// 这个 $w 变量只能在 h1 这个规则块中使用</span></span><br><span class="line">  <span class="variable">$w</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">$w</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h5><ul><li><p><code>sass</code> 里面我们最长用到的就是嵌套了</p></li><li><p>而且相当的好用</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译结果</span></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这个就是嵌套，理论上可以无限嵌套下去</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">90px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">div</span> &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line"></span><br><span class="line">      <span class="selector-tag">p</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">70px</span>;</span><br><span class="line"></span><br><span class="line">        <span class="selector-tag">span</span>: &#123;</span><br><span class="line">          <span class="attribute">color</span>: red;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h6 id="嵌套中的-amp"><a href="#嵌套中的-amp" class="headerlink" title="嵌套中的 &amp;"></a>嵌套中的 &amp;</h6><ul><li><p>在嵌套中还有一个标识符是 <code>&amp;</code> 我们可以使用</p></li><li><p>先来看一个例子</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我想的是 div 被鼠标悬停的时候 width 变成 200</span></span><br><span class="line"><span class="comment">// 但是编译结果却是</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>和预想的结果不一样了</p></li><li><p>这个时候就要用到 <code>&amp;</code> 来连接了</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"></span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译结果</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这个时候就和我需要的一样了</p></li></ul><h6 id="群组嵌套"><a href="#群组嵌套" class="headerlink" title="群组嵌套"></a>群组嵌套</h6><ul><li><p>群组嵌套就是多个标签同时嵌套</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.box1</span>,</span><br><span class="line">  <span class="selector-class">.box2</span>,</span><br><span class="line">  <span class="selector-class">.box3</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译结果</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-class">.box1</span>,</span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-class">.box2</span>,</span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-class">.box3</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>还有一种就是多个标签同时嵌套一个标签</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>,</span><br><span class="line"><span class="selector-tag">h2</span>,</span><br><span class="line"><span class="selector-tag">h3</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译结果</span></span><br><span class="line"><span class="selector-tag">h1</span>,</span><br><span class="line"><span class="selector-tag">h2</span>,</span><br><span class="line"><span class="selector-tag">h3</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h1</span> <span class="selector-class">.box</span>,</span><br><span class="line"><span class="selector-tag">h2</span> <span class="selector-class">.box</span>,</span><br><span class="line"><span class="selector-tag">h3</span> <span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="混入"><a href="#混入" class="headerlink" title="混入"></a>混入</h5><ul><li><p>也叫 <strong>混合器</strong></p></li><li><p>其实就是定义一个 <strong><span style="color: red;">“函数”</span></strong> 在 <code>scss</code> 文件中使用</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个混合器使用  @mixin 关键字</span></span><br><span class="line"><span class="keyword">@mixin</span> radius &#123;</span><br><span class="line">  -webkit-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  -moz-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  -ms-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  -o-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>上面是定义好的一个混合器</p></li><li><p>他是不会被编译的，只有当你使用了他以后，才会被编译</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用混合器使用 @include 关键字</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">@include</span> radius;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这个就是吧刚才定义的混合器拿过来使用</p></li><li><p>编译结果</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  -webkit-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  -moz-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  -ms-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  -o-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h6 id="混合器传参"><a href="#混合器传参" class="headerlink" title="混合器传参"></a>混合器传参</h6><ul><li><p>我们既然说了，混合器就像一个 “函数” 一样，那么就一定可以像 “函数” 一样传递参数</p></li><li><p>和 “函数” 的使用方式一样，在定时的时候是 “形参”，在调用的时候是 “实参”</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义混合器</span></span><br><span class="line"><span class="keyword">@mixin</span> my_transition(<span class="variable">$pro</span>, <span class="variable">$dur</span>, <span class="variable">$delay</span>, <span class="variable">$tim</span>) &#123;</span><br><span class="line">  -webkit-<span class="attribute">transition</span>: <span class="variable">$pro</span> <span class="variable">$dur</span> <span class="variable">$delay</span> <span class="variable">$tim</span>;</span><br><span class="line">  -moz-<span class="attribute">transition</span>: <span class="variable">$pro</span> <span class="variable">$dur</span> <span class="variable">$delay</span> <span class="variable">$tim</span>;</span><br><span class="line">  -ms-<span class="attribute">transition</span>: <span class="variable">$pro</span> <span class="variable">$dur</span> <span class="variable">$delay</span> <span class="variable">$tim</span>;</span><br><span class="line">  -o-<span class="attribute">transition</span>: <span class="variable">$pro</span> <span class="variable">$dur</span> <span class="variable">$delay</span> <span class="variable">$tim</span>;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="variable">$pro</span> <span class="variable">$dur</span> <span class="variable">$delay</span> <span class="variable">$tim</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用这个混合器的时候传递 “实参”</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">@include</span> my_transition(all, <span class="number">1s</span>, <span class="number">0s</span>, linear);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编译结果</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  -webkit-<span class="attribute">transition</span>: all <span class="number">1s</span> <span class="number">0s</span> linear;</span><br><span class="line">  -moz-<span class="attribute">transition</span>: all <span class="number">1s</span> <span class="number">0s</span> linear;</span><br><span class="line">  -ms-<span class="attribute">transition</span>: all <span class="number">1s</span> <span class="number">0s</span> linear;</span><br><span class="line">  -o-<span class="attribute">transition</span>: all <span class="number">1s</span> <span class="number">0s</span> linear;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">1s</span> <span class="number">0s</span> linear;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>写了多少个 “形参”，那么调用的时候就要传递多少个 “实参”</p></li><li><p>不然会报错的</p></li></ul><h6 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h6><ul><li><p>我们在定义混合器的时候，也可以给一些参数写一些默认值</p></li><li><p>这样一来，就可以不传递 “实参” 了</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置一些带有默认值的参数</span></span><br><span class="line"><span class="keyword">@mixin</span> my_transition(<span class="variable">$dur</span>: <span class="number">1s</span>, <span class="variable">$pro</span>: all, <span class="variable">$delay</span>: <span class="number">0s</span>, <span class="variable">$tim</span>: linear) &#123;</span><br><span class="line">  -webkit-<span class="attribute">transition</span>: <span class="variable">$dur</span> <span class="variable">$pro</span> <span class="variable">$delay</span> <span class="variable">$tim</span>;</span><br><span class="line">  -moz-<span class="attribute">transition</span>: <span class="variable">$dur</span> <span class="variable">$pro</span> <span class="variable">$delay</span> <span class="variable">$tim</span>;</span><br><span class="line">  -ms-<span class="attribute">transition</span>: <span class="variable">$dur</span> <span class="variable">$pro</span> <span class="variable">$delay</span> <span class="variable">$tim</span>;</span><br><span class="line">  -o-<span class="attribute">transition</span>: <span class="variable">$dur</span> <span class="variable">$pro</span> <span class="variable">$delay</span> <span class="variable">$tim</span>;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="variable">$dur</span> <span class="variable">$pro</span> <span class="variable">$delay</span> <span class="variable">$tim</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用的时候，如果你不传递，那么就是使用默认值</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用的时候，只传递一个，剩下的使用默认值</span></span><br><span class="line">  <span class="keyword">@include</span> my_transition(<span class="number">2s</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编译结果</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  -webkit-<span class="attribute">transition</span>: <span class="number">2s</span> all <span class="number">0s</span> linear;</span><br><span class="line">  -moz-<span class="attribute">transition</span>: <span class="number">2s</span> all <span class="number">0s</span> linear;</span><br><span class="line">  -ms-<span class="attribute">transition</span>: <span class="number">2s</span> all <span class="number">0s</span> linear;</span><br><span class="line">  -o-<span class="attribute">transition</span>: <span class="number">2s</span> all <span class="number">0s</span> linear;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">2s</span> all <span class="number">0s</span> linear;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="继承-1"><a href="#继承-1" class="headerlink" title="继承"></a>继承</h5><ul><li><p>在 <code>sass</code> 里面使用继承可以大大的提高开发效率</p></li><li><p>其实继承很简单，就是把之前写过的选择器里面的内容直接拿过来一份</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这个是之前写过的一个规则样式表</p></li><li><p>接下来我要写另外一个样式了，发现我要写的一些内容和之前这个 <code>div</code> 一样，并且还有一些我自己的内容</p></li><li><p>那么我就可以把这个样式表先继承下来，再写我自己的内容就好了</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> div;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编译结果</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>,</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="导入文件"><a href="#导入文件" class="headerlink" title="导入文件"></a>导入文件</h5><ul><li><p>我们刚才学过了定义变量，定义混合器</p></li><li><p>而这两个内容在定义过以后，如果没有使用，是不会被编译出内容的</p></li><li><p>所以我们可以把变量单独写一个文件，混合器单独写一个文件，然后直接导入后使用</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 我是 variable.scss</span></span><br><span class="line"><span class="variable">$w</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="variable">$h</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="variable">$c</span>: pink;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我是 mixin.scss</span></span><br><span class="line"><span class="keyword">@mixin</span> my_transition(<span class="variable">$dur</span>: <span class="number">1s</span>, <span class="variable">$pro</span>: all, <span class="variable">$delay</span>: <span class="number">0s</span>, <span class="variable">$tim</span>: linear) &#123;</span><br><span class="line">  -webkit-<span class="attribute">transition</span>: <span class="variable">$dur</span> <span class="variable">$pro</span> <span class="variable">$delay</span> <span class="variable">$tim</span>;</span><br><span class="line">  -moz-<span class="attribute">transition</span>: <span class="variable">$dur</span> <span class="variable">$pro</span> <span class="variable">$delay</span> <span class="variable">$tim</span>;</span><br><span class="line">  -ms-<span class="attribute">transition</span>: <span class="variable">$dur</span> <span class="variable">$pro</span> <span class="variable">$delay</span> <span class="variable">$tim</span>;</span><br><span class="line">  -o-<span class="attribute">transition</span>: <span class="variable">$dur</span> <span class="variable">$pro</span> <span class="variable">$delay</span> <span class="variable">$tim</span>;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="variable">$dur</span> <span class="variable">$pro</span> <span class="variable">$delay</span> <span class="variable">$tim</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@mixin</span> radius &#123;</span><br><span class="line">  -webkit-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  -moz-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  -ms-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  -o-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>然后在我们的主要文件中把这个两个文件导入进来就行了</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 我是 index.scss</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;./variable.scss&#x27;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;./mixin.scss&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">$w</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="variable">$h</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="variable">$c</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">@include</span> radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> my_transition;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编译结果</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">  -webkit-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  -moz-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  -ms-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  -o-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  -webkit-<span class="attribute">transition</span>: <span class="number">1s</span> all <span class="number">0s</span> linear;</span><br><span class="line">  -moz-<span class="attribute">transition</span>: <span class="number">1s</span> all <span class="number">0s</span> linear;</span><br><span class="line">  -ms-<span class="attribute">transition</span>: <span class="number">1s</span> all <span class="number">0s</span> linear;</span><br><span class="line">  -o-<span class="attribute">transition</span>: <span class="number">1s</span> all <span class="number">0s</span> linear;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">1s</span> all <span class="number">0s</span> linear;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown</title>
      <link href="/2022/09/01/markdown/"/>
      <url>/2022/09/01/markdown/</url>
      
        <content type="html"><![CDATA[<h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Markdown 是一种轻量级标记语言，可用于将格式元素添加到纯文本文档。Markdown 由<a href="https://daringfireball.net/projects/markdown/">John Gruber</a>于 2004 年创建，现在是世界上最受欢迎的标记语言之一。</p><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><blockquote><p>要创建标题，请在单词或短语前添加数字符号 (<code>#</code> )。您使用的数字符号的数量应与标题级别相对应。</p><p>例如，要创建三级标题 ( <code>&lt;h3&gt;</code>)，请使用三个数字符号（例如，<code>### My Header</code>）。</p></blockquote><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"></span><br><span class="line"><span class="section">#### 四级标题</span></span><br><span class="line"></span><br><span class="line"><span class="section">##### 五级标题</span></span><br><span class="line"></span><br><span class="line"><span class="section">###### 六级标题</span></span><br></pre></td></tr></table></figure><h2 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h2><blockquote><p>要创建段落，请使用空行分隔一行或多行文本。</p></blockquote><p>我真的很喜欢使用 Markdown。</p><h2 id="换行符"><a href="#换行符" class="headerlink" title="换行符"></a>换行符</h2><blockquote><p>要创建换行符或换行符 ( <code>&lt;br&gt;</code>)，请以两个或多个空格结束一行，然后键入 return。</p></blockquote><p>这样做：<br><code>这是第一行&lt;br&gt;这是第二行</code></p><p>渲染输出如下：<br>这是第一行<br>这是第二行</p><h2 id="强调-加粗"><a href="#强调-加粗" class="headerlink" title="强调(加粗)"></a>强调(加粗)</h2><blockquote><p>要加粗文本，请在单词或短语前后添加两个星号或下划线。<br>要在单词中间加粗以强调重点，请在字母周围添加两个不带空格的星号。</p></blockquote><p>这样做：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">我只喜欢**粗体**字&lt;br&gt;</span><br><span class="line">我__喜欢__你</span><br></pre></td></tr></table></figure><p>渲染输出如下：<br>我只喜欢<strong>粗体</strong>字<br><br>我<strong>喜欢</strong>你</p><h2 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h2><blockquote><p>要使文本变为斜体，请在单词或短语前后添加一个星号或下划线。<br>为了强调单词中间的斜体，请在字母周围添加一个不带空格的星号。</p></blockquote><p>这样做：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">我也喜欢*斜体*字&lt;br&gt;</span><br><span class="line">是吗，真的喜欢_斜体_字吗？</span><br></pre></td></tr></table></figure><p>渲染输出如下：<br>我也喜欢<em>斜体</em>字<br><br>是吗，真的喜欢<em>斜体</em>字吗？</p><h2 id="快引用"><a href="#快引用" class="headerlink" title="快引用"></a>快引用</h2><blockquote><p>要创建块引用，请在段落前添加一个<code>&gt;</code>。</p></blockquote><p>这样做：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; 这是一个房子</span></span><br></pre></td></tr></table></figure><p>渲染的输出如下所示：</p><blockquote><p>这是一个房子</p></blockquote><h2 id="带有多个段落的快引用"><a href="#带有多个段落的快引用" class="headerlink" title="带有多个段落的快引用"></a>带有多个段落的快引用</h2><p>块引用可以包含多个段落。&gt;在段落之间的空白行上添加一个。</p><p>这样做：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;多萝西跟着她穿过了她城堡里许多漂亮的房间。</span><br><span class="line">&gt;</span><br><span class="line">&gt;女巫吩咐她清理锅碗瓢盆，打扫地板，用木头生火。</span><br></pre></td></tr></table></figure><p>渲染的输出如下所示：</p><blockquote><p>多萝西跟着她穿过了她城堡里许多漂亮的房间。</p><p>女巫吩咐她清理锅碗瓢盆，打扫地板，用木头生火。</p></blockquote><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><blockquote><p>要创建有序列表，请添加带有数字后跟句点的行项目。数字不必按数字顺序排列，但列表应以数字一开头。</p></blockquote><p>这样做：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 第一项</span><br><span class="line"><span class="bullet">2.</span> 第二项</span><br><span class="line"><span class="bullet">3.</span> 第三项</span><br></pre></td></tr></table></figure><p>渲染的输出如下所示：</p><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><blockquote><p>要创建无序列表，请在行项目前添加破折号 ( -)、星号 ( *) 或加号 ( +)。缩进一项或多项以创建嵌套列表。</p></blockquote><p>这样做：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> 第一项</span><br><span class="line"><span class="bullet">-</span> 第二项</span><br><span class="line"><span class="bullet">-</span> 第三项</span><br><span class="line"><span class="bullet">-</span> 第四项</span><br></pre></td></tr></table></figure><p>渲染的输出如下所示：</p><ul><li>第一项</li><li>第二项</li><li>第三项</li><li>第四项</li></ul><h2 id="在列表中添加元素"><a href="#在列表中添加元素" class="headerlink" title="在列表中添加元素"></a>在列表中添加元素</h2><blockquote><p>要在列表中添加另一个元素同时保持列表的连续性，请将元素缩进四个空格或一个制表符，如以下示例所示。</p></blockquote><h3 id="段落-1"><a href="#段落-1" class="headerlink" title="段落"></a>段落</h3><p>这样做：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 这是第一个列表项。</span><br><span class="line">- 这是第二个列表项。</span><br><span class="line"></span><br><span class="line">    我需要在第二个列表项下方添加另一段。</span><br><span class="line"></span><br><span class="line">- 这是第三个列表项。</span><br></pre></td></tr></table></figure><p>渲染的输出如下所示：</p><ul><li>这是第一个列表项。</li><li><p>这是第二个列表项。</p><p>我需要在第二个列表项下方添加另一段。</p></li><li><p>这是第三个列表项。</p></li></ul><h3 id="快引用-1"><a href="#快引用-1" class="headerlink" title="快引用"></a>快引用</h3><p>这样做：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* 这是第一个列表项。</span><br><span class="line">* 这是第二个列表项。</span><br><span class="line"></span><br><span class="line">    &gt;块引用在第二个列表项下方看起来很棒。</span><br><span class="line"></span><br><span class="line">* 这是第三个列表项。</span><br></pre></td></tr></table></figure><p>渲染的输出如下所示：</p><ul><li>这是第一个列表项。</li><li><p>这是第二个列表项。</p><blockquote><p>块引用在第二个列表项下方看起来很棒。</p></blockquote></li><li><p>这是第三个列表项。</p></li></ul><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><blockquote><p>代码块通常缩进四个空格或一个制表符。当它们在列表中时，将它们缩进八个空格或两个制表符。</p></blockquote><p>这样做：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 打开文件。</span><br><span class="line">2. 在第 21 行找到以下代码块：</span><br><span class="line"></span><br><span class="line">        &lt;html&gt;</span><br><span class="line">          &lt;head&gt;</span><br><span class="line">             &lt;title&gt;Test&lt;/title&gt;</span><br><span class="line">          &lt;/head&gt;</span><br><span class="line">3. 更新标题以匹配您网站的名称</span><br></pre></td></tr></table></figure><p>渲染的输出如下所示：</p><ol><li>打开文件。</li><li><p>在第 21 行找到以下代码块：</p><pre><code>&lt;html&gt;  &lt;head&gt;     &lt;title&gt;Test&lt;/title&gt;  &lt;/head&gt;</code></pre></li><li><p>更新标题以匹配您网站的名称</p></li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><blockquote><p>要将单词或短语表示为代码，请将其括在反引号 ( `) 中。</p></blockquote><p>这样做：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这是一个`apple`</span><br></pre></td></tr></table></figure><p>渲染的输出如下所示：</p><p>这是一个<code>apple</code></p><h2 id="转义反引号"><a href="#转义反引号" class="headerlink" title="转义反引号"></a>转义反引号</h2><blockquote><p>如果要表示为代码的单词或短语包含一个或多个反引号，则可以通过将单词或短语括在双反引号 ( ``) 中来对其进行转义。</p></blockquote><p>这样做：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">``Use `code` in your Markdown file.``</span><br></pre></td></tr></table></figure><p>渲染的输出如下所示：</p><p><code>Use `code` in your Markdown file.</code></p><h2 id="代码块-1"><a href="#代码块-1" class="headerlink" title="代码块"></a>代码块</h2><blockquote><p>要创建代码块，请将块的每一行缩进至少四个空格或一个制表符。</p></blockquote><p>这样做：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>渲染的输出如下所示：</p><pre><code>&lt;html&gt;  &lt;head&gt;  &lt;/head&gt;&lt;/html&gt;</code></pre><h2 id="水平规则"><a href="#水平规则" class="headerlink" title="水平规则"></a>水平规则</h2><blockquote><p>要创建水平线，请在一行上单独使用三个或更多星号 ( ***)、破折号 ( —-) 或下划线 ( ___)。</p></blockquote><p>这样做：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">***</span><br><span class="line">---</span><br><span class="line">____</span><br></pre></td></tr></table></figure><p>渲染的输出如下所示：</p><hr><hr><hr><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><blockquote><p>要创建链接，请将链接文本括在括号中（例如，[baidu]），然后紧跟在括号中的 URL（例如，(<a href="https://baidu.com)）。">https://baidu.com)）。</a></p></blockquote><p>这样做：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">我最喜欢的网址是[百度](https://www.baidu.com)</span><br></pre></td></tr></table></figure><p>渲染的输出如下所示：</p><p>我最喜欢的网址是<a href="https://www.baidu.com">百度</a></p><h2 id="添加标题"><a href="#添加标题" class="headerlink" title="添加标题"></a>添加标题</h2><blockquote><p>您可以选择为链接添加标题。当用户将鼠标悬停在链接上时，这将显示为工具提示。要添加标题，请在 URL 后用引号将其括起来。</p></blockquote><p>这样做：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">我最喜欢的网址是[百度](https://www.baidu.com &quot;最好的搜索&quot;)</span><br></pre></td></tr></table></figure><p>渲染的输出如下所示：</p><p>我最喜欢的网址是<a href="https://www.baidu.com" title="最好的搜索">百度</a></p><h2 id="URL-和电子邮件地址"><a href="#URL-和电子邮件地址" class="headerlink" title="URL 和电子邮件地址"></a>URL 和电子邮件地址</h2><blockquote><p>要将 URL 或电子邮件地址快速转换为链接，请将其括在尖括号中。</p></blockquote><p>这样做：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;https://www.markdownguide.org&gt;</span><br><span class="line">&lt;fake@example.com&gt;</span><br></pre></td></tr></table></figure><p>渲染的输出如下所示：</p><p><a href="https://www.markdownguide.org">https://www.markdownguide.org</a><br><br><a href="&#x6d;&#x61;&#105;&#x6c;&#116;&#x6f;&#x3a;&#102;&#97;&#107;&#101;&#x40;&#101;&#120;&#x61;&#109;&#112;&#108;&#101;&#x2e;&#x63;&#111;&#109;">&#102;&#97;&#107;&#101;&#x40;&#101;&#120;&#x61;&#109;&#112;&#108;&#101;&#x2e;&#x63;&#111;&#109;</a></p><h2 id="格式化链接"><a href="#格式化链接" class="headerlink" title="格式化链接"></a>格式化链接</h2><blockquote><p>要强调链接，请在方括号和圆括号前后添加星号。要将链接表示为 code，请在括号中添加反引号。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">我喜欢 **[百度](https://www.baidu.com)**.</span><br></pre></td></tr></table></figure><p>渲染的输出如下所示：</p><p>我喜欢 <strong><a href="https://www.baidu.com">百度</a></strong>.</p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><blockquote><p>要添加图片，请添加感叹号 ( !)，后跟括号中的替代文本，以及括号中图片资源的路径或 URL。您可以选择在路径或 URL 后添加引号中的标题。</p></blockquote><p>这样做：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![卡通图片](https://npm.elemecdn.com/akilar-candyassets/image/cover6.webp)</span><br></pre></td></tr></table></figure><p>渲染的输出如下所示：</p><p><img src="https://npm.elemecdn.com/akilar-candyassets/image/cover6.webp" alt="卡通图片"></p><h2 id="链接图像"><a href="#链接图像" class="headerlink" title="链接图像"></a>链接图像</h2><blockquote><p>要添加指向图像的链接，请将图像的 Markdown 括在括号中，然后将链接添加到括号中。</p></blockquote><p>这样做：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[![卡通图片](https://npm.elemecdn.com/akilar-candyassets/image/cover6.webp)](https://www.baidu.com)</span><br></pre></td></tr></table></figure><p>渲染的输出如下所示：</p><p><a href="https://www.baidu.com"><img src="https://npm.elemecdn.com/akilar-candyassets/image/cover6.webp" alt="卡通图片"></a></p><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><blockquote><p>要显示原本用于在 Markdown 文档中格式化文本的文字字符，请在字符前面添加反斜杠 (<code>\</code>)。</p></blockquote><p>这样做：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\* 如果没有反斜杠，这将是无序列表中的项目符号。</span><br></pre></td></tr></table></figure><p>渲染的输出如下所示：</p><p>* 如果没有反斜杠，这将是无序列表中的项目符号。</p><blockquote><p>您可以使用反斜杠来转义以下字符:<br>\ ` * _ {} [] &lt;&gt; () # + - . ! |</p></blockquote><h2 id="表"><a href="#表" class="headerlink" title="表"></a>表</h2><blockquote><p>要添加表格，请使用三个或更多连字符 ( —-) 创建每一列的标题，并使用竖线 ( |) 分隔每一列。为了兼容性，您还应该在行的任一端添加一个管道。<br>这样做：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">| 语法 | 解析 |</span><br><span class="line">| ---- | ---- |</span><br><span class="line">| 1    | 2    |</span><br><span class="line">| 3    | 4    |</span><br></pre></td></tr></table></figure><p>渲染的输出如下所示：</p><div class="table-container"><table><thead><tr><th>语法</th><th>解析</th></tr></thead><tbody><tr><td>1</td><td>2</td></tr><tr><td>3</td><td>4</td></tr></tbody></table></div><h2 id="表格内容定位"><a href="#表格内容定位" class="headerlink" title="表格内容定位"></a>表格内容定位</h2><blockquote><p>您可以通过在标题行内连字符的左侧、右侧或两侧添加冒号 (<code>:</code>) 来将列中的文本向左、向右或居中对齐。</p></blockquote><p>这样做：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">| 句法 | 描述 | 测试文本 |</span><br><span class="line">| :--- | :--: | -------: |</span><br><span class="line">| 标题 | 标题 | 这是这个 |</span><br><span class="line">| 段落 | 文本 |   和更多 |</span><br></pre></td></tr></table></figure><p>渲染的输出如下所示：</p><div class="table-container"><table><thead><tr><th style="text-align:left">句法</th><th style="text-align:center">描述</th><th style="text-align:right">测试文本</th></tr></thead><tbody><tr><td style="text-align:left">标题</td><td style="text-align:center">标题</td><td style="text-align:right">这是这个</td></tr><tr><td style="text-align:left">段落</td><td style="text-align:center">文本</td><td style="text-align:right">和更多</td></tr></tbody></table></div><h1 id="围栏代码块"><a href="#围栏代码块" class="headerlink" title="围栏代码块"></a>围栏代码块</h1><blockquote><p>基本的 Markdown 语法允许您通过将行缩进四个空格或一个制表符来创建代码块。如果您觉得不方便，请尝试使用围栏代码块。根据您的 Markdown 处理器或编辑器，您将在代码块前后的行上使用三个反引号 ( <code>``) 或三个波浪号 (</code>~` )。~~~最好的部分？您不必缩进任何行！</p></blockquote><p>这样做：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line">&#123;</span><br><span class="line">  &quot;firstName&quot;: &quot;John&quot;,</span><br><span class="line">  &quot;lastName&quot;: &quot;Smith&quot;,</span><br><span class="line">  &quot;age&quot;: 25</span><br><span class="line">&#125;</span><br><span class="line">```</span><br></pre></td></tr></table></figure><p>渲染的输出如下所示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;firstName&quot;: &quot;John&quot;,</span><br><span class="line">&quot;lastName&quot;: &quot;Smith&quot;,</span><br><span class="line">&quot;age&quot;: 25</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>标签外挂</title>
      <link href="/2022/08/17/%E6%A0%87%E7%AD%BE%E5%A4%96%E6%8C%82/"/>
      <url>/2022/08/17/%E6%A0%87%E7%AD%BE%E5%A4%96%E6%8C%82/</url>
      
        <content type="html"><![CDATA[<h2 id="1-行内文本样式"><a href="#1-行内文本样式" class="headerlink" title="1.行内文本样式"></a>1.行内文本样式</h2><p>标签语法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% u 文本内容 %&#125;</span><br><span class="line">&#123;% emp 文本内容 %&#125;</span><br><span class="line">&#123;% wavy 文本内容 %&#125;</span><br><span class="line">&#123;% del 文本内容 %&#125;</span><br><span class="line">&#123;% kbd 文本内容 %&#125;</span><br><span class="line">&#123;% psw 文本内容 %&#125;</span><br></pre></td></tr></table></figure><p>样式预览</p><ol><li>带 <u>下划线</u> 的文本</li><li>带 <emp>着重号</emp> 的文本</li><li>带 <wavy>波浪线</wavy> 的文本</li><li>带 <del>删除线</del> 的文本</li><li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li><li>密码样式的文本：<psw>这里没有验证码</psw></li></ol><h2 id="2-行内文本-span"><a href="#2-行内文本-span" class="headerlink" title="2. 行内文本 span"></a>2. 行内文本 span</h2><p>标签语法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% span 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><p>样式预览</p><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<span class='p center logo large'>Volantis</span><span class='p center small'>A Wonderful Theme for Hexo</span></li></ul><h2 id="段落文本-p"><a href="#段落文本-p" class="headerlink" title="段落文本 p"></a>段落文本 p</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% p 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<p class='p red'>红色</p>、<p class='p yellow'>黄色</p>、<p class='p green'>绿色</p>、<p class='p cyan'>青色</p>、<p class='p blue'>蓝色</p>、<p class='p gray'>灰色</p>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<p class='p center logo large'>Volantis</p><p class='p center small'>A Wonderful Theme for Hexo</p></li></ul><h2 id="引用-note"><a href="#引用-note" class="headerlink" title="引用 note"></a>引用 note</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% note [class] [no-icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% note [color] [icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note simple"><p>默认 提示块标签</p></div><div class="note default simple"><p>default 提示块标签</p></div><div class="note primary simple"><p>primary 提示块标签</p></div><div class="note success simple"><p>success 提示块标签</p></div><div class="note info simple"><p>info 提示块标签</p></div><div class="note warning simple"><p>warning 提示块标签</p></div><div class="note danger simple"><p>danger 提示块标签</p></div><h2 id="上标标签-tip"><a href="#上标标签-tip" class="headerlink" title="上标标签 tip"></a>上标标签 tip</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><div class="tip "><p>default</p></div><div class="tip info"><p>info</p></div><div class="tip success"><p>success</p></div><div class="tip error"><p>error</p></div><div class="tip warning"><p>warning</p></div><div class="tip bolt"><p>bolt</p></div><div class="tip ban"><p>ban</p></div><div class="tip home"><p>home</p></div><div class="tip sync"><p>sync</p></div><div class="tip cogs"><p>cogs</p></div><div class="tip key"><p>key</p></div><div class="tip bell"><p>bell</p></div><div class="tip fa-atom"><p>自定义 font awesome 图标</p></div><h2 id="动态标签-anima"><a href="#动态标签-anima" class="headerlink" title="动态标签 anima"></a>动态标签 anima</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><div class="tip warning faa-horizontal animated"><p>warning</p></div><div class="tip ban faa-flash animated"><p>ban</p></div><div class="tip warning faa-horizontal animated faa-fast"><p>warning</p></div><div class="tip ban faa-flash animated faa-slow"><p>ban</p></div><div class="tip warning faa-horizontal animated-hover"><p>warning</p></div><div class="tip ban faa-flash animated-hover"><p>ban</p></div><div class="tip warning faa-parent animated-hover"><p class="faa-horizontal">warning</p></div><div class="tip ban faa-parent animated-hover"><p class="faa-flash">ban</p></div>]]></content>
      
      
      <categories>
          
          <category> 博客相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 标签外挂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/15/00/"/>
      <url>/2022/08/15/00/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 资源分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/15/44/"/>
      <url>/2022/08/15/44/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 问题解决 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/15/11/"/>
      <url>/2022/08/15/11/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 实用教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>骆驼样子</title>
      <link href="/2022/08/15/%E6%97%A5%E5%B8%B8/"/>
      <url>/2022/08/15/%E6%97%A5%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<h1 id="骆驼样子"><a href="#骆驼样子" class="headerlink" title="骆驼样子"></a>骆驼样子</h1><p>《骆驼祥子》讲述的是中国北平城里的一个年轻好强、充满生命活力的人力车夫祥子三起三落的人生经历。</p><p>祥子来自农村，是个破产的青年农民，勤劳、纯朴、善良，保留着农村哺育他、教养他的一切，却再也不愿意回农村去了。从农村来到城市的祥子，渴望以自己的诚实劳动买一辆属于自己的车。做个独立的劳动者是祥子的志愿、希望、甚至是宗教，凭着勤劳和坚忍，他用三年的时间省吃俭用，终于实现了理想，成为自食其力的上等车夫。但刚拉半年，车就在兵荒马乱中被逃兵掳走，祥子失去了洋车，只牵回三匹骆驼。祥子没有灰心，他依然倔强地从头开始，更加克己地拉车攒钱。可是，还没有等他再买上车，所有的积蓄又被侦探敲诈洗劫一空，买车的梦想再次成泡影。</p><p>当祥子又一次拉上自己的车，是以与虎妞成就畸形的婚姻为代价的。好景不长，因虎妞死于难产，他不得不卖掉人力车去办丧事。至此，他的人生理想彻底破灭了。再加上他心爱的女人小福子的自杀，吹熄了心中最后一朵希望的火花。连遭生活的打击，祥子开始丧失了对于生活的任何企求和信心，再也无法鼓起生活的勇气，不再像从前一样以拉车为自豪，他厌恶拉车，厌恶劳作。</p><p>被生活捉弄的祥子开始游戏生活，吃喝嫖赌。为了喝酒，祥子到处骗钱，堕落为“城市垃圾”。祥子由一个“体面的、要强的、好梦想的、利己的、个人的、健壮的、伟大的”底层劳动者沦为一个“堕落的、自私的、不幸的、社会病胎里的产儿，个人主义的末路鬼”。</p>]]></content>
      
      
      <categories>
          
          <category> 随便写写 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小说 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
